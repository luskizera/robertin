// ========[ MÓDULOS E FUNÇÕES ]======= \\
const {
  downloadContentFromMessage,
  prepareWAMessageMedia,
  sendMessage,
  mentionedJid,
  processTime,
  MediaType,
  Browser,
  MessageType,
  Presence,
  Mimetype,
  Browsers,
  delay,
  getLastMessageInChat,
  WA_DEFAULT_EPHEMERAL,
} = require("@whiskeysockets/baileys");

// ======[ JS-MENUS/INFORMAÇÕES ]====== \\

const {
  linguagem,
  mess,
  getInfo,
  menu,
  infodono,
  menudono,
  adms,
  menulogos,
  efeitos,
  menuprem,
  brincadeiras,
  alteradores,
  destrava,
  destrava2,
  tabela,
  conselhob,
  palavrasc,
  ban,
  music,
  joguinhodavelhajs,
  joguinhodavelhajs2,
  nescessario,
  logoslink,
  premium,
  muted,
  rg_aluguel,
  sendVideoAsSticker,
  sendImageAsSticker,
  sendVideoAsSticker2,
  sendImageAsSticker2,
  sotoy,
  comandos,
  limitefll,
  addVote,
  delVote,
  patentes,
  antispam,
  anotar,
  black_,
  enviarfiguUrl,
  getFileBuffer,
  DLT_FL,
  sleep,
  ANT_LTR_MD_EMJ,
  EnvBotao,
  fs,
  Boom,
  contar,
  alerandom,
  contarm,
  converterMin,
  sendHours,
  axios,
  yts,
  crypto,
  util,
  P,
  linkfy,
  request,
  cheerio,
  ms,
  ffmpeg,
  webp_mp4,
  webp_mp42,
  qrterminal,
  exec,
  spawn,
  execSync,
  moment,
  color,
  time,
  hora,
  date,
  getBuffer,
  convertSticker,
  recognize,
  fetchJson,
  fetchText,
  fetch,
  getBase64,
  createExif,
  writeExifImg,
  addLimit,
  upload,
  nit,
  addBanned,
  unBanned,
  BannedExpired,
  cekBannedUser,
  validmove,
  setGame,
  addComandosId,
  deleteComandos,
  getComandoBlock,
  getComandos,
  addComandos,
  palavrasANA,
  quizanimais,
  garticArchives,
  whatMusic,
  enigmaArchive,
  getpc,
  supre,
  wait,
  getExtension,
  generateMessageID,
  getGroupAdmins,
  getMembros,
  getRandom,
  banner2,
  banner3,
  temporizador,
  chyt,
  kyun,
  simih,
  botoff,
  colors,
  RSM_FUNC,
  infoSystem,
  os,
  arcloud,
  emoji,
  infoClima,
  insert,
  response,
  addFilter,
  isFiltered,
  mines,
  getMinesPositions,
  MinesHelp,
  ytdl,
  MultiDownload,
  AssemblyAI,
  level2,
  addKoinUser,
  checkATMuser,
  confirmATM,
  addATM,
  confirmBANCO,
  checkATBANCO,
  addKoinBanco,
  addBANCO,
  didins,
  banco,
  roupab,
  confirmDIAMANTE,
  addKoinDiamante,
  checkATDIAMNTE,
  addDIAMANTE,
  diamante,
  vida,
  fomegato,
  petgato,
  level,
  _level,
  _leveling,
  addKoinComidagato,
  checkATMGato,
  addCOMIDAGATO,
  addKoinFomeGato,
  checkATMFOMEGARTO,
  addFOMEGATO,
  confirmATMvida,
  addVidauser,
  checkATMvida,
  addATMVida,
  getLevelingXp,
  getLevelingLevel,
  getLevelingId,
  addLevelingXp,
  addLevelingLevel,
  addLevelingId,
  gato,
  hentai,
  getLevelingIdd,
  getLevelingmiss,
  getLevelingXpp,
  addLevelingXpp,
  addLevelingLevell,
  addLevelingIdd,
  carab,
  caussa,
  sapato,
  palitor,
  confirmATMdano,
  checkATMdano,
  addATMdano,
  adddanouser,
  confirmATMdefesa,
  checkATMdefesa,
  adddefesauser,
  addATMdefesa,
  confirmATMataque,
  checkATMataque,
  addataqueuser,
  addATMataque,
  dano,
  defesa,
  ataque,
  divida,
  addATMbatalhaperdida,
  addbatalhaperdidauser,
  checkATMbatalhaperdida,
  isBlackCityOff,
  confirmATMbatalhaperdida,
  addATMbatalhaganhas,
  addbatalhaganhasuser,
  checkATMbatalhaganhas,
  confirmATMbatalhaganhas,
  confirmcartao,
  checkATcartao,
  addKoincartao,
  addcartao,
  addpicareta,
  addKoinpicareta,
  checkATpicareta,
  confirmpicareta,
  addaquipado,
  addKoinaquipado,
  checkATaquipado,
  confirmaquipado,
  adddesequipado,
  addKoindesequipado,
  checkATdesequipado,
  confirmdesequipado,
  zerorpg,
  bcbet,
  minerar,
  elitepasse,
  coderpg2,
  coderpg,
  galosrpg,
  roubosrpg,
  setting,
  autorpg,
  medalhao,
  pc,
  listCommands,
  fuzzySimilarity,
  daily,
  packname,
  sendButton,
} = require("./exports.js");

const cooldown = {};

//_-_-_-_-_-_-_-_-_-_-_-_-(INFOS)_-_-_-_-_-_-_-_-_-_-_-_-_-_-_--\\

var {
  botoes,
  forwarding,
  crtt,
  visualizarmsg,
  akiyamasite,
  dono1,
  dono2,
  dono3,
  dono4,
  dono5,
  dono6,
} = require("./settings/nescessario.json");

var {
  fundo1,
  fundo2,
  imgnazista,
  imggay,
  imgcorno,
  imggostosa,
  imggostoso,
  imgfeio,
  imgvesgo,
  imgbebado,
  imggado,
  matarcmd,
  beijocmd,
  chutecmd,
  tapacmd,
  rnkgay,
  rnkgado,
  rnkcorno,
  rnkgostoso,
  rnkgostosa,
  rnknazista,
  rnkotaku,
  rnkpau,
} = require("./settings/imagen's.json");

////==================
var {
  NomeDoBot,
  NickDono,
  prefix,
  API_KEY_MIWA,
} = require("./settings/settings.json");

const {psycatgames} = require('./arquivos/funcoes/psycatgames.js');

const figurinhas = JSON.parse(
  fs.readFileSync("./database/data/figurinhas.json")
);

const countMessage = JSON.parse(
  fs.readFileSync("./settings/media/countmsg.json")
);
//====================≠≠===============\\

var numerodono_ofc = setting.numerodono.replace(
  new RegExp("[()+-/ +/]", "gi"),
  ""
);

async function reiniciarSAB() {
  file = require.resolve("./connect.js");
  delete require.cache[file];
  require(file);
}

var AsMsg = [];

// ABAIXO: INÍCIO DE CONEXÃO

async function iniciarMiwa() {
  module.exports = miwa = async (miwa, qrcode) => {
    module.exports = upsert = async (upsert, miwa) => {
      async function msgupsrt() {
        const nmrdn_dono2 =
          setting.numerodono.replace(new RegExp("[()+-/ +/]", "gi"), "") +
          "@s.whatsapp.net";

        const time_emoji = moment().tz("America/Sao_Paulo").format("HH:mm:ss");
        if (time_emoji > "00:00:00" && time_emoji < "05:00:00") {
          var tempo_emoji = "🌑";
        }
        if (time_emoji > "05:00:00" && time_emoji < "12:00:00") {
          var tempo_emoji = "☀️";
        }
        if (time_emoji > "12:00:00" && time_emoji < "18:00:00") {
          var tempo_emoji = "🍃";
        }
        if (time_emoji > "18:00:00") {
          var tempo_emoji = "🌙";
        }

        var hora120 = moment.tz("America/Sao_Paulo").format("HH:mm:ss");

        RSM_FUNC(miwa, nmrdn_dono2, hora120, upsert);

        for (const info of upsert?.messages || []) {
          const from = info.key.remoteJid;
          const isGroup = from.endsWith("@g.us");

          if (fs.existsSync(`./database/grupos/activation_gp/${from}.json`)) {
            var jsonGp = JSON.parse(
              fs.readFileSync(`./database/grupos/activation_gp/${from}.json`)
            );
          }

          if (
            fs.existsSync(`./database/grupos/activation_gp/${from}.json`) &&
            jsonGp[0].x9 &&
            info.messageStubType
          ) {
            switch (info.messageStubType) {
              case 29:
                await delay(1000);
                miwa.sendMessage(info.key.remoteJid, {
                  text: `O participante: [ @${
                    info.messageStubParameters[0].split("@")[0]
                  } ] foi promovido ao cargo de admin do grupo pelo admin - [ @${
                    info.participant.split("@")[0]
                  } ]`,
                  mentions: [info.messageStubParameters[0], info.participant],
                });
                break;
              case 30:
                await delay(1000);
                miwa.sendMessage(info.key.remoteJid, {
                  text: `O adminstrador: [ @${
                    info.messageStubParameters[0].split("@")[0]
                  } ] foi rebaixado para membro comum do grupo pelo admin - [ @${
                    info.participant.split("@")[0]
                  } ]`,
                  mentions: [info.messageStubParameters[0], info.participant],
                });
                break;
            }
          }

          if (!info.message) return;
          if (upsert.type == "append") return;
          const baileys = require("@whiskeysockets/baileys");
          const type = baileys.getContentType(info.message);
          const content = JSON.stringify(info.message);
          const pushname = info.pushName ? info.pushName : "";
          if (visualizarmsg) {
            await miwa.readMessages([info.key]);
          } else {
            if (from == "status@broadcast") return;
          }

          //==============(BODY)================\\

          var body =
            type === "conversation"
              ? info.message.conversation
              : type == "editedMessage"
              ? info.message.editedMessage.message.protocolMessage.editedMessage
                  ?.conversation ||
                info.message.editedMessage.message.protocolMessage.editedMessage
                  ?.imageMessage?.caption ||
                info.message.editedMessage.message.protocolMessage.editedMessage
                  ?.videoMessage?.caption ||
                info.message.editedMessage.message.protocolMessage.editedMessage
                  ?.documentMessage?.caption
              : type === "viewOnceMessageV2"
              ? info.message.viewOnceMessageV2.message.imageMessage
                ? info.message.viewOnceMessageV2.message.imageMessage.caption
                : info.message.viewOnceMessageV2.message.videoMessage.caption
              : type === "imageMessage"
              ? info.message.imageMessage.caption
              : type === "videoMessage"
              ? info.message.videoMessage.caption
              : type === "extendedTextMessage"
              ? info.message.extendedTextMessage.text
              : type === "viewOnceMessage"
              ? info.message.viewOnceMessage.message.videoMessage
                ? info.message.viewOnceMessage.message.videoMessage.caption
                : info.message.viewOnceMessage.message.imageMessage.caption
              : type === "documentWithCaptionMessage"
              ? info.message.documentWithCaptionMessage.message.documentMessage
                  .caption
              : type === "buttonsMessage"
              ? info.message.buttonsMessage.imageMessage.caption
              : type === "buttonsResponseMessage"
              ? info.message.buttonsResponseMessage.selectedButtonId
              : type === "listResponseMessage"
              ? info.message.listResponseMessage.singleSelectReply.selectedRowId
              : type === "templateButtonReplyMessage"
              ? info.message.templateButtonReplyMessage.selectedId
              : type === "groupInviteMessage"
              ? info.message.groupInviteMessage.caption
              : type === "pollCreationMessageV3"
              ? info.message.pollCreationMessageV3
              : type === "interactiveResponseMessage"
              ? JSON.parse(
                  info.message.interactiveResponseMessage
                    .nativeFlowResponseMessage.paramsJson
                ).id
              : type === "text"
              ? info.text
              : "";
          const budy =
            type === "conversation"
              ? info.message.conversation
              : type === "extendedTextMessage" &&
                info.message.extendedTextMessage
              ? info.message.extendedTextMessage.text
              : "";

          var Procurar_String =
            info.message?.conversation ||
            info.message?.viewOnceMessageV2?.message?.imageMessage?.caption ||
            info.message?.viewOnceMessageV2?.message?.videoMessage?.caption ||
            info.message?.imageMessage?.caption ||
            info.message?.videoMessage?.caption ||
            info.message?.extendedTextMessage?.text ||
            info.message?.viewOnceMessage?.message?.videoMessage?.caption ||
            info.message?.viewOnceMessage?.message?.imageMessage?.caption ||
            info.message?.documentWithCaptionMessage?.message?.documentMessage
              ?.caption ||
            info.message?.buttonsMessage?.imageMessage?.caption ||
            "";

          const args = body.trim().split(/ +/).slice(1);

          var budy2 = body
            .toLowerCase()
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "");

          if (
            isGroup &&
            fs.existsSync(`./database/grupos/activation_gp/${from}.json`) &&
            jsonGp[0].multiprefix
          ) {
            let prefix =
              jsonGp[0]?.prefixos[
                jsonGp[0]?.prefixos?.indexOf(String(body)?.trim()?.charAt(0))
              ] || jsonGp[0].prefixos[0];
          }

          if (
            isGroup &&
            fs.existsSync(`./database/grupos/activation_gp/${from}.json`) &&
            !jsonGp[0].multiprefix
          ) {
            var prefix = setting.prefix;
          } else if (!isGroup) {
            var prefix = setting.prefix;
          }

          var isCmd = body.trim().startsWith(prefix);

          const command = isCmd
            ? budy2.trim().slice(1).split(/ +/).shift().toLocaleLowerCase()
            : null;

          const reqcmd = JSON.parse(
            fs.readFileSync("./database/data/totalcmd.json")
          );

          const q_2 = budy2.trim().split(/ +/).slice(1).join(" ");

          const q = args.join(" ");

          var budy3 = budy
            .toLowerCase()
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "");

          var PR_String = Procurar_String.toLowerCase()
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "");

          const q_ofc = PR_String.trim().split(/ +/).slice(1).join(" ");

          //======================================\\

          try {
            var groupMetadata = isGroup ? await miwa.groupMetadata(from) : "";
          } catch {
            return;
          }

          const groupName = isGroup ? groupMetadata.subject : "";

          const sender = isGroup
            ? info.key.participant.includes(":")
              ? info.key.participant.split(":")[0] + "@s.whatsapp.net"
              : info.key.participant
            : info.key.remoteJid;

          const messagesC = PR_String.slice(0)
            .trim()
            .split(/ +/)
            .shift()
            .toLowerCase();

          const arg = body.substring(body.indexOf(" ") + 1);

          const botNumber =
            (await miwa.user.id.split(":")[0]) + "@s.whatsapp.net";
          const argss = body.split(/ +/g);
          const testat = body;
          const ants = body;

          const groupDesc = isGroup ? groupMetadata.desc : "";

          const groupMembers = isGroup ? groupMetadata.participants : "";

          const isnit = nit.includes(sender);

          const issupre = supre.includes(sender);

          const ischyt = chyt.includes(sender);

          const groupAdmins = isGroup ? getGroupAdmins(groupMembers) : "";

          const somembros = isGroup ? getMembros(groupMembers) : "";

          //======================================\\

          // FUNÇÕES DO RPG

          const autorpg = JSON.parse(
            fs.readFileSync("./database/usuarios/SystemRPG/autorpg.json")
          );
          const miwarpg = JSON.parse(
            fs.readFileSync("./database/usuarios/SystemRPG/miwarpg.json")
          );
          const bcbet = JSON.parse(
            fs.readFileSync("./database/usuarios/SystemRPG/1xbcbet.json")
          );
          const minerar = JSON.parse(
            fs.readFileSync("./database/usuarios/SystemRPG/minerar.json")
          );
          const rg_pescaria = JSON.parse(
            fs.readFileSync("./database/usuarios/SystemRPG/pescaria-t.json")
          );
          const pescaria = JSON.parse(
            fs.readFileSync("./database/usuarios/SystemRPG/pescaria.json")
          );
          const coderpg = JSON.parse(
            fs.readFileSync("./database/usuarios/SystemRPG/coderpg.json")
          );
          const elitepasse = JSON.parse(
            fs.readFileSync("./database/usuarios/SystemRPG/passerpg.json")
          );
          const cavalosrpg = JSON.parse(
            fs.readFileSync("./database/usuarios/SystemRPG/cavalosrpg.json")
          );
          const galosrpg = JSON.parse(
            fs.readFileSync("./database/usuarios/SystemRPG/galosrpg.json")
          );
          const roubosrpg = JSON.parse(
            fs.readFileSync("./database/usuarios/SystemRPG/roubosrpg.json")
          );

          const VerificarJSON = (json, value) => {
            if (JSON.stringify(json).includes(value)) return true;
            return false;
          };

          //======================================\\

          const nmrdn =
            setting.numerodono.replace(new RegExp("[()+-/ +/]", "gi"), "") +
              `@s.whatsapp.net` || isnit;

          const numerodono = [
            `${nmrdn}`,
            `${dono1}@s.whatsapp.net`,
            `${dono2}@s.whatsapp.net`,
            `${dono3}@s.whatsapp.net`,
            `${dono4}@s.whatsapp.net`,
            `${dono5}@s.whatsapp.net`,
            `${dono6}@s.whatsapp.net`,
          ];

          async function btncomfoto(
            jid,
            text = "a",
            title = "b",
            subtitle = "c",
            footer = "d",
            media,
            mediaType,
            quoted,
            options,
            buttons
          ) {
            if (!jid) throw new Error("precisa do jid");
            if (typeof jid !== "string")
              throw new TypeError("jid tem que ser uma string");
            if (typeof text !== "string")
              throw new TypeError("text tem que ser uma string");
            if (typeof title !== "string")
              throw new TypeError("title tem que ser uma string");
            if (typeof footer !== "string")
              throw new TypeError("footer tem que ser uma string");
            if (media && typeof mediaType !== "string")
              throw new TypeError("mediaType  tem que ser uma string");
            if (quoted && typeof quoted !== "object")
              throw new TypeError("quoted tem que ser um objeto");
            if (options && typeof options !== "object")
              throw new TypeError("options tem que ser um objeto");
            if (
              mediaType &&
              !["document", "image", "video"].includes(mediaType)
            )
              throw new TypeError(
                "mediaType invalido, formatos suportados: image, video, document"
              );
            quoted = { ...quoted };
            options = { ...options };
            const contextInfo = {
              mentionedJid: Array.isArray(options.mentions)
                ? options.mentions
                : [],
              ...options.contextInfo,
              stanzaId: quoted.key?.id,
              remoteJid: quoted.key?.remoteJid,
              participant: quoted.key?.participant,
              fromMe: quoted.key?.fromMe,
              quotedMessage: quoted.message,
            };
            delete options.contextInfo;
            const msg = baileys.generateWAMessageFromContent(
              jid,
              {
                interactiveMessage:
                  baileys.proto.Message.InteractiveMessage.create({
                    body: baileys.proto.Message.InteractiveMessage.Body.create({
                      text,
                    }),
                    footer:
                      baileys.proto.Message.InteractiveMessage.Footer.create({
                        text: footer,
                      }),
                    header:
                      baileys.proto.Message.InteractiveMessage.Header.create({
                        title,
                        subtitle,
                        hasMediaAttachment: !!media,
                        ...(media && mediaType
                          ? await baileys.generateWAMessageContent(
                              { [mediaType]: media },
                              { upload: miwa.waUploadToServer }
                            )
                          : {}),
                      }),
                    nativeFlowMessage:
                      baileys.proto.Message.InteractiveMessage.NativeFlowMessage.create(
                        {
                          buttons: buttons,
                        }
                      ),
                    contextInfo,
                  }),
              },
              {}
            );
            await miwa.sendMessage(msg.key.remoteJid, msg.message, {
              messageId: msg.key.id,
            });
            return msg;
          }

          //=================> Funções de Grupo 🥋

          const dirGroup = `./database/grupos/activation_gp/${from}.json`;

          const nescj = "./settings/nescessario.json";

          if (isGroup && !fs.existsSync(dirGroup)) {
            var data = [
              {
                name: groupName,
                groupId: from,
                x9: false,
                antiimg: false,
                antivideo: false,
                antiaudio: false,
                antisticker: false,
                antidoc: false,
                antictt: false,
                antiloc: false,
                antilinkgp: false,
                antilinkhard: false,
                antifake: false,
                antiporn: false,
                Odelete: false,
                antispam: false,
                antinotas: false,
                anticatalogo: false,
                visuUnica: false,
                registrarFIGUS: false,
                soadm: false,
                listanegra: [],
                advertir: [],
                prefixos: [`${setting.prefix}`],
                advertir2: [],
                legenda_estrangeiro: "0",
                legenda_documento: "0",
                legenda_video: "0",
                legenda_imagem: "0",
                multiprefix: false,
                forca_ofc: [
                  {
                    acertos: 0,
                    erros: 0,
                    palavra: [],
                    escreveu: [],
                    palavra_ofc: 0,
                    dica: 0,
                    tema: 0,
                  },
                ],
                ausentes: [],
                antipalavrao: {
                  active: false,
                  palavras: [],
                },
                limitec: {
                  active: false,
                  quantidade: null,
                },
                wellcome: [
                  {
                    bemvindo1: false,
                    legendabv: "Faaaaala #numerodele#!\nBem vinde ao zap do robertin, filho do Et de Vaginas.\nPra descobrir tudo, use o *${prefix}menu* pra aprender a usar essa merda.",
                    legendasaiu: 0,
                  },
                  {
                    bemvindo2: false,
                    legendabv: "Olá #numerodele#, seja bem vindo (a)",
                    legendasaiu: 0,
                  },
                ],
                simi1: false,
                simi2: false,
                autosticker: false,
                autoresposta: false,
                jogos: false,
                level: false,
                bangp: false,
                nsfw: false,
                isAutodown: false,
              },
            ];
            fs.writeFileSync(dirGroup, JSON.stringify(data, null, 2) + "\n");
          }

          const dataGp = isGroup
            ? JSON.parse(fs.readFileSync(dirGroup))
            : undefined;

          var DFNMULTIP = `./database/func/prefixo/multip_${from}.json`;

          function setGp(index) {
            fs.writeFileSync(dirGroup, JSON.stringify(index, null, 2) + "\n");
          }

          function setNes(index) {
            fs.writeFileSync(nescj, JSON.stringify(index, null, 2) + "\n");
          }

          //=====(ADMS/DONO/ETC..CONST)=======\\

          const adivinha =
            info.key.id.length > 21
              ? "Android"
              : info.key.id.substring(0, 2) == "3A"
              ? "iPhone"
              : "WhatsApp Web";
          const quoted = info.quoted ? info.quoted : info;

          const isBot = info.key.fromMe ? true : false;

          const SoDono =
            numerodono.includes(sender) || isBot || isnit || issupre || ischyt;

          dfndofc = setting.numerodono + "@s.whatsapp.net";

          const DonoOficial = dfndofc.includes(sender);

          const isPremium = premium.includes(sender) || SoDono;

          const isBotGroupAdmins = groupAdmins.includes(botNumber) || false;

          const isGroupAdmins =
            groupAdmins.includes(sender) || false || DonoOficial;

          const isAutoBaixar = isGroup ? dataGp[0].autodown : undefined;

          const isBanned = ban.includes(sender);

          const isVisualizar = nescessario.visualizarmsg;

          const isVerificado = nescessario.verificado;

          const isAudioMenu = nescessario.menu_audio;

          const isAntiPv2 = nescessario.banChats;

          const isConsole = nescessario.consoleoff;

          const isBotoff = nescessario.botoff;

          const listanegraG = nescessario.listanegraG;

          const isAntiPv = nescessario.antipv;

          const isAnticall = nescessario.anticall;

          const TOKEN_GPT = nescessario.TOKEN_GPT;

          const isJoguin = isGroup ? joguinhodavelhajs.includes(sender) : false;

          //============(FUNÇÕES)============\\

          const isAntiImg = isGroup ? dataGp[0].antiimg : undefined;

          const isAntiVid = isGroup ? dataGp[0].antivideo : undefined;

          const isAntiAudio = isGroup ? dataGp[0].antiaudio : undefined;

          const isAntiSticker = isGroup ? dataGp[0].antisticker : undefined;

          const Antidoc = isGroup ? dataGp[0].antidoc : undefined;

          const isAntiCtt = isGroup ? dataGp[0].antictt : undefined;

          const Antiloc = isGroup ? dataGp[0].antiloc : undefined;

          const isAntilinkgp = isGroup ? dataGp[0].antilinkgp : undefined;

          const isAntiLinkHard = isGroup ? dataGp[0].antilinkhard : undefined;

          const isAntiPorn = isGroup ? dataGp[0].antiporn : undefined;

          const isAntifake = isGroup ? dataGp[0].antifake : undefined;

          const IS_DELETE = nescessario.Odelete;

          const So_Adm = isGroup ? dataGp[0].soadm : undefined;

          const isX9VisuUnica = isGroup ? dataGp[0].visuUnica : undefined;

          const ADVT = isGroup ? dataGp[0].advertir : undefined;

          const ADVT2 = isGroup ? dataGp[0].advertir2 : undefined;

          const isx9 = isGroup ? dataGp[0].x9 : undefined;

          const isMultiP = isGroup ? dataGp[0].multiprefix : undefined;

          const isAntiNotas = isGroup ? dataGp[0].antinotas : undefined;

          const isAnticatalogo = isGroup ? dataGp[0].anticatalogo : undefined;

          const isWelkom = isGroup
            ? dataGp[0].wellcome[0].bemvindo1
            : undefined;

          const isWelkom2 = isGroup
            ? dataGp[0].wellcome[1].bemvindo2
            : undefined;

          const isTotext = isGroup ? dataGp[0].autototext : undefined;

          const isAutoInsta = isGroup ? dataGp[0].autoinsta : undefined;

          const isAutoTiktok = isGroup ? dataGp[0].autotiktok : undefined;

          const isGptAudio = isGroup ? dataGp[0].autogpt : undefined;

          const isSimi = isGroup ? dataGp[0].simi1 : undefined;

          const isSimi2 = isGroup ? dataGp[0].simi2 : undefined;

          const isAutofigu = isGroup ? dataGp[0].autosticker : undefined;

          const isAutorepo = isGroup ? dataGp[0].autoresposta : undefined;

          const isModobn = isGroup ? dataGp[0].jogos : undefined;

          const isMiwaCityOFF =
            !JSON.stringify(autorpg).includes(from) ||
            autorpg[autorpg.map((i) => i.id).indexOf(from)].rpg;

          const isLevelingOn = isGroup ? dataGp[0].level : undefined;

          const isNsfw = isGroup ? dataGp[0].nsfw : undefined;

          const isPalavrao = isGroup
            ? dataGp[0].antipalavrao.active
            : undefined;

          const isPalavras = isGroup
            ? dataGp[0].antipalavrao.palavras
            : undefined;

          const isAntiFlood = isGroup ? dataGp[0].limitec.active : undefined;

          //const isAntiSpam = isGroup ? dataGp[0].antispam : undefined

          const isLimitec = isGroup ? dataGp[0].limitec.quantidade : undefined;

          //================(CONST KEYS)====================\\

          const keymegumi = "luskizera";

          //================(CONST MERCADOPAGOKEY)====================\\

          const { payment } = require("./mercado-pago-API/index.js");

          const dataMP = JSON.parse(
            fs.readFileSync(`./settings/mercado pago.json`)
          );

          const MercadoPagoKey = dataMP.token;

          //=======================================\\

          const vcard =
            "BEGIN:VCARD\n" +
            "VERSION:3.0\n" +
            "\nN:Gilliardi Lopes\nFN:Gilliardi Lopes\nitem1.TEL;waid=559886257157:+55 98 8629-4633\nitem1.X-ABLabel:Ponsel\nitem2.EMAIL;type=INTERNET:pelopesfera@gmail.com\nitem2.X-ABLabel:Email\nitem3.URL:https://youtube.com/@gillidelzp5095:YouTube\nitem4.ADR:;;;;;Brasil\nitem4.X-ABLabel:Regiao\n" +
            "END:VCARD"; // Fim do ctt

          const vcard2 =
            "BEGIN:VCARD\n" +
            "VERSION:3.0\n" +
            "\nN:Francielly\nFN:Francielly\nitem1.TEL;waid=559886294633:+55 98 8629-4633\nitem1.X-ABLabel:Ponsel\nitem2.EMAIL;type=INTERNET:natachafrancielly@gmail.com\nitem2.X-ABLabel:Email\nitem3.URL:https://youtube.com/@gillidelzp5095:YouTube\nitem4.ADR:;;;;;Brasil\nitem4.X-ABLabel:Regiao\n" +
            "END:VCARD"; // Fim do ctt

          //==MUTE==\\
          const muteall = JSON.parse(
            fs.readFileSync("./arquivos/FilesJson/grupos/muteall.json")
          );
          const isMuteAll = muteall.indexOf("Ativado") >= 0 ? true : false;
          var banChatss = nescessario.banChatss;
          //===========================

          var downoff =
            "Sistema apresenta instabilidades... Pfvr, volte mais tarde.";

          var downon =
            "Sistema cancelou a operação, devido a demora na resposta...";

          var semfoto = `https://telegra.ph/file/1523c1871a80285c2b2e8.jpg`;

          //==========(VERIFICADO)===============\\

          if (isVerificado) {
            var selo = {
              key: {
                fromMe: false,
                participant: `0@s.whatsapp.net`,
                ...(from ? { remoteJid: "status@broadcast" } : {}),
              },
              message: {
                imageMessage: {
                  url: "https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc",
                  mimetype: "image/jpeg",
                  caption: `${NomeDoBot}`,
                },
              },
            };
          } else {
            var selo = info;
          }

          //()=> selos ay john

          //selo localização
          const seloloc = {
            key: {
              fromMe: false,
              participant: "0@s.whatsapp.net",
              remoteJid: "status@broadcast",
            },
            message: {
              liveLocationMessage: {
                degreesLatitude: 173.282,
                degreesLongitude: -19.378,
                sequenceNumber: "1657237469254001",
                thumbnail: null,
                caption: `Bem vindo: ${pushname}`,
              },
            },
          };

          //selo contato
          const selocontato = {
            key: { fromMe: false, participant: `0@s.whatsapp.net`, ...{} },
            message: {
              contactMessage: {
                displayName: `${pushname}`,
                vcard: `BEGIN:VCARD\nVERSION:3.0\nN:XL;${pushname},;;;\nFN:${pushname},\nitem1.TEL;waid=${
                  sender.split("@")[0]
                }:${sender.split("@")[0]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD`,
                sourceUrl: `https://chat.whatsapp.com/EcbQgbQceFQH0fzKUnE0mH`,
              },
            },
          };

          //sabios
          const selogrupo = {
            key: { fromMe: false, participant: "0@s.whatsapp.net", ...{} },
            message: {
              groupInviteMessage: {
                text: "https://chat.whatsapp.com/EcbQgbQceFQH0fzKUnE0mH",
                sourceUrl: "https://chat.whatsapp.com/EcbQgbQceFQH0fzKUnE0mH",
                matchedText: "https://chat.whatsapp.com/EcbQgbQceFQH0fzKUnE0mH",
                description: "Convite para grupo do WhatsApp",
                title: "GILIARDIX",
                previewType: "NONE",
                jpegThumbnail: null,
              },
            },
          };

          //selo vizualização única
          const selovizu = {
            key: {
              fromMe: false,
              participant: `0@s.whatsapp.net`,
              ...(from ? { remoteJid: "status@broadcast" } : {}),
            },
            message: { viewOnceMessage: { jpegThumbnail: null } },
          };

          //selo documento
          const selodoc = {
            key: { fromMe: false, participant: "0@s.whatsapp.net" },
            message: {
              documentMessage: {
                title: `Bem vindo: ${pushname}`,
                jpegThumbnail: null,
              },
            },
          };

          //selo grupo
          const selogp = {
            key: {
              fromMe: false,
              participant: "0@s.whatsapp.net",
              remoteJid: "0@s.whatsapp.net",
            },
            message: {
              groupInviteMessage: {
                groupJid: "6282127487538-1625305606@g.us",
                title: `Grupo da m i w a oficial😎`,
                body: `É voce esta certo os criadores da  m i w a  são os melhores `,
                mediaType: 1,
                renderLargerThumbnail: false,
                showAdAttribution: true,
                thumbnail: null,
                body: `RYUU PAUZUDO`,
                sourceUrl: `https://chat.whatsapp.com/HN9fP1VRh31HUCzARrj6VB`,
              },
            },
          };

          //selo grupo 3
          const selowagp = {
            key: { fromMe: false, participant: "0@s.whatsapp.net" },
            message: {
              imageMessage: {
                url: "https://mmg.whatsapp.net/o1/v/t62.7118-24/f1/m233/up-oil-image-9e3350da-fa67-4c21-bd79-5deb3540b6f7?ccb=9-4&oh=01_AdQhhSRRTZNium5zoC5DdQIsGVS9Thx2iAnrtTzFsrR9ow&oe=64B9C015&mms3=true",
                mimetype: "image/jpeg",
                caption: "Criadores da  m i w a \n\n@ryuu\n@ryuuwx",
                sourceUrl: "https://chat.whatsapp.com/EcbQgbQceFQH0fzKUnE0mH",
                fileLength: "999999999999999999",
                jpegThumbnail: null,
              },
            },
          };

          //selo grupo atualizado wandinha

          //selo carrinho
          const selocar = {
            key: {
              fromMe: false,
              participant: "0@s.whatsapp.net",
              remoteJid: "120363022697760691@g.us",
            },
            message: {
              orderMessage: {
                itemCount: 999,
                status: 200,
                jpegThumbnail: fs.readFileSync("./settings/lib/logo.jpg"),
                surface: 200,
                message: `Ets de Vaginas\nBem vindo: ${pushname}`,
                orderTitle: "up",
                sellerJid: "0@s.whatsapp.net",
              },
            },
            contextInfo: { forwardingScore: 999, isForwarded: true },
            sendEphemeral: true,
          };

          //selo vídeo
          const selovideo = {
            key: {
              fromMe: false,
              participant: `0@s.whatsapp.net`,
              ...(from ? { remoteJid: "6289643739077-1613049930@g.us" } : {}),
            },
            message: {
              videoMessage: {
                title: `bem vindo: ${pushname}`,
                h: `Usuario: ${pushname}`,
                duration: "28382",
                caption: `Bem vindo: ${pushname}`,
                jpegThumbnail: null,
              },
            },
          };

          //============

          // FUNÇÕES DE MARCAÇÕES ESSENCIAL \\

          const menc_prt =
            info.message?.extendedTextMessage?.contextInfo?.participant;

          const menc_jid = args?.join(" ").replace("@", "") + "@s.whatsapp.net";

          const menc_jid2 =
            info.message?.extendedTextMessage?.contextInfo?.mentionedJid;

          const sender_ou_n = q.includes("@") ? menc_jid : sender;

          const mrc_ou_numero =
            q.length > 6 && !q.includes("@")
              ? q.replace(new RegExp("[()+-/ +/]", "gi"), "") +
                `@s.whatsapp.net`
              : menc_prt;
          const menc_os2 = q.includes("@") ? menc_jid : menc_prt;

          const marc_tds = q.includes("@")
            ? menc_jid
            : q.length > 6 && !q.includes("@")
            ? q.replace(new RegExp("[()+-/ +/]", "gi"), "") + `@s.whatsapp.net`
            : menc_prt;

          const menc_prt_nmr =
            q.length > 12
              ? q.replace(new RegExp("[()+-/ +/]", "gi"), "") +
                `@s.whatsapp.net`
              : menc_prt;

          ////////////////////////////////////////////

          var isUrl = (url) => {
            if (linkfy.find(url)[0]) return true;
            return false;
          };

          if (info.key.fromMe) return;

          const reply = (texto) => {
            miwa
              .sendMessage(from, { text: texto }, { quoted: info })
              .catch((e) => {
                return reply("Erro..");
              });
          };

          const msgSemQuoted = (oq_que_deseja) => {
            miwa.sendMessage(from, { text: oq_que_deseja }).catch((e) => {
              return reply("Erro..");
            });
          };
          //
          const time2 = moment().tz("America/Sao_Paulo").format("HH:mm:ss");
          if (time2 > "00:00:00" && time2 < "05:00:00") {
            var tempo = "Boa Madrugada";
          }
          if (time2 > "05:00:00" && time2 < "12:00:00") {
            var tempo = "Bom Dia";
          }
          if (time2 > "12:00:00" && time2 < "18:00:00") {
            var tempo = "Boa Tarde";
          }
          if (time2 > "18:00:00") {
            var tempo = "Boa Noite";
          }

          const yts2 = require("yt-search");

          async function sendUrlText(
            id,
            textCaption,
            title,
            desc,
            imageUrl,
            linkAcess,
            quotedThis
          ) {
            await miwa.sendMessage(
              id,
              {
                text: textCaption,
                contextInfo: {
                  externalAdReply: {
                    title: title,
                    body: desc,
                    thumbnail: await getBuffer(imageUrl),
                    mediaType: 1,
                    sourceUrl: linkAcess,
                  },
                },
              },
              { quoted: quotedThis }
            );
          }

          async function sendUrlText2(
            id,
            texto,
            title,
            desc,
            foto,
            link,
            miwa
          ) {
            miwa.sendMessage(
              id,
              {
                text: texto,
                contextInfo: {
                  externalAdReply: {
                    title: title,
                    body: desc,
                    thumbnail: await getBuffer(foto),
                    mediaType: 1,
                    renderLargerThumbnail: true,
                    showAdAttribution: true,
                    sourceUrl: link,
                  },
                },
              },
              { quoted: miwa }
            );
          }

          async function sendUrlDoc(
            id,
            txt,
            tipo,
            titulo,
            tamanho,
            nome,
            desc,
            thumb,
            link,
            miwa
          ) {
            miwa.sendMessage(
              id,
              {
                document: Buffer.from("oi curioso"),
                caption: txt,
                mimetype: tipo,
                fileName: titulo,
                fileLength: 1000000 * Number(tamanho),
                contextInfo: {
                  externalAdReply: {
                    title: nome,
                    body: desc,
                    mediaType: 1,
                    thumbnail: await getBuffer(thumb),
                    showAdAttribution: true,
                    renderLargerThumbnail: true,
                    sourceUrl: link,
                  },
                },
              },
              { quoted: miwa }
            );
          }

          function sendChannelText(id, txt, channel, name, miwa) {
            menc = [];
            sp = txt.split(` `);
            for (i of sp) {
              if (i.includes(`@`)) menc.push(identArroba(i));
            }
            miwa.sendMessage(
              id,
              {
                text: txt,
                mentions: menc,
                contextInfo: {
                  forwardingScore: 999,
                  isForwarded: true,
                  forwardedNewsletterMessageInfo: {
                    newsletterJid: channel,
                    newsletterName: name,
                  },
                },
              },
              { quoted: miwa }
            );
          }

          function sendChannelImage(id, img, txt, channel, miwa) {
            menc = [];
            sp = txt.split(` `);
            for (i of sp) {
              if (i.includes(`@`)) menc.push(identArroba(i));
            }
            miwa.sendMessage(
              id,
              {
                image: { url: img },
                caption: txt,
                mentions: menc,
                contextInfo: {
                  forwardingScore: 999,
                  isForwarded: true,
                  forwardedNewsletterMessageInfo: {
                    newsletterJid: channel,
                    newsletterName: name,
                  },
                },
              },
              { quoted: miwa }
            );
          }

          const sendSticker = (from, filename, info) => {
            miwa.sendMessage(
              from,
              { sticker: { url: fileName } },
              { quoted: info }
            );
          };

          const sendImage = (ytb) => {
            miwa.sendMessage(from, { image: { url: ytb } }, { quoted: info });
          };

          const sendMess = (miwa, ytb) => {
            miwa.sendMessage(miwa, { text: ytb });
          };

          const mentions = (teks, memberr, id) => {
            id == null || id == undefined || id == false
              ? miwa.sendMessage(from, { text: teks.trim(), mentions: memberr })
              : miwa.sendMessage(from, {
                  text: teks.trim(),
                  mentions: memberr,
                });
          };

          const mention = (teks = "", ms = info) => {
            memberr = [];
            vy = teks.includes("\n") ? teks.split("\n") : [teks];
            for (vz of vy) {
              for (zn of vz.split(" ")) {
                if (zn.includes("@"))
                  memberr.push(parseInt(zn.split("@")[1]) + "@s.whatsapp.net");
              }
            }
            miwa.sendMessage(
              from,
              { text: teks.trim(), mentions: memberr },
              { quoted: ms }
            );
          };

          const mencionarIMG = (teks = "", Url, ms) => {
            memberr = [];
            vy = teks.includes("\n") ? teks.split("\n") : [teks];
            for (vz of vy) {
              for (zn of vz.split(" ")) {
                if (zn.includes("@"))
                  memberr.push(parseInt(zn.split("@")[1]) + "@s.whatsapp.net");
              }
            }
            miwa.sendMessage(
              from,
              { image: { url: Url }, caption: teks.trim(), mentions: memberr },
              { quoted: ms }
            );
          };

          const reagir = async (idgp, emj) => {
            var reactionMessage = {
              react: {
                text: emj,
                key: info.key,
              },
            };
            miwa.sendMessage(idgp, reactionMessage);
          };

          const verificarN = async (sla) => {
            const [result] = await miwa.onWhatsApp(sla);
            if (result == undefined) {
              reply("Este usuário não é existente no WhatsApp");
            } else {
              reply(
                `${sla} Número inserido é existente no WhatsApp.\n\ncom o id: ${result.jid}`
              );
            }
          };

          var sendlistA = async (id, txt1, txt2, title1, btext, but, vr) => {
            var sections = but;
            var listMessage = {
              text: txt1,
              footer: txt2,
              title: title1,
              buttonText: btext,
              sections,
            };
            miwa.sendMessage(id, listMessage, { quoted: vr });
          };

          const EnvLista = async (IDG, TXT1, TXT2, TTL, TTB, TTB2, ENVLRW) => {
            listMessage = {
              text: TXT1,
              footer: TXT2,
              title: TTL,
              buttonText: TTB,
              sections: [
                {
                  title: TTB2,
                  rows: ENVLRW,
                },
              ],
            };
            miwa.sendMessage(IDG, listMessage).catch((e) => {
              console.log(e);
            });
          };

          if (
            isGroup &&
            isBotGroupAdmins &&
            !isGroupAdmins &&
            !SoDono &&
            !info.key.fromMe
          ) {
            if (menc_jid2?.length >= groupMembers.length - 1) {
              miwa.sendMessage(from, {
                text: "*O participante foi removido do grupo* - Motivo: Membro comum com mensagem de marcação de todos do grupo, por conta disso irei remover do grupo, qualquer coisa entre em contato com um administrador...",
              });
              if (IS_DELETE) {
                setTimeout(() => {
                  miwa.sendMessage(from, {
                    delete: {
                      remoteJid: from,
                      fromMe: false,
                      id: info.key.id,
                      participant: sender,
                    },
                  });
                }, 500);
              }
              miwa.groupParticipantsUpdate(from, [sender], "remove");
            }
          }

          const enviarfigu = async (figu, tag) => {
            miwa.sendMessage(from, { sticker: { url: figu } }, { quoted: tag });
          };

          if (isAutofigu && isGroup) {
            async function autofiguf() {
              setTimeout(async () => {
                if (
                  budy.includes(`${prefix}sticker`) ||
                  budy.includes(`${prefix}s`) ||
                  budy.includes(`${prefix}stk`) ||
                  budy.includes(`${prefix}st`) ||
                  budy.includes(`${prefix}fsticker`) ||
                  budy.includes(`${prefix}f`) ||
                  budy.includes(`${prefix}fstiker`)
                )
                  return;

                if (type == "imageMessage") {
                  var pack = `robertin`;
                  var author2 = `${pushname}`;
                  owgi = await getFileBuffer(
                    info.message.imageMessage,
                    "image"
                  );
                  let encmediaa = await sendImageAsSticker2(
                    miwa,
                    from,
                    owgi,
                    info,
                    { packname: pack, author: author2 }
                  );
                  DLT_FL(encmediaa);
                }

                if (type == "videoMessage") {
                  if (isMedia && info.message.videoMessage.seconds < 10) {
                    var pack = `robertin`;
                    var author2 = `${pushname}`;
                    owgi = await getFileBuffer(
                      info.message.videoMessage,
                      "video"
                    );
                    let encmedia = await sendVideoAsSticker2(
                      miwa,
                      from,
                      owgi,
                      info,
                      { packname: pack, author: author2 }
                    );
                    DLT_FL(encmedia);
                  }
                }
              }, 1000);
            }
            autofiguf().catch((e) => {
              console.log(e);
            });
          }

          var nmrdnofc1 = setting.numerodono.replace(
            new RegExp("[()+-/ +/]", "gi"),
            ""
          );

          if (
            isGroup &&
            fs.existsSync(`./database/func/afk/afk-@${nmrdnofc1}.json`)
          ) {
            if (budy.indexOf(`@${nmrdnofc1}`) >= 0) {
              const tabelin = JSON.parse(
                fs.readFileSync(`./database/func/afk/afk-@${nmrdnofc1}.json`)
              );
              txt = `Olá, o meu proprietário "${NickDono}" se encontra ausente no momento.\n↺Desde do Horário: ${tabelin.Ausente_Desde}\n\n☇ Mensagem de Ausência: ${tabelin.Motivo_Da_Ausência}`;
              miwa.sendMessage(from, { text: txt }, { quoted: info });
            }
          }

          if (
            isGroup &&
            dataGp[0].ausentes?.length > 0 &&
            menc_jid2?.length > 0 &&
            JSON.stringify(dataGp[0].ausentes).includes(menc_jid2)
          ) {
            blue = [];
            for (i of menc_jid2) {
              if (groupAdmins.indexOf(String(i)) != -1)
                blue.push(groupAdmins.indexOf(String(i)));
            }
            if (blue.length == 0) return;
            big = [];
            for (i of blue) {
              big.push(groupAdmins[i]);
            }
            blr = [];
            for (i = 0; i < big.length; i++) {
              blr.push(
                dataGp[0].ausentes[
                  dataGp[0].ausentes.map((i) => i.id).indexOf(big[i])
                ]
              );
            }
            for (i of blr) {
              var blak = i;
            }
            mention(
              `*Registro de Ausência* - O adminstrador "@${
                blak.id.split("@")[0]
              }" se encontra *ausente* nesse momento.\n\n☇ Mensagem: ${
                blak.msg
              }`
            );
          }

          if (isBotGroupAdmins && isGroupAdmins && body === "apaga") {
            if (!menc_prt) return;
            miwa.sendMessage(from, {
              delete: {
                remoteJid: from,
                fromMe: false,
                id: info.message.extendedTextMessage.contextInfo.stanzaId,
                participant: menc_prt,
              },
            });
          }

          if (
            (SoDono && budy.includes("reiniciar-miwa")) ||
            (info.key.fromMe && budy.includes("reiniciar-miwa"))
          ) {
            fs.writeFileSync("./cnt-upd.json", JSON.stringify([], null, 2));
            setTimeout(() => {
              file = require.resolve("./connect.js");
              delete require.cache[file];
              require(file);
            }, 500);
            setTimeout(() => {
              DLT_FL("./cnt-upd.json");
            }, 1500);
          }

          //========================================\\

          if (isGroup && isCmd && So_Adm && !SoDono && !isGroupAdmins) return;

          if (isBotoff && !SoDono) return;

          //=======================================\\

          const animetion = JSON.parse(
            fs.readFileSync("./arquivos/jogos/animetion.json")
          );

          const sendStickerFromUrl = async (to, url) => {
            try {
              var names = Date.now() / 10000;
              var download = function (uri, filename, callback) {
                request.head(uri, function (err, res, body) {
                  request(uri)
                    .pipe(fs.createWriteStream(filename))
                    .on("close", callback);
                });
              };
              download(url, "./sticker" + names + ".png", async function () {
                console.log("Enviando sticker..");
                let filess = "./sticker" + names + ".png";
                let asw = "./sticker" + names + ".webp";
                exec(
                  `ffmpeg -i ${filess} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 800:800 ${asw}`,
                  (err) => {
                    let media = fs.readFileSync(asw);
                    miwa
                      .sendMessage(
                        to,
                        { sticker: media },
                        {
                          sendEphemeral: true,
                          contextInfo: {
                            forwardingScore: 50,
                            isForwarded: true,
                          },
                          quoted: info,
                        }
                      )
                      .catch((e) => {
                        return reply("Erro..");
                      });
                    DLT_FL(filess);
                    DLT_FL(asw);
                  }
                );
              });
            } catch {
              return reply("Erro.. FNC");
            }
          };

          //=========(isQuoted/consts)=============\\
          const isImage = type == "imageMessage";
          const isVideo = type == "videoMessage";
          const isVisuU2 = type == "viewOnceMessageV2";
          const isAudio = type == "audioMessage";
          const isSticker = type == "stickerMessage";
          const isContact = type == "contactMessage";
          const isLocation = type == "locationMessage";
          const isProduct = type == "productMessage";
          const isMedia =
            type === "imageMessage" ||
            type === "videoMessage" ||
            type === "audioMessage" ||
            type == "viewOnceMessage" ||
            type == "viewOnceMessageV2";
          typeMessage = body.substr(0, 50).replace(/\n/g, "");
          if (isImage) typeMessage = "Image";
          else if (isVideo) typeMessage = "Video";
          else if (isAudio) typeMessage = "Audio";
          else if (isSticker) typeMessage = "Sticker";
          else if (isContact) typeMessage = "Contact";
          else if (isLocation) typeMessage = "Location";
          else if (isProduct) typeMessage = "Product";

          const isQuotedMsg =
            type === "extendedTextMessage" && content.includes("conversation");

          const isQuotedMsg2 =
            type === "extendedTextMessage" && content.includes("text");

          const isQuotedImage =
            type === "extendedTextMessage" && content.includes("imageMessage");

          const isQuotedVisuU =
            type === "extendedTextMessage" &&
            content.includes("viewOnceMessage");

          const isQuotedVisuU2 =
            type === "extendedTextMessage" &&
            content.includes("viewOnceMessageV2");

          const isQuotedVideo =
            type === "extendedTextMessage" && content.includes("videoMessage");

          const isQuotedDocument =
            type === "extendedTextMessage" &&
            content.includes("documentMessage");

          const isQuotedDocW =
            type === "extendedTextMessage" &&
            content.includes("documentWithCaptionMessage");

          const isQuotedAudio =
            type === "extendedTextMessage" && content.includes("audioMessage");

          const isQuotedSticker =
            type === "extendedTextMessage" &&
            content.includes("stickerMessage");

          const isQuotedContact =
            type === "extendedTextMessage" &&
            content.includes("contactMessage");

          const isQuotedLocation =
            type === "extendedTextMessage" &&
            content.includes("locationMessage");

          const isQuotedProduct =
            type === "extendedTextMessage" &&
            content.includes("productMessage");

          //////BLOCK CMD///////
          //(CREDITOS AO KAUAN GAY)\\
          if (isGroup) {
            const checar = getComandos(from);
            if (checar === undefined) addComandosId(from);
          }
          if (
            isGroup &&
            isCmd &&
            !SoDono &&
            !isnit &&
            getComandoBlock(from).includes(command)
          )
            return reply("comando blockeado");

          ////FIMMMMMMMMM/////

          const { color, bgcolor } = require("./arquivos/js/color");
          const tipoMensagem =
            type == "audioMessage"
              ? "Áudio"
              : type == "stickerMessage"
              ? "Figurinha"
              : type == "imageMessage"
              ? "Imagem"
              : type == "videoMessage"
              ? "Vídeo"
              : type == "documentMessage"
              ? "Documento"
              : type == "contactMessage"
              ? "Contato"
              : type == "locationMessage"
              ? "Localização"
                ? "Enquete"
                : "pollCreationMessage"
              : "Mensagem";
          const date = moment.tz("America/Sao_Paulo").format("DD/MM/YY");
          const time = moment.tz("America/Sao_Paulo").format("HH:mm:ss");
          const hora = moment.tz("America/Sao_Paulo").format("HH:mm:ss");
          const dataa = moment.tz("America/Sao_Paulo").format("DD/MM/YY");
          consoleEmoji = "• ";

          // { COMANDOS NO PV }
          if (!isGroup && isCmd)
            console.log(
              color(` ❯❯ 𝐌𝐈𝐖𝐀 𝐁𝐎𝐓 𝐎𝐅𝐈𝐂𝐈𝐀𝐋 ❮❮`, "cyan"),
              "\n\n",
              color("• PV:", "red"),
              color(groupName, "white"),
              "\n",
              color("• NOME:", "red"),
              color(pushname, "white"),
              "\n",
              color("• COMANDO", "red"),
              color(command, "white"),
              "\n",
              color("• HORA :", "red"),
              color(hora, "white"),
              "\n",
              color("• DATA :", "red"),
              color(dataa, "white"),
              "\n"
            );

          // { MENSAGENS NO PV}
          if (!isCmd && !isGroup)
            console.log(
              color(` ❯❯ 𝐌𝐈𝐖𝐀 𝐁𝐎𝐓 𝐎𝐅𝐈𝐂𝐈𝐀𝐋 ❮❮`, "cyan"),
              "\n",
              color("• PV:", "red"),
              color(groupName, "white"),
              "\n",
              color("• NOME:", "red"),
              color(pushname, "white"),
              "\n",
              color("• MENSAGEM", "red"),
              color(budy, "white"),
              "\n",
              color("• TIPO", "red"),
              color(tipoMensagem, "white"),
              "\n",
              color("• HORA :", "red"),
              color(hora, "white"),
              "\n",
              color("• DATA :", "red"),
              color(dataa, "white"),
              "\n"
            );

          // { COMANDOS EM GRUPO}
          if (isCmd && isGroup)
            console.log(
              color(` ❯❯ 𝐌𝐈𝐖𝐀 𝐁𝐎𝐓 𝐎𝐅𝐈𝐂𝐈𝐀𝐋 ❮❮`, "cyan"),
              "\n",
              color("• GRUPO:", "red"),
              color(groupName, "white"),
              "\n",
              color("• NOME:", "red"),
              color(pushname, "white"),
              "\n",
              color("• COMANDO", "red"),
              color(command, "white"),
              "\n",
              color("• HORA :", "red"),
              color(hora, "white"),
              "\n",
              color("• DATA :", "red"),
              color(dataa, "white"),
              "\n"
            );

          // { MENSAGENS EM GRUPOS }
          if (!isCmd && isGroup)
            console.log(
              color(` ❯❯ 𝐌𝐈𝐖𝐀 𝐁𝐎𝐓 𝐎𝐅𝐈𝐂𝐈𝐀𝐋 ❮❮`, "cyan"),
              "\n",
              color("• GRUPO:", "red"),
              color(groupName, "white"),
              "\n",
              color("• NOME:", "red"),
              color(pushname, "white"),
              "\n",
              color("• MENSAGEM", "red"),
              color(budy, "white"),
              "\n",
              color("• TIPO", "red"),
              color(tipoMensagem, "white"),
              "\n",
              color("• HORA :", "red"),
              color(hora, "white"),
              "\n",
              color("• DATA :", "red"),
              color(dataa, "white"),
              "\n"
            );

          // ========= || PlayList Configs || ======== \\

          const loadUserPlaylist = (userId) => {
            try {
              const playlistsFolderPath = "./funções_rpg/playlists";
              if (!fs.existsSync(playlistsFolderPath)) {
                fs.mkdirSync(playlistsFolderPath, { recursive: true });
              }
              const userPlaylistPath = `${playlistsFolderPath}/${userId}.json`;
              if (!fs.existsSync(userPlaylistPath)) {
                fs.writeFileSync(userPlaylistPath, "[]");
              }
              return JSON.parse(fs.readFileSync(userPlaylistPath));
            } catch (err) {
              console.error(err);
              return [];
            }
          };

          // Função para salvar a playlist de um usuário no arquivo JSON
          const saveUserPlaylist = (userId, playlist) => {
            const userPlaylistPath = `./funções_rpg/playlists/${userId}.json`;
            fs.writeFileSync(
              userPlaylistPath,
              JSON.stringify(playlist, null, 2)
            ); //ryuu
          };

          // Adicionar uma música à playlist de um usuário
          const addSongToPlaylist = (userId, songName) => {
            const playlist = loadUserPlaylist(userId);
            if (!playlist.some((song) => song.name === songName)) {
              //Akiyamax
              playlist.push({ name: songName });
              saveUserPlaylist(userId, playlist);
              return `Adicionado ${songName} à sua playlist!`;
            } else {
              return `${songName} já está na sua playlist.`;
            }
          };

          // Remover uma música da playlist de um usuário
          const removeSongFromPlaylist = (userId, songName) => {
            //ryuu franky
            const playlist = loadUserPlaylist(userId);
            const index = playlist.findIndex((song) => song.name === songName);
            if (index !== -1) {
              playlist.splice(index, 1);
              saveUserPlaylist(userId, playlist);
              return `Removido ${songName} da sua playlist!`;
            } else {
              return "Música não encontrada na sua playlist.";
            }
          };

          // Limpar a playlist de um usuário
          const clearUserPlaylist = (userId) => {
            saveUserPlaylist(userId, []);
            return "Sua playlist foi limpa!"; //ryuu
          };

          // Reproduzir a playlist de um usuário
          const playUserPlaylist = (userId) => {
            const playlist = loadUserPlaylist(userId);
            if (playlist.length === 0) {
              return "Sua playlist está vazia.";
            }
            let playlistText = "🎵 Sua Playlist 🎵\n";
            playlist.forEach((song, index) => {
              playlistText += `${index + 1}. ${song.name}\n`; //ryuu
            });
            return playlistText;
          };

          // Compartilhar a playlist de um usuário com outro
          const shareUserPlaylist = (fromUserId, toUserId) => {
            const fromUserPlaylist = loadUserPlaylist(fromUserId);
            const toUserPlaylist = loadUserPlaylist(toUserId);

            const mergedPlaylist = [
              ...toUserPlaylist,
              ...fromUserPlaylist.filter(
                (song) => !toUserPlaylist.some((s) => s.name === song.name)
              ),
            ];
            saveUserPlaylist(toUserId, mergedPlaylist);

            return `Playlist compartilhada com sucesso com o usuário ${toUserId}!`;
          };

          const fotoryuu = async (
            jid,
            mediaUrl,
            caption,
            mentions = [],
            quoted
          ) => {
            if (!jid) throw new Error("Precisa do JID");
            if (typeof jid !== "string")
              throw new TypeError("JID tem que ser uma string");
            if (typeof mediaUrl !== "string")
              throw new TypeError("mediaUrl tem que ser uma string");
            if (typeof caption !== "string")
              throw new TypeError("caption tem que ser uma string");

            const message = {
              image: { url: mediaUrl },
              caption: caption,
              mentions: mentions,
              quoted: quoted ? { ...quoted } : undefined,
            };

            await miwa.sendMessage(jid, message);
          };

          // ========= || Jogo da Velha || ======== \\
          async function joguinhodavelha() {
            if (
              joguinhodavelhajs2.includes(from) ||
              joguinhodavelhajs.includes(sender)
            ) {
              const cmde = budy.toLowerCase().split(" ")[0] || "";
              let arrNum = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
              if (fs.existsSync(`./arquivos/tictactoe/db/${from}.json`)) {
                const boardnow = setGame(`${from}`);
                if (budy == "Cex") return reply("why");
                if (
                  budy.toLowerCase() == "s" ||
                  budy.toLowerCase() == "sim" ||
                  budy.toLowerCase() == "ok"
                ) {
                  if (boardnow.O == sender.replace("@s.whatsapp.net", "")) {
                    if (boardnow.status)
                      return reply(`O jogo já começou antes!`);
                    const matrix = boardnow._matrix;
                    boardnow.status = true;
                    fs.writeFileSync(
                      `./arquivos/tictactoe/db/${from}.json`,
                      JSON.stringify(boardnow, null, 2)
                    );
                    const chatAccept = `*🎮Ꮐ̸Ꭺ̸Ꮇ̸Ꭼ̸ Ꭰ̸Ꭺ̸ Ꮩ̸Ꭼ̸Ꮮ̸Ꮋ̸Ꭺ̸🕹️*
                    
❌ : @${boardnow.X}
⭕ : @${boardnow.O}
               
Sua vez... : @${boardnow.turn == "X" ? boardnow.X : boardnow.O}

${matrix[0][0]}  ${matrix[0][1]}  ${matrix[0][2]}
${matrix[1][0]}  ${matrix[1][1]}  ${matrix[1][2]}
${matrix[2][0]}  ${matrix[2][1]}  ${matrix[2][2]}
`;
                    mention(chatAccept);
                  }
                } else if (
                  budy.toLowerCase() == "n" ||
                  budy.toLowerCase() == "não" ||
                  budy.toLowerCase() == "no"
                ) {
                  if (boardnow.O == sender.replace("@s.whatsapp.net", "")) {
                    if (boardnow.status) return reply(`O jogo já começou!`);
                    DLT_FL(`./arquivos/tictactoe/db/${from}.json`);
                    mention(
                      `@${boardnow.X} *_Infelizmente seu oponente não aceitou o desafio ❌😕_*`
                    );
                    joguinhodavelhajs.splice([]);
                    fs.writeFileSync(
                      "./database/usuarios/joguinhodavelha.json",
                      JSON.stringify(joguinhodavelhajs)
                    );
                    joguinhodavelhajs2.splice([]);
                    fs.writeFileSync(
                      "./database/usuarios/joguinhodavelha2.json",
                      JSON.stringify(joguinhodavelhajs2)
                    );
                  }
                }
              }

              if (arrNum.includes(cmde)) {
                const boardnow = setGame(`${from}`);
                if (!boardnow.status)
                  return reply(
                    `Parece que seu oponente não aceitou o desafio ainda...`
                  );
                if (
                  (boardnow.turn == "X" ? boardnow.X : boardnow.O) !=
                  sender.replace("@s.whatsapp.net", "")
                )
                  return;
                const moving = validmove(Number(budy), `${from}`);
                const matrix = moving._matrix;
                if (moving.isWin) {
                  if (moving.winner == "SERI") {
                    const chatEqual = `*🎮Ꮐ̸Ꭺ̸Ꮇ̸Ꭼ̸ Ꭰ̸Ꭺ̸ Ꮩ̸Ꭼ̸Ꮮ̸Ꮋ̸Ꭺ̸🕹️*
          
Jogo da velha termina empatado 😐
`;
                    reply(chatEqual);
                    DLT_FL(`./arquivos/tictactoe/db/${from}.json`);
                    joguinhodavelhajs.splice([]);
                    fs.writeFileSync(
                      "./database/usuarios/joguinhodavelha.json",
                      JSON.stringify(joguinhodavelhajs)
                    );
                    joguinhodavelhajs2.splice([]);
                    fs.writeFileSync(
                      "./database/usuarios/joguinhodavelha2.json",
                      JSON.stringify(joguinhodavelhajs2)
                    );
                    return;
                  }
                  const abt = Math.ceil(Math.random() + 4000);
                  const winnerJID = moving.winner == "O" ? moving.O : moving.X;
                  const looseJID = moving.winner == "O" ? moving.X : moving.O;
                  const limWin = Math.floor(Math.random() * 1) + 10;
                  const limLoose = Math.floor(Math.random() * 1) + 5;
                  const chatWon = `*🎮Ꮐ̸Ꭺ̸Ꮇ̸Ꭼ̸ Ꭰ̸Ꭺ̸ Ꮩ̸Ꭼ̸Ꮮ̸Ꮋ̸Ꭺ̸🕹️*

O jogo da velha foi vencido pelo usuário: @${winnerJID}..`;

                  miwa.sendMessage(
                    from,
                    { text: chatWon },
                    {
                      quoted: info,
                      mentions: [
                        moving.winner == "O"
                          ? moving.O + "@s.whatsapp.net"
                          : moving.X + "@s.whatsapp.net",
                      ],
                    }
                  );
                  setTimeout(() => {
                    if (
                      fs.existsSync("./arquivos/tictactoe/db/" + from + ".json")
                    ) {
                      DLT_FL("./arquivos/tictactoe/db/" + from + ".json");
                      reply(`*🕹️JOGO DA VELHA RESETADO...🕹️*`);
                    } else {
                      console.log(
                        colors.red(time, "red"),
                        colors.magenta("[ EXPIRADO ]"),
                        colors.red("Jogo da velha espirado..")
                      );
                    }
                    joguinhodavelhajs.splice([]);
                    fs.writeFileSync(
                      "./database/usuarios/joguinhodavelha.json",
                      JSON.stringify(joguinhodavelhajs)
                    );
                    joguinhodavelhajs2.splice([]);
                    fs.writeFileSync(
                      "./database/usuarios/joguinhodavelha2.json",
                      JSON.stringify(joguinhodavelhajs2)
                    );
                  }, 300000); //5 minutos
                  reply(
                    `Parabéns @${winnerJID} você ganhou o jogo da velha... 🥳\nParabéns aos ambos jogadores, vocês foram bem, perder não é o fim, perder faz parte da vida.. Não desista!`
                  );
                  DLT_FL(`./arquivos/tictactoe/db/${from}.json`);
                  joguinhodavelhajs.splice([]);
                  fs.writeFileSync(
                    "./database/usuarios/joguinhodavelha.json",
                    JSON.stringify(joguinhodavelhajs)
                  );
                  joguinhodavelhajs2.splice([]);
                  fs.writeFileSync(
                    "./database/usuarios/joguinhodavelha2.json",
                    JSON.stringify(joguinhodavelhajs2)
                  );
                } else {
                  const chatMove = `*🎮Ꮐ̸Ꭺ̸Ꮇ̸Ꭼ̸ Ꭰ̸Ꭺ̸ Ꮩ̸Ꭼ̸Ꮮ̸Ꮋ̸Ꭺ̸🕹️*
          
❌ : @${moving.X}
⭕ : @${moving.O}

Sua vez : @${moving.turn == "X" ? moving.X : moving.O}

${matrix[0][0]}  ${matrix[0][1]}  ${matrix[0][2]}
${matrix[1][0]}  ${matrix[1][1]}  ${matrix[1][2]}
${matrix[2][0]}  ${matrix[2][1]}  ${matrix[2][2]}
`;
                  mention(chatMove);
                }
              }
            }
          }

          // ==========[ ANAGRAMA ]==========\\

          if (
            isGroup &&
            fs.existsSync(`./arquivos/games/anagrama/${from}.json`)
          ) {
            let dataAnagrama = JSON.parse(
              fs.readFileSync(`./arquivos/games/anagrama/${from}.json`)
            );
            if (
              budy.slice(0, 4).toUpperCase() ==
                dataAnagrama.original.slice(0, 4).toUpperCase() &&
              budy.toUpperCase() != dataAnagrama.original
            )
              return reply("está perto");
            if (budy.toUpperCase() == dataAnagrama.original) {
              miwa.sendMessage(
                from,
                {
                  text: `*Parabéns ${pushname}. Você acertou! 🥳🥳*\n*Palavra original:* ${dataAnagrama.original}\n*Iniciando o proximo jogo em 5 segundos...*`,
                },
                { mentionedJid: [sender] }
              ),
                fs.unlinkSync(`./arquivos/games/anagrama/${from}.json`);
              setTimeout(async () => {
                fs.writeFileSync(
                  `./arquivos/games/anagrama/${from}.json`,
                  `${JSON.stringify(
                    palavrasANA[Math.floor(Math.random() * palavrasANA.length)]
                  )}`
                );
                let dataAnagrama2 = JSON.parse(
                  fs.readFileSync(`./arquivos/games/anagrama/${from}.json`)
                );
                miwa.sendMessage(from, {
                  text: `╭━━ ⪩ 「 Descubra a palavra 」
▢ ⌁ ⚠︎ Anagrama: ${dataAnagrama2.embaralhada}
▢ ⌁ ⚠︎ Dica: ${dataAnagrama2.dica}
╰━━━ ⪨ 「 ${NomeDoBot} 」
`,
                });
              }, 5000);
            }
          }

          if (
            isGroup &&
            fs.existsSync(`./arquivos/games/quiz-animais/${from}.json`)
          ) {
            let dataAnagramaa = JSON.parse(
              fs.readFileSync(`./arquivos/games/quiz-animais/${from}.json`)
            );
            if (
              budy.slice(0, 4).toUpperCase() ==
                dataAnagramaa.original.slice(0, 4).toUpperCase() &&
              budy.toUpperCase() != dataAnagramaa.original
            )
              return reply("está perto");
            if (budy.toUpperCase() == dataAnagramaa.original) {
              miwa.sendMessage(
                from,
                {
                  text: `*Parabéns ${pushname}. Você acertou! 🥳🥳*\n*Nome do Animal:* ${dataAnagramaa.original}\n*Iniciando o proximo jogo em 5 segundos...*`,
                },
                { mentionedJid: [sender] }
              ),
                fs.unlinkSync(`./arquivos/games/quiz-animais/${from}.json`);
              setTimeout(async () => {
                fs.writeFileSync(
                  `./arquivos/games/quiz-animais/${from}.json`,
                  `${JSON.stringify(
                    quizanimais[Math.floor(Math.random() * quizanimais.length)]
                  )}`
                );
                let dataAnagrama2 = JSON.parse(
                  fs.readFileSync(`./arquivos/games/quiz-animais/${from}.json`)
                );
                imagemtexto = `╭━━ ⪩ 「 Descubra o animal 」
▢ ⌁ ⚠︎ Jogador: ${pushname}
╰━━━ ⪨ 「 ${NomeDoBot} 」`;
                wew = await getBuffer(`${dataAnagrama2.foto}`);
                await miwa.sendMessage(
                  from,
                  { image: wew, caption: imagemtexto, thumbnail: wew },
                  { quoted: selo }
                );
              }, 5000);
            }
          }

          //=================================\\

          function contar(frase, letraProcurada) {
            var total = 0;
            [...frase].forEach((letra) => {
              if (letra === letraProcurada) total++;
            });
            return total;
          }

          joguinhodavelha();

          if (isAntilinkgp && isGroup && isBotGroupAdmins && !isGroupAdmins) {
            if (Procurar_String.includes("chat.whatsapp.com/")) {
              if (isBot) return;
              link_dgp = await miwa.groupInviteCode(from);
              if (Procurar_String.match(link_dgp))
                return reply("Link do nosso grupo, não irei remover.. ");
              if (IS_DELETE) {
                setTimeout(() => {
                  miwa.sendMessage(from, {
                    delete: {
                      remoteJid: from,
                      fromMe: false,
                      id: info.key.id,
                      participant: sender,
                    },
                  });
                }, 500);
              }
              if (!JSON.stringify(groupMembers).includes(sender)) return;
              miwa.groupParticipantsUpdate(from, [sender], "remove");
            }
          }

          const groupIdscount = [];
          for (let obj of countMessage) {
            groupIdscount.push(obj.groupId);
          }

          // BOTÕES
          var sendBtext = async (id, text1, desc1, but = [], vr) => {
            buttonMessagse = {
              text: text1,
              footer: desc1,
              buttons: but,
              headerType: 1,
            };
            miwa.sendMessage(id, buttonMessagse, { quoted: vr });
          };

          // MUTAR USUÁRIO
          const GroupsMutedActived = [];
          for (let obj of muted) {
            GroupsMutedActived.push(obj.jid);
          }
          const isMuted =
            isGroup && GroupsMutedActived.indexOf(from) >= 0 ? true : false;
          const NumbersMuted = isMuted
            ? muted[GroupsMutedActived.indexOf(from)].numbers
            : [];
          if (isMuted && NumbersMuted.indexOf(sender) >= 0) {
            reply(
              `🐤😡 *Você deu um piu?* - Agora prepare-se para o seu julgamento!`
            );
            setTimeout(async () => {
              miwa.groupParticipantsUpdate(from, [sender], "remove");
            }, 1000);
            return;
          }

          //========(CONTADOR-DE-MENSAGENS)========\\
          var numbersIds = [];
          if (isGroup && groupIdscount.indexOf(from) >= 0) {
            var ind = groupIdscount.indexOf(from);
            for (let obj of countMessage[ind].numbers) {
              numbersIds.push(obj.id);
            }
            if (numbersIds.indexOf(sender) >= 0) {
              var indnum = numbersIds.indexOf(sender);
              var RSM_CN = countMessage[ind].numbers[indnum];
              type == "stickerMessage"
                ? ""
                : (RSM_CN.messages += isCmd ? 0 : 1);
              type == "stickerMessage"
                ? ""
                : (RSM_CN.cmd_messages += isCmd ? 1 : 0);
              type == "stickerMessage" ? "" : (RSM_CN.aparelho = adivinha);
              RSM_CN.figus += type == "stickerMessage" ? 1 : 0;
              fs.writeFileSync(
                "./settings/media/countmsg.json",
                JSON.stringify(countMessage, null, 2) + "\n"
              );
            } else {
              const messages = isCmd ? 0 : 1;
              const cmd_messages = isCmd ? 1 : 0;
              var figus = type == "stickerMessage" ? 1 : 0;
              countMessage[ind].numbers.push({
                id: sender,
                messages: messages,
                cmd_messages: cmd_messages,
                aparelho: adivinha,
                figus: figus,
              });
              fs.writeFileSync(
                "./settings/media/countmsg.json",
                JSON.stringify(countMessage, null, 2) + "\n"
              );
            }
          } else if (isGroup) {
            countMessage.push({
              groupId: from,
              numbers: [
                {
                  id: sender,
                  messages: 2,
                  figus: 0,
                  cmd_messages: isCmd ? 1 : 0,
                  aparelho: adivinha,
                },
              ],
            });
            fs.writeFileSync(
              "./settings/media/countmsg.json",
              JSON.stringify(countMessage, null, 2) + "\n"
            );
          }

          const pickRandom = (arr) => {
            return arr[Math.floor(Math.random() * arr.length)];
          };

          let saldo = JSON.parse(
            fs.readFileSync("./funções_rpg/dinheiro/dindin.json")
          );

          const AdicionarUser = (sender) => {
            const obj = { id: sender, saldo: 1 };
            saldo.push(obj);
            fs.writeFileSync(
              "./funções_rpg/dinheiro/dindin.json",
              JSON.stringify(saldo)
            );
          };

          const AdicionarSaldo = (sender, amount) => {
            let position = false;
            Object.keys(saldo).forEach((i) => {
              if (saldo[i].id === sender) {
                position = i;
              }
            });
            if (position !== false) {
              saldo[position].saldo += amount;
              fs.writeFileSync(
                "./funções_rpg/dinheiro/dindin.json",
                JSON.stringify(saldo)
              );
            }
          };

          const VerSaldo = (sender) => {
            let position = false;
            Object.keys(saldo).forEach((i) => {
              if (saldo[i].id === sender) {
                position = i;
              }
            });
            if (position !== false) {
              return saldo[position].saldo;
            }
          };

          const ConfirmarPagamento = (sender, amount) => {
            let position = false;
            Object.keys(saldo).forEach((i) => {
              if (saldo[i].id === sender) {
                position = i;
              }
            });
            if (position !== false) {
              saldo[position].saldo -= amount;
              fs.writeFileSync(
                "./funções_rpg/dinheiro/dindin.json",
                JSON.stringify(saldo)
              );
            }
          };

          const saldoAddRegistro = VerSaldo(sender);
          try {
            if (saldoAddRegistro === undefined) AdicionarUser(sender);
            valor = 0;
            AdicionarSaldo(sender, valor);
          } catch (err) {
            console.error(err);
          }

          //============(EVAL-EXECUÇÕES)===========\\

          if (budy.startsWith(">")) {
            try {
              if (info.key.fromMe) return;
              if (
                !SoDono &&
                !isnit &&
                !issupre &&
                !ischyt &&
                !issupre &&
                !ischyt
              )
                return;
              console.log(
                "[",
                colors.cyan("EVAL"),
                "]",
                colors.yellow(
                  moment(info.messageTimestamp * 1000).format("DD/MM HH:mm:ss")
                ),
                colors.green(budy)
              );
              return miwa
                .sendMessage(from, {
                  text: JSON.stringify(eval(budy.slice(2)), null, "\t"),
                })
                .catch((e) => {
                  return reply(String(e));
                });
            } catch (e) {
              return reply(String(e));
            }
          }

          if (budy.startsWith("(>")) {
            try {
              if (info.key.fromMe) return;
              if (
                !SoDono &&
                !isnit &&
                !issupre &&
                !ischyt &&
                !issupre &&
                !ischyt
              )
                return;
              var konsol = budy.slice(3);
              Return = (sul) => {
                var sat = JSON.stringify(sul, null, 2);
                bang = util.format(sat);
                if (sat == undefined) {
                  bang = util.format(sul);
                }
                return miwa.sendMessage(from, { text: bang }, { quoted: info });
              };

              miwa
                .sendMessage(from, {
                  text: util.format(eval(`;(async () => { ${konsol} })()`)),
                })
                .catch((e) => {
                  return reply(String(e));
                });
              console.log(
                "\x1b[1;37m>",
                "[",
                "\x1b[1;32mEXEC\x1b[1;37m",
                "]",
                time,
                colors.green(">"),
                "from",
                colors.green(sender.split("@")[0]),
                "args :",
                colors.green(args.length)
              );
            } catch (e) {
              return reply(String(e));
              console.log(e);
            }
          }

          if (body.startsWith("$")) {
            if (info.key.fromMe) return;
            if (!SoDono && !isnit) return;
            exec(q, (err, stdout) => {
              if (err) return reply(`${err}`);
              if (stdout) {
                reply(stdout);
              }
            });
          }

          //======================================\\

          const uploader = require("./arquivos/funcoes/upload.js");

          //======(ANTI-IMAGEM)========\\
          if (isAntiImg && isBotGroupAdmins && type == "imageMessage") {
            if (info.key.fromMe) return;
            if (isGroupAdmins)
              return miwa.sendMessage(
                from,
                {
                  text: "Mensagem proibida detectada, porém é admin logo a punição será anulada.",
                },
                { quoted: info }
              );
            if (dataGp[0].legenda_imagem != "0") {
              miwa.sendMessage(
                from,
                { text: dataGp[0].legenda_imagem },
                { quoted: info }
              );
            }
            if (IS_DELETE) {
              setTimeout(() => {
                miwa.sendMessage(from, {
                  delete: {
                    remoteJid: from,
                    fromMe: false,
                    id: info.key.id,
                    participant: sender,
                  },
                });
              }, 500);
            }
            if (!JSON.stringify(groupMembers).includes(sender)) return;
            miwa.groupParticipantsUpdate(from, [sender], "remove");
          }

          //======(ANTI-STICKER)========\\
          if (isAntiSticker && isBotGroupAdmins && type == "stickerMessage") {
            if (info.key.fromMe) return;
            if (isGroupAdmins)
              return miwa.sendMessage(
                from,
                {
                  text: "Mensagem proibida detectada, porém é admin logo a punição será anulada.",
                },
                { quoted: info }
              );
            miwa.sendMessage(
              from,
              { text: "Mensagem proibida detectada, banindo o infrator..." },
              { quoted: info }
            );
            if (IS_DELETE) {
              setTimeout(() => {
                miwa.sendMessage(from, {
                  delete: {
                    remoteJid: from,
                    fromMe: false,
                    id: info.key.id,
                    participant: sender,
                  },
                });
              }, 500);
            }
            if (!JSON.stringify(groupMembers).includes(sender)) return;
            miwa.groupParticipantsUpdate(from, [sender], "remove");
          }

          if (Antidoc && isBotGroupAdmins && type == "documentMessage") {
            if (info.key.fromMe) return;
            if (isGroupAdmins)
              return miwa.sendMessage(
                from,
                {
                  text: "Mensagem proibida detectada, porém é admin logo a punição será anulada.",
                },
                { quoted: info }
              );
            if (dataGp[0].legenda_documento != "0") {
              miwa.sendMessage(
                from,
                { text: dataGp[0].legenda_documento },
                { quoted: info }
              );
            }
            if (IS_DELETE) {
              setTimeout(() => {
                miwa.sendMessage(from, {
                  delete: {
                    remoteJid: from,
                    fromMe: false,
                    id: info.key.id,
                    participant: sender,
                  },
                });
              }, 500);
            }
            if (!JSON.stringify(groupMembers).includes(sender)) return;
            miwa.groupParticipantsUpdate(from, [sender], "remove");
          }

          let isTrueFalse = Array(
            "tiktok",
            "facebook",
            "instagram",
            "twitter",
            "ytmp3",
            "ytmp4",
            "play",
            "play_audio",
            "TikTok",
            "play_video",
            "play"
          ).some((item) => item === command);

          if (
            isUrl(PR_String) &&
            isAntiLinkHard &&
            !isGroupAdmins &&
            isBotGroupAdmins &&
            !info.key.fromMe
          ) {
            if (Procurar_String.includes("chat.whatsapp.com")) {
              link_dgp = await miwa.groupInviteCode(from);
              if (Procurar_String.match(link_dgp))
                return reply("Link do nosso grupo, não irei remover.. ");
            }
            if (isCmd && isTrueFalse) return;
            if (IS_DELETE) {
              setTimeout(() => {
                miwa.sendMessage(from, {
                  delete: {
                    remoteJid: from,
                    fromMe: false,
                    id: info.key.id,
                    participant: sender,
                  },
                });
              }, 500);
            }
            miwa.groupSettingUpdate(from, "announcement");
            setTimeout(() => {
              miwa.groupSettingUpdate(from, "not_announcement");
            }, 1200);
            if (!JSON.stringify(groupMembers).includes(sender)) return;
            miwa.groupParticipantsUpdate(from, [sender], "remove");
          }

          // BEN VINDO

          const welcome = JSON.parse(
            fs.readFileSync("./arquivos/welkon/welkon.json")
          );
          const isWelcome = isGroup ? welcome.includes(from) : false;
          const MisheruModzDev = new Map();
          const nahidadomina = async (num) => {
            //By: MisheruModz
            const neguin = num.participants[0];
            const MisheruModzin = `${num.id}-${neguin}-${num.action}`;
            const now = Date.now();
            if (
              MisheruModzDev.has(MisheruModzin) &&
              now - MisheruModzDev.get(MisheruModzin) < 10000
            ) {
              //By: MisheruModz
              return;
            }
            MisheruModzDev.set(MisheruModzin, now);
            console.log(num);
            if (!welcome.includes(num.id)) return;
            if (num.action === "add") {
              //By: MisheruModz
              if (MisheruModzDev.has(`${num.id}-${neguin}-remove`)) {
                //By: MisheruModz
                MisheruModzDev.delete(`${num.id}-${neguin}-remove`);
              }
              try {
                //By: MisheruModz
                ppimg = await miwa.profilePictureUrl(neguin, "image");
              } catch {
                //By: MisheruModz
                ppimg = "https://telegra.ph/file/1e2610a8029e454c81a65.jpg";
              }
              const pimg = await getBuffer(ppimg);
              const bbn = `「 🌟 Opa vdh @${
                neguin.split("@")[0]
              }! seja Bem-Vindo(a) ao grupo ${groupName} 🌟 」`;
              await miwa.sendMessage(
                num.id,
                { image: pimg, mentions: num.participants, caption: bbn },
                {
                  quoted: {
                    key: { fromMe: false, participant: `${neguin}` },
                    message: { conversation: `Amo o Ets de Vaginas ❤️❤️❤️` },
                  },
                }
              );
            } else if (num.action === "remove") {
              //By: MisheruModz
              if (MisheruModzDev.has(`${num.id}-${neguin}-add`)) {
                //By: MisheruModz
                MisheruModzDev.delete(`${num.id}-${neguin}-add`);
              }
              try {
                //By: MisheruModz
                ppimg = await miwa.profilePictureUrl(neguin, "image");
              } catch {
                //By: MisheruModz
                ppimg = "https://telegra.ph/file/1e2610a8029e454c81a65.jpg";
              }
              const pimg = await getBuffer(ppimg);
              const bbn = `
🌟 「 ❤️ 」 Vaza vdh! @${neguin.split("@")[0]} 🌟`;
              await miwa.sendMessage(
                num.id,
                { image: pimg, mentions: num.participants, caption: bbn },
                {
                  quoted: {
                    key: { fromMe: false, participant: `${neguin}` },
                    message: { conversation: `amo Ets de Vaginas ❤️❤️❤️` },
                  },
                }
              );
            }
          };
          miwa.ev.removeAllListeners("group-participants.update");
          miwa.ev.on("group-participants.update", nahidadomina);

          // ANTI NOTAS FAKES ======================>

          if (
            isAntiNotas &&
            budy2.toString().match(/(💳|💎|💸|💵|💷|💶|🪙|💰|🤑|⚖️)/gi) &&
            isBotGroupAdmins &&
            !isGroupAdmins &&
            !SoDono &&
            !info.message?.reactionMessage?.text &&
            budy2.length > 20
          ) {
            let verificar = budy2
              .toString()
              .match(/(💳|💎|💸|💵|💷|💶|🪙|💰|🤑|⚖️)/gi);
            if (verificar && budy.length < 100) return;
            if (IS_DELETE) {
              setTimeout(() => {
                miwa.sendMessage(from, {
                  delete: {
                    remoteJid: from,
                    fromMe: false,
                    id: info.key.id,
                    participant: sender,
                  },
                });
              }, 500);
            }
            if (!JSON.stringify(groupMembers).includes(sender)) return;
            miwa.groupParticipantsUpdate(from, [sender], "remove");
          }

          //FINALZIN ==============================>

          //======(ANTI-VIDEO)========\\

          if (isAntiVid && isBotGroupAdmins && type == "videoMessage") {
            if (isGroupAdmins)
              return miwa.sendMessage(
                from,
                {
                  text: "Mensagem proibida detectada, porém é admin logo a punição será anulada.",
                },
                { quoted: info }
              );
            if (dataGp[0].legenda_video == "0") {
              miwa.sendMessage(
                from,
                { text: "Mensagem proibida detectada, banindo o infrator..." },
                { quoted: info }
              );
            } else {
              miwa.sendMessage(
                from,
                { text: dataGp[0].legenda_video },
                { quoted: info }
              );
            }
            if (IS_DELETE) {
              setTimeout(() => {
                miwa.sendMessage(from, {
                  delete: {
                    remoteJid: from,
                    fromMe: false,
                    id: info.key.id,
                    participant: sender,
                  },
                });
              }, 500);
            }
            if (!JSON.stringify(groupMembers).includes(sender)) return;
            miwa.groupParticipantsUpdate(from, [sender], "remove");
          }

          //======(ANTI-AUDIO)=======\\
          if (isAntiAudio && isBotGroupAdmins && type == "audioMessage") {
            if (isGroupAdmins)
              return miwa.sendMessage(
                from,
                {
                  text: "Mensagem proibida detectada, porém é admin logo a punição será anulada.",
                },
                { quoted: info }
              );
            miwa.sendMessage(
              from,
              { text: "Mensagem proibida detectada, banindo o infrator..." },
              { quoted: info }
            );
            if (IS_DELETE) {
              setTimeout(() => {
                miwa.sendMessage(from, {
                  delete: {
                    remoteJid: from,
                    fromMe: false,
                    id: info.key.id,
                    participant: sender,
                  },
                });
              }, 500);
            }
            if (!JSON.stringify(groupMembers).includes(sender)) return;
            miwa.groupParticipantsUpdate(from, [sender], "remove");
          }

          //========(ANTI-PV-QUE-BLOQUEIA)======\\

          if (isAntiPv) {
            if (!isGroup && !SoDono && !isnit && !isPremium) {
              await sleep(2500);
              msgpvblock = `./database/func/call/msg_block-${sender}.json`;
              fs.writeFileSync(
                msgpvblock,
                JSON.stringify(
                  "Olá amigo, o *ANTI-PV* está ativo no momento, ou seja, estou recebendo as ordens de bloquear os usuários que entrar em contato comigo no privado.",
                  null,
                  2
                )
              );
              msgmsglbl = JSON.parse(fs.readFileSync(msgpvblock));
              reply(msgmsglbl);
              DLT_FL(msgpvblock);
              setTimeout(async () => {
                miwa.updateBlockStatus(sender, "block");
              }, 2000);
              return;
            }
          }

          const antispam = JSON.parse(
            fs.readFileSync("./settings/media/antispam.json")
          );

          const isAntiSpam = isGroup ? dataGp[0].antispam : undefined;
          //======================================\\

          {
            var hora_ = moment.tz("America/Sao_Paulo").format("HH:mm");
            var hora_2 = moment.tz("America/Sao_Paulo").format("mm");
            for (i of black_) {
              if (i.hora == hora_) {
                var blu_dc = true;
              } else {
                var blu_dc = false;
              }
            }
            if (blu_dc == true) {
              for (i of black_) {
                if (i.hora == hora_) var ik = i;
              }
              for (i of ik?.PUXAR) {
                if (i.avisou == true) return;
                if (i.length == 0) return;
                miwa.sendMessage(i.idgp, { text: i.msg });
                i.avisou = true;
                fs.writeFileSync(
                  "./database/grupos/avisos.json",
                  JSON.stringify(black_, null, 2)
                );
              }
            }
            for (i of black_) {
              if (hora_2 >= i.hora.split(":")[1] + parseInt(1)) {
                var ik2 = i;
                var ik_r = true;
              } else {
                var ik_r = false;
              }
            }
            if (ik_r == true) {
              for (i of ik2.PUXAR) {
                if (i.avisou == true) {
                  i.avisou = false;
                  fs.writeFileSync(
                    "./database/grupos/avisos.json",
                    JSON.stringify(black_, null, 2)
                  );
                }
              }
            }
          }

          //==========(..)============\\

          const largeNumber = (value) => {
            if (Number(value) < 0) return "O número precisa ser ≥ 0";
            nmr = `${Number(value).toFixed(0)}`;
            if (nmr.length >= 4) {
              const existPoint = (nmr) => {
                if (Number(nmr) !== 0) return "." + `${nmr}`;
                return ``;
              };
              if (nmr.length >= 4)
                txt =
                  nmr.slice(0, nmr.length - 3) +
                  existPoint(nmr.slice(nmr.length - 3, nmr.length - 2)) +
                  "K";
              if (nmr.length >= 7)
                txt =
                  nmr.slice(0, nmr.length - 6) +
                  existPoint(nmr.slice(nmr.length - 6, nmr.length - 5)) +
                  "M";
              if (nmr.length >= 10)
                txt =
                  nmr.slice(0, nmr.length - 9) +
                  existPoint(nmr.slice(nmr.length - 9, nmr.length - 8)) +
                  "B";
              if (nmr.length >= 13)
                txt =
                  nmr.slice(0, nmr.length - 12) +
                  existPoint(nmr.slice(nmr.length - 12, nmr.length - 11)) +
                  "T";
            } else {
              txt = nmr;
            }
            return txt;
          };

          //=========(ANTIPV-QUE-SÓ-FALA)==========\\

          if (
            !isGroup &&
            !isPremium &&
            !SoDono &&
            !isnit &&
            !issupre &&
            !ischyt &&
            !info.key.fromMe &&
            isAntiPv2
          )
            return reply(
              `Olá, sou uma inteligência artificial, programado(a) para realizar ações, por adms e o dono, se você está enviando mensagem, provavelmente você não sabe disso, eu removo diariamente pessoas por enviar links e muito mais..`
            );

          //======================================\\

          const API_KEY_MIWA = "luskizera";

          // ANTI_LIGAR \\

          if (!isGroup && isAnticall) {
            miwa.ws.on("CB:call", async (B) => {
              var msgcallblock = `./database/func/call/msg_block-${sender}.json`;
              if (!fs.existsSync(msgcallblock)) {
                fs.writeFileSync(
                  msgcallblock,
                  JSON.stringify(
                    "Olá amigo, o *ANTI-CALL* está ativo no momento, ou seja, estou recebendo as ordens de bloquear aqueles que efetuarem ligações para mim.",
                    null,
                    2
                  )
                );
                var msgcallbl = JSON.parse(fs.readFileSync(msgcallblock));
                if (B.content[0].tag == "offer") {
                  miwa
                    .sendMessage(B.content[0].attrs["call-creator"], {
                      text: msgcallbl,
                    })
                    .then(() => {
                      miwa.updateBlockStatus(
                        B.content[0].attrs["call-creator"],
                        "block"
                      );
                      DLT_FL(msgcallblock);
                    });
                }
              }
            });
          }

          //======================================\\
          var i9 = countMessage.map((i) => i.groupId).indexOf(from);
          var idgrupo = groupIdscount.indexOf(from);

          var idusu = numbersIds?.indexOf(sender);

          if (
            isGroup &&
            JSON.stringify(countMessage).includes(from) &&
            JSON.stringify(countMessage[i9]).includes(sender)
          ) {
            try {
              var qnt_msg = countMessage[idgrupo].numbers[idusu].messages;
            } catch {
              var qnt_msg = 0;
            }

            var patente = "Aspirante";

            var level_up = 0;

            if (qnt_msg >= 0 && qnt_msg < 20) {
              var patente = "Aspirante";
              var level_up = 0;
            }
            if (qnt_msg >= 20 && qnt_msg < 50) {
              var patente = "Recruta";
              var level_up = 1;
            }
            if (qnt_msg >= 50 && qnt_msg < 100) {
              var patente = "Soldado";
              var level_up = 2;
            }
            if (qnt_msg >= 100 && qnt_msg < 200) {
              var patente = "Cabo";
              var level_up = 3;
            }
            if (qnt_msg >= 200 && qnt_msg < 300) {
              var patente = "Sargento";
              var level_up = 4;
            }
            if (qnt_msg >= 300 && qnt_msg < 400) {
              var patente = "Sargento I";
              var level_up = 5;
            }
            if (qnt_msg >= 400 && qnt_msg < 500) {
              var patente = "Sargento II";
              var level_up = 6;
            }
            if (qnt_msg >= 500 && qnt_msg < 600) {
              var patente = "Sargento III";
              var level_up = 7;
            }
            if (qnt_msg >= 600 && qnt_msg < 700) {
              var patente = "Sargento IV";
              var level_up = 8;
            }
            if (qnt_msg >= 700 && qnt_msg < 800) {
              var patente = "Sargento V";
              var level_up = 9;
            }
            if (qnt_msg >= 800 && qnt_msg < 900) {
              var patente = "Sargento VI";
              var level_up = 10;
            }
            if (qnt_msg >= 900 && qnt_msg < 1000) {
              var patente = "Sargento VII";
              var level_up = 11;
            }
            if (qnt_msg >= 1000 && qnt_msg < 1100) {
              var patente = "Sargento VII";
              var level_up = 12;
            }
            if (qnt_msg >= 1100 && qnt_msg < 1200) {
              var patente = "Sargento VIII";
              var level_up = 13;
            }
            if (qnt_msg >= 1200 && qnt_msg < 1500) {
              var patente = "Sargento IX";
              var level_up = 14;
            }
            if (qnt_msg >= 1500 && qnt_msg < 2000) {
              var patente = "Sargento X";
              var level_up = 15;
            }
            if (qnt_msg >= 2000 && qnt_msg < 2500) {
              var patente = "Tenente I";
              var level_up = 16;
            }
            if (qnt_msg >= 2500 && qnt_msg < 2600) {
              var patente = "Tenente II";
              var level_up = 17;
            }
            if (qnt_msg >= 2600 && qnt_msg < 2700) {
              var patente = "Tenente III";
              var level_up = 18;
            }
            if (qnt_msg >= 2700 && qnt_msg < 2800) {
              var patente = "Tenente III";
              var level_up = 19;
            }
            if (qnt_msg >= 2800 && qnt_msg < 2900) {
              var patente = "Tenente IV";
              var level_up = 20;
            }
            if (qnt_msg >= 2900 && qnt_msg < 3000) {
              var patente = "Tenente V";
              var level_up = 21;
            }
            if (qnt_msg >= 3000 && qnt_msg < 3200) {
              var patente = "Capitão I";
              var level_up = 22;
            }
            if (qnt_msg >= 3200 && qnt_msg < 3400) {
              var patente = "Capitão II";
              var level_up = 23;
            }
            if (qnt_msg >= 3400 && qnt_msg < 3800) {
              var patente = "Capitão III";
              var level_up = 24;
            }
            if (qnt_msg >= 3800 && qnt_msg < 4000) {
              var patente = "Capitão IV";
              var level_up = 25;
            }
            if (qnt_msg >= 4000 && qnt_msg < 5000) {
              var patente = "Capitão V";
              var level_up = 26;
            }
            if (qnt_msg >= 5000 && qnt_msg < 5500) {
              var patente = "Major I";
              var level_up = 27;
            }
            if (qnt_msg >= 5500 && qnt_msg < 6000) {
              var patente = "Major II";
              var level_up = 28;
            }
            if (qnt_msg >= 6000 && qnt_msg < 6500) {
              var patente = "Major III";
              var level_up = 29;
            }
            if (qnt_msg >= 6500 && qnt_msg < 8000) {
              var patente = "Major IV";
              var level_up = 30;
            }
            if (qnt_msg >= 8000 && qnt_msg < 9000) {
              var patente = "Major V";
              var level_up = 31;
            }
            if (qnt_msg >= 9000 && qnt_msg < 10000) {
              var patente = "Tenente C I";
              var level_up = 32;
            }
            if (qnt_msg >= 10000 && qnt_msg < 11000) {
              var patente = "Tenente C II";
              var level_up = 33;
            }
            if (qnt_msg >= 11000 && qnt_msg < 12000) {
              var patente = "Tenente C II";
              var level_up = 34;
            }
            if (qnt_msg >= 12000 && qnt_msg < 13000) {
              var patente = "Tenente C III";
              var level_up = 35;
            }
            if (qnt_msg >= 13000 && qnt_msg < 15000) {
              var patente = "Tenente C IV";
              var level_up = 36;
            }
            if (qnt_msg >= 15000 && qnt_msg < 17000) {
              var patente = "Tenente C V";
              var level_up = 37;
            }
            if (qnt_msg >= 17000 && qnt_msg < 20000) {
              var patente = "Coronel I";
              var level_up = 38;
            }
            if (qnt_msg >= 20000 && qnt_msg < 23000) {
              var patente = "Coronel II";
              var level_up = 39;
            }
            if (qnt_msg >= 25000 && qnt_msg < 28000) {
              var patente = "Coronel III";
              var level_up = 40;
            }
            if (qnt_msg >= 28000 && qnt_msg < 30000) {
              var patente = "Coronel IV";
              var level_up = 41;
            }
            if (qnt_msg >= 30000 && qnt_msg < 35000) {
              var patente = "Coronel V";
              var level_up = 42;
            }

            if (isLevelingOn && !type == "stickerMessage") {
              switch (qnt_msg) {
                case 20:
                case 50:
                case 100:
                case 200:
                case 300:
                case 400:
                case 500:
                case 600:
                case 700:
                case 800:
                case 900:
                case 1000:
                case 1100:
                case 1200:
                case 1500:
                case 2000:
                case 2500:
                case 2600:
                case 2700:
                case 2800:
                case 2900:
                case 3000:
                case 3200:
                case 3400:
                case 3600:
                case 3800:
                case 4000:
                case 5000:
                case 5500:
                case 6000:
                case 6500:
                case 8000:
                case 9000:
                case 10000:
                case 11000:
                case 12000:
                case 13000:
                case 15000:
                case 17000:
                case 20000:
                case 23000:
                case 25000:
                case 28000:
                case 30000:
                  miwa.sendMessage(from, {
                    text: `✥ Parabéns: @${sender.split("@")[0]}
Você upou de level e também de patente por completar ${qnt_msg} mensagens, veja as informações abaixo...
￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
✧ Patente: ${patente} - ✧ Level: ${level_up}`,
                    mentions: [sender],
                  });
                  break;
              }
            }
          }

          if (isGroup) {
            if (!JSON.stringify(patentes).includes(from)) {
              patentes.push({
                grupoID: from,
                usus: [
                  {
                    id: sender,
                    level_usu: level_up,
                    patente_usu: patente,
                  },
                ],
              });
              fs.writeFileSync(
                "./settings/media/patentes.json",
                JSON.stringify(patentes)
              );
            }
            var i8 = patentes.map((i) => i.grupoID).indexOf(from);
            if (!JSON.stringify(patentes[i8].usus).includes(sender)) {
              patentes[i8].usus.push({
                id: sender,
                level_usu: level_up,
                patente_usu: patente,
              });
              fs.writeFileSync(
                "./settings/media/patentes.json",
                JSON.stringify(patentes)
              );
            }
            var i9 = patentes[i8].usus.map((i) => i.id).indexOf(sender);
            if (patentes[i8].usus[i9].patente_usu != patente) {
              patentes[i8].usus[i9].patente_usu = patente;
              fs.writeFileSync(
                "./settings/media/patentes.json",
                JSON.stringify(patentes)
              );
            }
            if (patentes[i8].usus[i9].level_usu != level_up) {
              patentes[i8].usus[i9].level_usu = level_up;
              fs.writeFileSync(
                "./settings/media/patentes.json",
                JSON.stringify(patentes)
              );
            }
          }

          if (isX9VisuUnica) {
            if (info.message?.viewOnceMessageV2 || type == "viewOnceMessage") {
              if (JSON.stringify(info).includes("videoMessage")) {
                var px =
                  info.message?.viewOnceMessageV2?.message?.videoMessage ||
                  info.message?.viewOnceMessage?.message?.videoMessage;
                px.viewOnce = false;
                px.video = { url: px.url };
                px.caption +=
                  "Revelando o vídeo na visualização única enviada..";
                miwa.sendMessage(from, px);
              } else {
                var px =
                  info.message?.viewOnceMessageV2?.message?.imageMessage ||
                  info.message?.viewOnceMessage?.message?.imageMessage;
                px.viewOnce = false;
                px.image = { url: px.url };
                px.caption +=
                  "Revelando a imagem na visualização única enviada...";
                miwa.sendMessage(from, px);
              }
            }
          }

          /////\\\\\\//////\\\\\\////\\\\////\\\///\\\///\\\\

          if (isBanned) return BannedExpired(ban);

          var palavrasfr = JSON.parse(
            fs.readFileSync("./database/grupos/palavras_forca.json")
          );

          var palavrasfrc =
            palavrasfr[Math.floor(Math.random() * palavrasfr.length)];

          var ALT_FR = palavrasfrc.plvr
            .toLowerCase()
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "");

          async function rv_forca() {
            var blue = [];
            for (let i = 0; i < ALT_FR.length; i++) {
              if (ALT_FR[i] == " ") {
                blue.push(" ");
              } else {
                blue.push("_");
              }
            }
            dataGp[0].forca_ofc = [
              {
                acertos: 0,
                erros: 0,
                palavra: blue,
                escreveu: [],
                palavra_ofc: ALT_FR,
                dica: palavrasfrc.dica,
                tema: palavrasfrc.tema,
              },
            ];
            dataGp[0].forca_inc = false;
            setGp(dataGp);
          }
          //===================================

          const AssemblyAI = require("assemblyai");

          //=========================

          //== BLOQUIO PRIVADO PARA O DONO [: creditos: by @Vitinho :] ==
          if (
            !isPremium &&
            isCmd &&
            muteall &&
            banChatss &&
            !SoDono &&
            banChatss === true
          )
            return m.reply(
              `Olá *${pushname}*, o bot está privado temporariamente pra o meu mestre\n\nMotivo: Atualizando para um novo bot\n saiba mais: ${global.linkgrupss}`
            );

          //=================================

          //== EVIANDO MENSAGEM VIA LINK GP //\\
          const waMenu = async (johnzix, linkimgwa, tewa, lkwa) => {
            try {
              mimi =
                "application/vnd.openxmlformats-officedocument.presentationml.presentation";
              miwa.sendMessage(
                johnzix,
                {
                  document: fs.readFileSync("./settings/media/miwa.pptx"),
                  fileName: `『ᴍᴇɴᴜ ɪɴɪᴄɪᴀʟ』`,
                  mimetype: mimi,
                  fileLength: 999999 * 999999,
                  caption: tewa,
                  contextInfo: {
                    externalAdReply: {
                      title: `『${tempo} ${pushname}』`,
                      body: "",
                      mediaType: 1,
                      renderLargerThumbnail: true,
                      showAdAttribution: true,
                      thumbnail: await getBuffer(linkimgwa), // SE QUISER COLOCAR SO PUSHA UM fs.readFileSync
                      body: `『🍎』ᴡᴀɴᴅɪɴʜᴀ ʙᴏᴛ『🍎』 `,
                      sourceUrl: lkwa,
                    },
                  },
                },
                { quoted: selogrupo }
              );
            } catch (e) {
              reply("deu erro aqui" + e);
            }
          };
          //=========================

          const sendVideo = (id, link, desc, miwa) => {
            return miwa.sendMessage(
              id,
              { video: { url: link }, caption: desc, mimetype: "video/mp4" },
              { quoted: miwa }
            );
          };

          const sendAudio = (id, link, tipo, miwa) => {
            return miwa.sendMessage(
              id,
              { audio: { url: link }, mimetype: tipo },
              { quoted: miwa }
            );
          };

          //2
          const waMenu2 = async (johnzixs, linkimgwas, tewas, lkwas) => {
            try {
              mimis =
                "application/vnd.openxmlformats-officedocument.presentationml.presentation";
              miwa.sendMessage(
                johnzixs,
                {
                  document: fs.readFileSync("./settings/media/miwa.pptx"),
                  fileName: `Ets de Vaginas`,
                  mimetype: mimis,
                  fileLength: 999999 * 999999,
                  caption: tewas,
                  contextInfo: {
                    externalAdReply: {
                      title: `Ets de Vaginas`,
                      body: ".",
                      mediaType: 1,
                      renderLargerThumbnail: false,
                      showAdAttribution: true,
                      thumbnail: await getBuffer(linkimgwas), // SE QUISER COLOCAR SO PUSHA UM fs.readFileSync
                      body: `Ets de Vaginas`,
                      sourceUrl: lkwas,
                    },
                  },
                },
                { quoted: selocontato }
              );
            } catch (e) {
              reply("deu erro aqui" + e);
            }
          };

          //REPLY INSTA
          const reply2 = async (menux) => {
            try {
              mimis =
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";

              let bxx = {
                document: fs.readFileSync("./settings/media/bk.xlsx"),
                fileName: `Ets de Vaginas`,
                mimetype: mimis,
                fileLength: 999999 * 999999,
                caption: menux,
                gifPlayback: true,
                footer: "",
                headerType: 4,
                contextInfo: {
                  externalAdReply: {
                    title: `insta do meu dono`,
                    body: `hello`,
                    mediaType: 1,
                    renderLargerThumbnail: false,
                    showAdAttribution: true,
                    thumbnail: await getBuffer(
                      "https://telegra.ph/file/1c06d320c32af7888e311.jpg"
                    ), // SE QUISER COLOCAR SO PUSHA UM fs.readFileSync
                    body: `ui`,
                    sourceUrl: `https://www.x.com/etsdevaginas`,
                  },
                },
              };
              miwa.sendMessage(from, bxx, { quoted: selocontato });
            } catch (e) {
              reply("I parece q voce errou alguma coisa o erro aqui =>" + e);
            }
          };

          // FUNÇÃO DE GOLD RPG

          const toUpdateDay = JSON.parse(
            fs.readFileSync("./database/usuarios/SystemRPG/attday.json")
          );
          const datinhadodia = moment
            .tz("America/Sao_Paulo")
            .format("DD/MM/YYYY");

          if (
            body != undefined &&
            isGroup &&
            isMiwaCityOFF &&
            VerificarJSON(miwarpg, sender)
          ) {
            var i8 = miwarpg.map((i) => i.id).indexOf(sender);
            if (!VerificarJSON(toUpdateDay, sender)) {
              toUpdateDay.push({ id: sender, data: datinhadodia });
              fs.writeFileSync(
                `./database/usuarios/SystemRPG/attday.json`,
                JSON.stringify(toUpdateDay)
              );
              miwarpg[i8].money += 250;
              fs.writeFileSync(
                `./database/usuarios/SystemRPG/miwarpg.json`,
                JSON.stringify(miwarpg)
              );
              mention(
                `Olá *@${
                  sender.split("@")[0]
                }*, você recebeu 𝗥$ 𝟮𝟱𝟬.𝟬𝟬 pela sua primeira mensagem do dia. Além disso, diversos jogos para se entreter no grupo! 🌟🪙\n——\n• Use o comando *${prefix}menurpg*, lhe desejo boa sorte e divirta-se!`
              );
            } else {
              var AB = toUpdateDay.map((i) => i.id).indexOf(sender);
              if (toUpdateDay[AB].data != datinhadodia) {
                toUpdateDay[AB].data = datinhadodia;
                fs.writeFileSync(
                  `./database/usuarios/SystemRPG/attday.json`,
                  JSON.stringify(toUpdateDay)
                );
                miwarpg[i8].money += 250;
                fs.writeFileSync(
                  `./database/usuarios/SystemRPG/miwarpg.json`,
                  JSON.stringify(miwarpg)
                );
                mention(
                  `Olá *@${
                    sender.split("@")[0]
                  }*, você recebeu 𝗥$ 𝟮𝟱𝟬.𝟬𝟬 pela sua primeira mensagem do dia. Além disso, diversos jogos para se entreter no grupo! 🌟🪙\n——\n• Use o comando *${prefix}menurpg*, lhe desejo boa sorte e divirta-se!`
                );
              }
            }
          }

          //==============CHAT-GPT'S=============

          async function lucasMsg() {
            shadow = await fetchJson(
              `https://miwa-apis.online/api/ia/bing?query=${q}&apikey=${API_KEY_MIWA}`
            );
            var vitukjk = [
              `*Obtendo resposta da IA Lucas🤖..*`,
              `*Obtendo resposta da IA Lucas🤖...*`,
              `*Obtendo resposta da IA Lucas🤖.*`,
              `*Obtendo resposta da IA Lucas🤖..*`,
              `*Obtendo resposta da IA Lucas🤖...*`,
              `*Obtendo resposta da IA Lucas🤖.*`,
              `*Obtendo resposta da IA Lucas🤖..*`,
              `*Obtendo resposta da IA Lucas🤖...*`,
              `*Obtendo resposta da IA Lucas🤖.*`,
              `*Obtendo resposta da IA Lucas🤖..*`,
              `*Obtendo resposta da IA Lucas🤖...*`,
              `${shadow.resultado}`
                .replace("Bard", "Akiyama-X")
                .replace("criado pelo Google AI", "criado pelo Vitu"),
            ];
            let { key } = await miwa.sendMessage(
              from,
              {
                text: `*Obtendo resposta da IA Lucas🤖.*`,
                mentions: [sender_ou_n],
              },
              { quoted: info }
            );
            for (let i = 0; i < vitukjk.length; i++)
              await miwa.sendMessage(from, { text: vitukjk[i], edit: key });
          }

          async function mattyMsg() {
            shadow = await fetchJson(
              `https://miwa-apis.online/api/ia/bing?query=${q}&apikey=${API_KEY_MIWA}`
            );
            var vitukjk = [
              `*Obtendo resposta da IA Matty🤖..*`,
              `*Obtendo resposta da IA Matty🤖...*`,
              `*Obtendo resposta da IA Matty🤖.*`,
              `*Obtendo resposta da IA Matty🤖..*`,
              `*Obtendo resposta da IA Matty🤖...*`,
              `*Obtendo resposta da IA Matty🤖.*`,
              `*Obtendo resposta da IA Matty🤖..*`,
              `*Obtendo resposta da IA Matty🤖...*`,
              `*Obtendo resposta da IA Matty🤖.*`,
              `*Obtendo resposta da IA Matty🤖..*`,
              `*Obtendo resposta da IA Matty🤖...*`,
              `${shadow.resultado}`
                .replace("Bard", "Akiyama-X")
                .replace("criado pelo Google AI", "criado pelo Vitu"),
            ];
            let { key } = await miwa.sendMessage(
              from,
              {
                text: `*Obtendo resposta da Ia Matty🤖.*`,
                mentions: [sender_ou_n],
              },
              { quoted: info }
            );
            for (let i = 0; i < vitukjk.length; i++)
              await miwa.sendMessage(from, { text: vitukjk[i], edit: key });
          }

          async function geminiMsg() {
            shadow = await fetchJson(
              `https://miwa-apis.online/api/ia/bing?query=${q}&apikey=${API_KEY_MIWA}`
            );
            var vitukjk = [
              `*Obtendo resposta da IA Gemini🤖..*`,
              `*Obtendo resposta da IA Gemini🤖...*`,
              `*Obtendo resposta da IA Gemini🤖.*`,
              `*Obtendo resposta da IA Gemini🤖..*`,
              `*Obtendo resposta da IA Gemini🤖...*`,
              `*Obtendo resposta da IA Gemini🤖.*`,
              `*Obtendo resposta da IA Gemini🤖..*`,
              `*Obtendo resposta da IA Gemini🤖...*`,
              `*Obtendo resposta da IA Gemini🤖.*`,
              `*Obtendo resposta da IA Gemini🤖..*`,
              `*Obtendo resposta da IA Gemini🤖...*`,
              `${shadow.resultado}`
                .replace("Bard", "Akiyama-X")
                .replace("criado pelo Google AI", "criado pelo Vitu"),
            ];
            let { key } = await miwa.sendMessage(
              from,
              {
                text: `*Obtendo resposta da IA Gemini🤖.*`,
                mentions: [sender_ou_n],
              },
              { quoted: info }
            );
            for (let i = 0; i < vitukjk.length; i++)
              await miwa.sendMessage(from, { text: vitukjk[i], edit: key });
          }

          // funções rpg

          const familiasPath = "./funções_rpg/familias.json";
          const loadFamilias = () => {
            //criador: Ryuufranky x
            try {
              return JSON.parse(fs.readFileSync(familiasPath));
            } catch (err) {
              console.error(err);
              return { familias: [] };
            }
          };
          const saveFamilias = (familias) => {
            fs.writeFileSync(familiasPath, JSON.stringify(familias, null, 2));
          };
          const isUserInFamily = (sender) => {
            let familias = loadFamilias();
            return familias.familias.some((f) => f.membros.includes(sender));
          };
          const criarFamilia = (sender, nomeFamilia) => {
            let familias = loadFamilias();
            if (isUserInFamily(sender)) {
              return "Você já faz parte de uma família.";
            }
            const novaFamilia = {
              chefe: sender,
              nome: nomeFamilia,
              membros: [sender],
            };
            familias.familias.push(novaFamilia);
            saveFamilias(familias);
            return `Família '${nomeFamilia}' criada com sucesso!`;
          }; //criador: Ryuufranky x
          const adicionarFamilia = (sender, membroParaAdicionar) => {
            let familias = loadFamilias();
            if (isUserInFamily(membroParaAdicionar)) {
              return "Este membro já faz parte de uma família.";
            }
            const familia = familias.familias.find((f) => f.chefe === sender);
            if (!familia) {
              return "Você precisa criar uma família primeiro.";
            }
            familia.membros.push(membroParaAdicionar);
            saveFamilias(familias);
            return `Membro adicionado à família '${familia.nome}' com sucesso!`;
          };
          const sairFamilia = (sender) => {
            let familias = loadFamilias();
            const familiaIndex = familias.familias.findIndex((f) =>
              f.membros.includes(sender)
            );
            if (familiaIndex === -1) {
              return "Você não está em uma família.";
            }
            const familia = familias.familias[familiaIndex];
            familia.membros = familia.membros.filter((m) => m !== sender);
            if (familia.membros.length === 0 || familia.chefe === sender) {
              familias.familias.splice(familiaIndex, 1);
              saveFamilias(familias);
              return `Você saiu e a família '${familia.nome}' foi desfeita.`;
            }
            saveFamilias(familias);
            return `Você saiu da família '${familia.nome}'.`;
          };
          const verFamilia = (sender) => {
            let familias = loadFamilias();
            const familia = familias.familias.find((f) =>
              f.membros.includes(sender)
            );
            if (!familia) {
              return "Você não está em uma família.";
            }
            const membrosFamilia = familia.membros
              .map((member) => `@${member.split("@")[0]}`)
              .join(", ");
            return `Família '${familia.nome}':\nMembros: ${membrosFamilia}`;
          };
          const verTodasFamilias = () => {
            //criador: Ryuufranky x
            let familias = loadFamilias();
            if (familias.familias.length === 0) {
              return "Nenhuma família foi criada ainda.";
            }
            let resultado = "👨‍👩‍👧‍👦 Todas as Famílias:\n\n";
            familias.familias.forEach((familia) => {
              const membrosFamilia = familia.membros
                .map((member) => `@${member.split("@")[0]}`)
                .join(", ");
              resultado += `Família '${familia.nome}':\nChefe: @${
                familia.chefe.split("@")[0]
              }\nMembros: ${membrosFamilia}\n\n`;
            });
            return resultado.trim();
          };

          const empresasPath = "./funções_rpg/empresas.json";
          const loadEmpresas = () => {
            try {
              return JSON.parse(fs.readFileSync(empresasPath));
            } catch (err) {
              console.error(err);
              return { empresas: [] };
            }
          };
          const saveEmpresas = (empresas) => {
            fs.writeFileSync(empresasPath, JSON.stringify(empresas, null, 2));
          };

          // Criar uma empresa
          const criarEmpresa = (sender, nomeEmpresa, tipoEmpresa) => {
            let empresas = loadEmpresas();
            const precoBase = 30000; // Custo fixo para abrir uma empresa
            const dificuldade = tipoEmpresa === "basica" ? 1 : 2; // 1 para básica, 2 para avançada
            const valorEmpresa = precoBase * dificuldade;

            if (isUserInEmpresa(sender)) {
              return "Você já possui uma empresa.";
            }

            const novaEmpresa = {
              dono: sender,
              nome: nomeEmpresa,
              tipo: tipoEmpresa,
              valor: valorEmpresa,
              produtos: [],
              lucro: 0,
            };

            empresas.empresas.push(novaEmpresa);
            saveEmpresas(empresas);
            addKoinUser(sender, -valorEmpresa); // Deduzir o valor ao criar a empresa
            return `Empresa '${nomeEmpresa}' criada com sucesso! Você gastou ${valorEmpresa} coins.`;
          };

          // Verificar se o usuário já possui uma empresa
          const isUserInEmpresa = (sender) => {
            let empresas = loadEmpresas();
            return empresas.empresas.some((e) => e.dono === sender);
          };

          // Adicionar um produto à empresa
          const adicionarProduto = (sender, nomeProduto, valorProduto) => {
            let empresas = loadEmpresas();
            const empresa = empresas.empresas.find((e) => e.dono === sender);

            if (!empresa) {
              return "Você não possui uma empresa.";
            }

            empresa.produtos.push({
              nome: nomeProduto,
              valor: valorProduto,
            });

            saveEmpresas(empresas);
            return `Produto '${nomeProduto}' adicionado à empresa '${empresa.nome}' com sucesso!`;
          };

          // Vender um produto
          const venderProduto = (sender, nomeProduto) => {
            let empresas = loadEmpresas();
            const empresa = empresas.empresas.find((e) => e.dono === sender);

            if (!empresa) {
              return "Você não possui uma empresa.";
            }

            const produtoIndex = empresa.produtos.findIndex(
              (p) => p.nome === nomeProduto
            );
            if (produtoIndex === -1) {
              return "Produto não encontrado na sua empresa.";
            }

            const produto = empresa.produtos[produtoIndex];
            const comissao = produto.valor * 0.1; // 10% de comissão
            const lucro = produto.valor + comissao;

            empresa.lucro += lucro;
            empresa.produtos.splice(produtoIndex, 1); // Remove o produto vendido
            saveEmpresas(empresas);
            addKoinUser(sender, lucro); // Adicionar lucro ao saldo do usuário

            return `Produto '${nomeProduto}' vendido por ${lucro} coins! Comissões incluídas.`;
          };

          // Vender a empresa
          const venderEmpresa = (sender) => {
            let empresas = loadEmpresas();
            const empresaIndex = empresas.empresas.findIndex(
              (e) => e.dono === sender
            );

            if (empresaIndex === -1) {
              return "Você não possui uma empresa.";
            }

            const empresa = empresas.empresas[empresaIndex];
            const valorVenda = empresa.valor + empresa.lucro;

            empresas.empresas.splice(empresaIndex, 1); // Remove a empresa
            saveEmpresas(empresas);
            addKoinUser(sender, valorVenda); // Adicionar valor de venda ao saldo do usuário

            return `Empresa '${empresa.nome}' vendida por ${valorVenda} coins!`;
          };

          // Visualizar a empresa do usuário
          const verEmpresa = (sender) => {
            let empresas = loadEmpresas();
            const empresa = empresas.empresas.find((e) => e.dono === sender);

            if (!empresa) {
              return "Você não possui uma empresa.";
            }

            const produtos =
              empresa.produtos
                .map((p) => `${p.nome} - ${p.valor} coins`)
                .join("\n") || "Nenhum produto";
            return `Empresa: ${empresa.nome}\nTipo: ${empresa.tipo}\nValor: ${empresa.valor} coins\nLucro acumulado: ${empresa.lucro} coins\nProdutos:\n${produtos}`;
          };

          // Visualizar todas as empresas
          const verTodasEmpresas = () => {
            let empresas = loadEmpresas();

            if (empresas.empresas.length === 0) {
              return "Nenhuma empresa foi criada ainda.";
            }

            let resultado = "🏢 Todas as Empresas:\n\n";
            empresas.empresas.forEach((empresa) => {
              const produtos =
                empresa.produtos
                  .map((p) => `${p.nome} - ${p.valor} coins`)
                  .join("\n") || "Nenhum produto";
              resultado += `Empresa: ${empresa.nome}\nDono: @${
                empresa.dono.split("@")[0]
              }\nTipo: ${empresa.tipo}\nValor: ${
                empresa.valor
              } coins\nLucro acumulado: ${
                empresa.lucro
              } coins\nProdutos:\n${produtos}\n\n`;
            });

            return resultado.trim();
          };

          const dindin = JSON.parse(
            fs.readFileSync("./funções_rpg/dinheiro/dindin.json")
          );

          const addATM = (sender) => {
            const obj = {
              id: sender,
              money: 1500, // Saldo inicial do usuário
              // Aqui você pode adicionar mais informações padrão do perfil do usuário
            };
            miwarpg.push(obj);
            fs.writeFileSync(
              "./database/usuarios/SystemRPG/miwarpg.json",
              JSON.stringify(miwarpg)
            );
          };
          
          const addKoinUser = (sender, amount) => {
            // Encontrar o índice do usuário no arquivo miwarpg.json
            let position = miwarpg.findIndex((user) => user.id === sender);
            
            if (position !== -1) {
              miwarpg[position].money += amount;
              // Atualizar o arquivo após a modificação
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
            }
          };
          
          // Função para verificar o saldo do usuário
          const checkATMuser = (sender) => {
            let position = miwarpg.findIndex((user) => user.id === sender);
            if (position !== -1) {
              return miwarpg[position].money; // Retorna o saldo atual
            } else {
              return 0; // Se o usuário não estiver registrado
            }
          };

          const confirmATM = (sender, amount) => {
            let position = false;
            Object.keys(dindin).forEach((i) => {
              if (dindin[i].id === sender) {
                position = i;
              }
            });
            if (position !== false) {
              dindin[position].dindin -= amount;
              fs.writeFileSync(
                "./funções_rpg/dinheiro/dindin.json",
                JSON.stringify(dindin)
              );
            }
          };

          const arma = JSON.parse(
            fs.readFileSync("./funções_rpg/arma/arma.json")
          );

          const isarma = arma.includes(sender);


          const churrasqueira = JSON.parse(
            fs.readFileSync("./funções_rpg/churrasqueira/churrasqueira.json")
          );

          const ishasChurrasqueira = churrasqueira.includes(sender);

          const diamondsPath = "./funções_rpg/diamonds.json";

          // Load diamond data
          const loadDiamonds = () => {
            try {
              return JSON.parse(fs.readFileSync(diamondsPath));
            } catch (err) {
              console.error(err);
              return { diamonds: {} };
            }
          };

          // Save diamond data
          const saveDiamonds = (diamonds) => {
            fs.writeFileSync(diamondsPath, JSON.stringify(diamonds, null, 2));
          };

          const mineDiamonds = (sender) => {
            let diamondsData = loadDiamonds();
            if (!diamondsData.diamonds[sender]) {
              diamondsData.diamonds[sender] = 0;
            }

            const minedDiamonds = Math.floor(Math.random() * 5) + 1; // Randomly mine 1-5 diamonds
            diamondsData.diamonds[sender] += minedDiamonds;
            saveDiamonds(diamondsData);

            return `⛏️ Você minerou ${minedDiamonds} diamantes! Agora você tem ${diamondsData.diamonds[sender]} diamantes.`;
          };

          const sellDiamonds = (sender) => {
            let diamondsData = loadDiamonds();
            if (
              !diamondsData.diamonds[sender] ||
              diamondsData.diamonds[sender] === 0
            ) {
              return "💎 Você não tem diamantes para vender.";
            }

            const diamondCount = diamondsData.diamonds[sender];
            const diamondValue = 100;
            const totalValue = diamondCount * diamondValue;

            // Update user's currency balance
            addKoinUser(sender, totalValue);

            // Reset user's diamond count
            diamondsData.diamonds[sender] = 0;
            saveDiamonds(diamondsData);

            return `💰 Você vendeu ${diamondCount} diamantes por ${totalValue} moedas!`;
          };

          const casamentosPath = "./funções_rpg/casamentos.json";

          // Carregar dados dos casamentos
          const loadCasamentos = () => {
            try {
              return JSON.parse(fs.readFileSync(casamentosPath));
            } catch (err) {
              console.error(err);
              return { casamentos: [] };
            }
          };

          // Salvar dados dos casamentos
          const saveCasamentos = (casamentos) => {
            fs.writeFileSync(
              casamentosPath,
              JSON.stringify(casamentos, null, 2)
            );
          };

          // Verificar se um usuário já está casado
          const isUserMarried = (sender) => {
            let casamentos = loadCasamentos();
            return casamentos.casamentos.some(
              (c) => c.parte1 === sender || c.parte2 === sender
            );
          };

          // Realizar casamento
          const casar = (sender, parceiro) => {
            let casamentos = loadCasamentos();
            if (isUserMarried(sender)) {
              return "Você já está casado.";
            }
            if (isUserMarried(parceiro)) {
              return "Seu parceiro já está casado.";
            }
            const novoCasamento = {
              parte1: sender,
              parte2: parceiro,
              data: new Date().toISOString(),
            };
            casamentos.casamentos.push(novoCasamento);
            saveCasamentos(casamentos);
            return `Você e @${parceiro.split("@")[0]} agora estão casados!`;
          };

          // Ver casamentos

          const verCasamento = (sender) => {
            let casamentos = loadCasamentos();
            const casamento = casamentos.casamentos.find(
              (c) => c.parte1 === sender || c.parte2 === sender
            );
            if (!casamento) {
              return "Você não está casado.";
            }
            const parceiroa =
              casamento.parte1 === sender ? casamento.parte2 : casamento.parte1;
            return `Você está casado com @${
              parceiroa.split("@")[0]
            } desde ${new Date(casamento.data).toLocaleDateString()}.`;
          };

          // Divorciar
          const divorciar = (sender) => {
            let casamentos = loadCasamentos();
            const casamentoIndex = casamentos.casamentos.findIndex(
              (c) => c.parte1 === sender || c.parte2 === sender
            );
            if (casamentoIndex === -1) {
              return "Você não está casado.";
            }
            const casamento = casamentos.casamentos[casamentoIndex];
            const parceiroqkf =
              casamento.parte1 === sender ? casamento.parte2 : casamento.parte1;
            casamentos.casamentos.splice(casamentoIndex, 1);
            saveCasamentos(casamentos);
            return `Você se divorciou de @${parceiroqkf.split("@")[0]}.`;
          };

          // Ver todos os casamentos
          const verTodosCasamentos = () => {
            let casamentos = loadCasamentos();
            if (casamentos.casamentos.length === 0) {
              return "Nenhum casamento foi registrado ainda.";
            }
            let resultado = "👰‍💍 Todos os Casamentos:\n\n";
            casamentos.casamentos.forEach((casamento) => {
              resultado += `💍 | @${casamento.parte1.split("@")[0]} ❤️ @${
                casamento.parte2.split("@")[0]
              } \n| 📅 Data: ${new Date(
                casamento.data
              ).toLocaleDateString()}\n\n—————————————\n\n`;
            });
            return resultado.trim();
          };

          const tinderPath = "./funções_rpg/tinder.json";

          const loadTinder = () => {
            try {
              const data = fs.readFileSync(tinderPath);
              if (data.length === 0) {
                return { perfis: [] }; // Retorna um objeto vazio se o arquivo estiver vazio
              }
              return JSON.parse(data);
            } catch (err) {
              console.error(err);
              return { perfis: [] }; // Retorna um objeto vazio em caso de erro de leitura
            }
          };

          const saveTinder = (perfis) => {
            fs.writeFileSync(tinderPath, JSON.stringify(perfis, null, 2));
          };

          const criarPerfilTinder = (sender, nomePerfil, descricao) => {
            let perfis = loadTinder();
            // Verificar se o usuário já tem um perfil
            if (perfis.perfis.some((p) => p.usuario === sender)) {
              return "Você já tem um perfil no Tinder.";
            }
            const novoPerfil = {
              usuario: sender,
              nome: nomePerfil,
              descricao: descricao,
              likes: [],
              dislikes: [],
              comentarios: [],
            };
            perfis.perfis.push(novoPerfil);
            saveTinder(perfis);
            return `Perfil '${nomePerfil}' criado com sucesso no Tinder!`;
          };

          const excluirPerfilTinder = (sender) => {
            let perfis = loadTinder();
            const perfilIndex = perfis.perfis.findIndex(
              (p) => p.usuario === sender
            );
            if (perfilIndex === -1) {
              return "Você ainda não criou um perfil no Tinder.";
            }
            perfis.perfis.splice(perfilIndex, 1);
            saveTinder(perfis);
            return "Seu perfil no Tinder foi excluído com sucesso.";
          };

          const todosPerfisTinder = () => {
            let perfis = loadTinder();
            if (perfis.perfis.length === 0) {
              return "Nenhum perfil encontrado no Tinder.";
            }
            // Selecionar um perfil aleatório
            const perfilAleatorio =
              perfis.perfis[Math.floor(Math.random() * perfis.perfis.length)];
            return `🔥 Perfil Aleatório no Tinder:\nNome: ${perfilAleatorio.nome}\nDescrição: ${perfilAleatorio.descricao}`;
          };

          const verMeuPerfilTinder = (sender) => {
            let perfis = loadTinder();
            const meuPerfil = perfis.perfis.find((p) => p.usuario === sender);
            if (!meuPerfil) {
              return "Você ainda não criou um perfil no Tinder.";
            }
            let perfilInfo = `👤 Seu Perfil no Tinder:\nNome: ${meuPerfil.nome}\nDescrição: ${meuPerfil.descricao}\n`;
            perfilInfo += `Likes Recebidos: ${meuPerfil.likes.length}\nDislikes Recebidos: ${meuPerfil.dislikes.length}\n\n`;
            if (meuPerfil.comentarios.length > 0) {
              perfilInfo += `Comentários Recebidos:\n`;
              meuPerfil.comentarios.forEach((comentario, index) => {
                perfilInfo += `${index + 1}. De @${
                  comentario.autor.split("@")[0]
                }: ${comentario.texto}\n`;
              });
            } else {
              perfilInfo += "Nenhum comentário recebido ainda.\n";
            }
            return perfilInfo.trim();
          };

          const curtirPerfilTinder = (sender, perfilCurtido) => {
            let perfis = loadTinder();
            const meuPerfil = perfis.perfis.find((p) => p.usuario === sender);
            const perfilAlvo = perfis.perfis.find(
              (p) => p.nome.toLowerCase() === perfilCurtido.toLowerCase()
            );
            if (!meuPerfil || !perfilAlvo) {
              return "Perfil não encontrado.";
            }
            meuPerfil.likes.push(perfilAlvo.usuario);
            saveTinder(perfis);
            return `Você curtiu o perfil de ${perfilAlvo.nome}.`;
          };

          const descurtirPerfilTinder = (sender, perfilDescurtido) => {
            let perfis = loadTinder();
            const meuPerfil = perfis.perfis.find((p) => p.usuario === sender);
            const perfilAlvo = perfis.perfis.find(
              (p) => p.nome.toLowerCase() === perfilDescurtido.toLowerCase()
            );
            if (!meuPerfil || !perfilAlvo) {
              return "Perfil não encontrado.";
            }
            meuPerfil.dislikes.push(perfilAlvo.usuario);
            saveTinder(perfis);
            return `Você descurtiu o perfil de ${perfilAlvo.nome}.`;
          };

          const comentarPerfilTinder = (
            sender,
            perfilComentado,
            textoComentario
          ) => {
            let perfis = loadTinder();
            const meuPerfil = perfis.perfis.find((p) => p.usuario === sender);
            const perfilAlvo = perfis.perfis.find(
              (p) => p.nome.toLowerCase() === perfilComentado.toLowerCase()
            );
            if (!meuPerfil || !perfilAlvo) {
              return "Perfil não encontrado.";
            }
            const novoComentario = {
              autor: sender,
              texto: textoComentario,
            };
            perfilAlvo.comentarios.push(novoComentario);
            saveTinder(perfis);
            return `Você comentou no perfil de ${perfilAlvo.nome}.`;
          };

          //==========================

          // ÍNICIO: CASES / COMANDOS COM PREFIXO:
          switch (command) {
            case "privado":
            case "muteallon":
              if (!SoDono)
                return m.reply(`<❗> Somente meu dono pode usar esse comando.`);
              if (banChatss)
                return await m.reply("O modo privado já está ativo.");
              banChatss = true;
              nescessario.banChatss = banChatss;
              fs.writeFileSync(
                "./settings/nescessario.json",
                JSON.stringify(nescessario, null, "\t")
              );
              await miwa.sendMessage(from, {
                text: "Mudança bem-sucedida para uso privado - apenas meu dono pode me usar.",
              });
              break;

            case "publico":
            case "mutealloff":
              if (!SoDono)
                return m.reply(`<❗> Somente meu dono pode usar esse comando.`);
              if (!banChatss) return await m.reply("Não está ativado ainda.");
              banChatss = false;
              nescessario.banChatss = banChatss;
              fs.writeFileSync(
                "./settings/nescessario.json",
                JSON.stringify(nescessario, null, "\t")
              );
              await miwa.sendMessage(from, {
                text: "Mudança bem-sucedida para o uso público - todos podem usar meus comandos.*",
              });
              break;

            case "cotacao":
              {
                if (!isPremium) return reply(enviar.msg.premium);
                moedas = ["dolar", "euro", "bitcoin", "libra", "ethereum"];
                if (!moedas.includes(q_2))
                  return reply(
                    "A moeda está inexistente em meu banco de dados!\n*Disponíveis:* dolar, euro, bitcoin, libra, ethereum\n*Observação:* Use letras minúsculas para não ocorrer erros!"
                  );
                if (encodeURIComponent(q) == "dolar") {
                  var money = "USD-BRL";
                } else if (encodeURIComponent(q) == "euro") {
                  var money = "EUR-BRL";
                } else if (encodeURIComponent(q) == "bitcoin") {
                  var money = "BTC-BRL";
                } else if (encodeURIComponent(q) == "libra") {
                  var money = "GBP-BRL";
                } else if (encodeURIComponent(q) == "ethereum") {
                  var money = "ETH-BRL";
                }
                axios
                  .get(`https://economia.awesomeapi.com.br/last/${money}`)
                  .then((response) => {
                    if (encodeURIComponent(q) == "dolar") {
                      var resposta = response.data.USDBRL;
                    } else if (encodeURIComponent(q) == "euro") {
                      var resposta = response.data.EURBRL;
                    } else if (encodeURIComponent(q) == "bitcoin") {
                      var resposta = response.data.BTCBRL;
                    } else if (encodeURIComponent(q) == "ethereum") {
                      var resposta = response.data.ETHBRL;
                    } else if (encodeURIComponent(q) == "libra") {
                      var resposta = response.data.GBPBRL;
                    }
                    msgSemQuoted(
                      `🏦 COTAÇÃO - Últimas 24h: 💱\n- Moeda: ${
                        resposta.name
                      }\n- Valor mais alto: ${Number(resposta.high).toFixed(
                        2
                      )}\n- Valor mais baixo: ${Number(resposta.low).toFixed(
                        2
                      )}\n- Valor atual: ${Number(resposta.bid).toFixed(2)}`
                    );
                  })
                  .catch((response) => {
                    reply("❌️ Erro ao obter informações! ❌️");
                  });
              }
              break;

            case "lista_aluguel":
              if (!SoDono && !info.key.fromMe) return reply(mess.onlyOwner());
              bla = "*⏳️ Lista de [ Grupos Alugados ] ⚠️*\n\n";
              for (i = 0; i < rg_aluguel.length; i++) {
                bla += `[ ${i + 1} ] - Data de vencimento: ${
                  rg_aluguel[i].data
                }\nId: ${rg_aluguel[i].grupo}\nGrupo: ${
                  rg_aluguel[i].nome_do_gp
                }\nTexto informando sobre o dono do grupo alugado: ${
                  rg_aluguel[i].texto
                }\n──────────────────────────\n`;
              }
              reply(bla);
              break;

            case "rm_aviso":
            case "rm_avisos":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              for (i of black_) {
                var RDFA = i;
              }
              if (!JSON.stringify(RDFA.PUXAR).includes(from))
                return reply(
                  `Nenhum aviso foi registrado nesse grupo, utilize o comando ${prefix}rg_aviso`
                );
              RDFA.PUXAR.splice(RDFA.PUXAR.indexOf(from));
              fs.writeFileSync(
                "./database/grupos/avisos.json",
                JSON.stringify(black_, null, 2)
              );
              reply(
                "Avisos referente a esse grupo, foi tirado de todos os horários registrados.."
              );
              break;

            case "rg_aviso":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              var [hr, ms] = q.trim().split("|");
              if (!q.trim().includes(":") && !q.trim().includes("|"))
                return reply(
                  `Exemplo: ${
                    prefix + command
                  } 12:00|Boa tarde a todos, prestem atenção nas regras do grupo\n\neste exemplo.. Ele vai enviar todos os dias as 12:00 da tarde a mensagem que você registrou, já se você quer trocar o horário.. Só refazer o comando\nSe você quer apagar o aviso do grupo, apenas coloque ${prefix}rm_aviso`
                );
              var i5 = black_?.map((i) => i?.hora)?.indexOf(hr);
              if (JSON.stringify(black_[i5]?.PUXAR)?.includes(from)) {
                black_[i5].PUXAR.splice(
                  black_[i5].PUXAR.map((i) => i.idgp).indexOf(from)
                );
                fs.writeFileSync(
                  "./database/grupos/avisos.json",
                  JSON.stringify(black_, null, 2)
                );
                setTimeout(() => {
                  msgSemQuoted(
                    `O registro anterior foi apagado e recriou um novo, se deseja continuar, clique no botão abaixo..\n- Lembre-se que há avisos programados em outros horários, se quiser limpar todos, digite: ${prefix}rm_avisos`
                  );
                }, 500);
              } else if (!JSON.stringify(black_).includes(hr)) {
                black_.push({
                  hora: hr,
                  PUXAR: [{ idgp: from, msg: ms, avisou: false }],
                });
                fs.writeFileSync(
                  "./database/grupos/avisos.json",
                  JSON.stringify(black_, null, 2)
                );
                reply("Aviso Criado com sucesso..");
              } else if (!JSON.stringify(black_[i5].PUXAR).includes(from)) {
                black_[i5].PUXAR.push({ idgp: from, msg: ms, avisou: false });
                fs.writeFileSync(
                  "./database/grupos/avisos.json",
                  JSON.stringify(black_, null, 2)
                );
                reply("Aviso Criado com sucesso..");
              }
              break;

            case "rg_aluguel":
              if (!SoDono) return reply(mess.onlyOwner());
              if (JSON.stringify(rg_aluguel).includes(from))
                return reply("Este grupo ja foi registrado");
              var [data, texto] = q.trim().split("|");
              if (!q.trim().includes("|"))
                return reply(
                  `Cade a |\nExemplo: ${
                    prefix + command
                  } 01/01|Dono do grupo: 555555555 / Pra cobrar o aluguel..`
                );
              rg_aluguel.push({
                grupo: from,
                data: data,
                texto: texto,
                nome_do_gp: groupName,
                cobrou: false,
              });
              fs.writeFileSync(
                "./settings/media/rg_aluguel.json",
                JSON.stringify(rg_aluguel)
              );
              reply(
                "Registro de aluguel deste grupo, foi feito com sucesso..."
              );
              break;

            case "iddogrupo":
              if (!SoDono) return reply(mess.onlyOwner());
              reply(from);
              break;

            case "rm_aluguel":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!q.trim().includes("g.us"))
                return reply(
                  `Digite o ID do grupo que deseja tirar da lista de aluguel, fórma mais fácil de achar o id é consultando o comando lista_aluguel, ou então executando o comando iddogrupo dentro do grupo que deseja tirar da lista de aluguel, e copiando o id, e executando dessa forma.\nExemplo: ${
                    prefix + command
                  } 120363343392567405@g.us`
                );
              var i6 = rg_aluguel.map((i) => i.grupo).indexOf(q.trim());
              rg_aluguel.splice(i6, 1);
              fs.writeFileSync(
                "./settings/media/rg_aluguel.json",
                JSON.stringify(rg_aluguel)
              );
              reply("Grupo tirado do registro de aluguel com sucesso..");
              break;

            //=========== [ ÍNICIO JOGOS ] ========= //

            case "addpalavras_forca":
            case "addpalavras_f":
              if (!SoDono) return reply(mess.onlyOwner());
              var [ttl, tema, dc] = q.toLowerCase().trim().split("|");
              if (!q.includes("|"))
                return reply(
                  `Faltanda a primeira |\nExemplo: ${
                    prefix + command
                  } titulo|tema|dica`
                );
              if (q.lastIndexOf("|") < 0)
                return reply(
                  `Faltando a segunda |\nExemplo: ${
                    prefix + command
                  } titulo|tema|dica`
                );
              kir = [];
              for (i of palavrasfr) {
                kir.push(i.plvr);
              }
              if (kir.indexOf(ttl.toLowerCase().trim()) >= 0)
                return reply("Este título já foi adicionado/existente...");
              palavrasfr.push({ plvr: ttl, tema: tema, dica: dc });
              fs.writeFileSync(
                "./database/grupos/palavras_forca.json",
                JSON.stringify(palavrasfr, null, 2)
              );
              reply("Palavra adicionada ao jogo da forca com sucesso...");
              break;

            case "rmpalavra_f":
            case "rmpalavra_forca":
              if (!SoDono) return reply(mess.onlyOwner());
              var i5 = palavrasfr
                .map((i) => i.plvr)
                .indexOf(q.trim().toLowerCase());
              palavrasfr.splice(i5, 1);
              fs.writeFileSync(
                "./database/grupos/palavras_forca.json",
                JSON.stringify(palavrasfr, null, 2)
              );
              reply("Palavra tirada do jogo da forca com sucesso...");
              break;

            case "rv-forca":
            case "resetforca":
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isGroup) return reply(mess.onlyGroup());
              if (dataGp[0].forca_inc == false)
                return reply(
                  `O jogo não foi iniciado.\nDigite ${prefix}iniciar_forca`
                );
              rv_forca();
              reply("Forca resetada com sucesso...");
              break;

            case "mostrar_forca":
            case "ver_forca":
            case "iniciar_forca":
            case "jogodaforca":
              if (!isGroup) return reply(mess.onlyGroup());
              try {
                if (dataGp[0].forca_inc)
                  return reply(
                    `Jogo já está em andamento, caso queira resetar, fale com um adm para executar ${prefix}resetforca, ou tente acertar o jogo da forca que deve está logo a cima.`
                  );
                if (!dataGp[0].forca_inc) {
                  rv_forca();
                  var DM_FR = dataGp[0].forca_ofc[0];
                  dataGp[0].forca_inc = true;
                  setGp(dataGp);
                  await sleep(300);
                  linha_fr = " ";
                  for (i of DM_FR.palavra) {
                    linha_fr += ` ${i}`;
                  }
                  rsp_fr = `- Jogo da forca - ${DM_FR.palavra_ofc.length} Letras\n\nTema: ${DM_FR.tema}\n\nDica: ${DM_FR.dica}\n
|________
       _¦_\n\n\n\n\n\n\n
${linha_fr}\n
_____________________
\n_- JOGO INICIADO -_
\nUse ${prefix}r-f letra que talvez exista por sua observação.\n\nOu ${prefix}r-f nome todo\n
_____________________
`;
                  reply(rsp_fr);
                }
              } catch (e) {
                console.log(e);
              }
              break;

            case "r-forca":
            case "r-f":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!dataGp[0].forca_inc)
                return reply(
                  `O jogo não foi iniciado.\nDigite ${prefix}iniciar_forca`
                );
              if (!q.toLowerCase().trim())
                return reply("Digite a letra que deseja responder..");
              var q2 = q_2.trim().toLowerCase();
              if (ANT_LTR_MD_EMJ(q2) || Number(q2))
                return reply(
                  "Não pode letras modificadas, nem emoji, nem números.."
                );
              if (q.trim().length == 2)
                return reply(
                  "Digite letra por letra para tentar adivinhar, ou acerte a palavra toda, boa sorte..."
                );
              DM_FR = dataGp[0].forca_ofc[0];
              if (DM_FR.escreveu.indexOf(q2) >= 0)
                return reply("Esta letra já foi utilizada..");
              var ERRQ = DM_FR.palavra_ofc.includes(q2) ? 0 : 1;
              var ERROS = dataGp[0].forca_ofc[0].erros;
              DM_FR.escreveu.push(q2);
              setGp(dataGp);
              PSC = [];
              if (DM_FR.palavra_ofc.indexOf(q2) >= 0) {
                for (i = 0; i < DM_FR.palavra_ofc.length; i++) {
                  if (DM_FR.palavra_ofc[i] == q2) {
                    PSC.push(i);
                    DM_FR.acertos += 1;
                  }
                }
                setGp(dataGp);
                for (i of PSC) {
                  DM_FR.palavra[i] = q2;
                  setGp(dataGp);
                }
              }
              await sleep(300);
              linha_fr = " ";
              for (i of DM_FR.palavra) {
                linha_fr += ` ${i}`;
              }
              letra_ut = " ";
              for (i of DM_FR.escreveu) {
                letra_ut += `${i}, `;
              }
              var RST_T = `- Jogo da forca - ${
                DM_FR.palavra_ofc.length
              } Letras\n\nTema: ${DM_FR.tema}\n\nDica: ${DM_FR.dica}\n
__________-_
         _|_\n
        ${ERROS + ERRQ >= 1 ? "🤡" : ""}\n      ${
                ERROS + ERRQ >= 2 ? "👈" : ""
              } ${ERROS + ERRQ >= 3 ? "👉" : ""}  \n         ${
                ERROS + ERRQ >= 4 ? "👖" : ""
              }\n         ${ERROS + ERRQ >= 5 ? "👞" : ""} ${
                ERROS + ERRQ >= 6 ? "👞" : ""
              }
\n${linha_fr}\n
___-________-_____\n
Letras ja utilizadas: ${letra_ut}
___-________-_____
`;
              if (q.length > 2) {
                reply("Humm, espertinho quer acertar a palavra toda");
              }
              await sleep(500);
              if (
                DM_FR.palavra_ofc.indexOf(q2) >= 0 ||
                (q2.length > 2 && q2 == DM_FR.palavra_ofc)
              ) {
                reply(
                  `${
                    q2.length > 2
                      ? `Você acertou a palavra toda e ganhou bom menino(a), irei resetar o jogo...`
                      : DM_FR.acertos == DM_FR.palavra_ofc.length
                      ? `Parabéns, toda palavra foi concluída : < ${DM_FR.palavra_ofc} > irei resetar o jogo..`
                      : `Você acertou uma letra e ganhou continue assim..`
                  }`
                );
                if (
                  q2.length > 2 ||
                  DM_FR.acertos == DM_FR.palavra_ofc.length
                ) {
                  return rv_forca();
                }
                await sleep(200);
                reply(RST_T);
              } else {
                reply(
                  `${
                    q2.length > 2
                      ? `Infelizmente você perdeu, errou a palavra toda, deveria ter tentado letra por letra né, irei resetar o jogo..`
                      : ERROS + ERRQ == 6
                      ? `Aa, você completou 6 Erros, e perdeu irei resetar o jogo..`
                      : `Você Errou, e perdeu 😥..`
                  }`
                );
                dataGp[0].forca_ofc[0].erros += 1;
                setGp(dataGp);
                if (q2.length > 2 || ERROS + ERRQ == 6) {
                  return rv_forca();
                }
                await sleep(200);
                reply(RST_T);
              }
              break;
            case "caracoroa": //@Vitinho
              const cara = fs.readFileSync(
                "./arquivos/funcoes/stk_jogos/caracoroa/cara.webp"
              );
              const coroa = fs.readFileSync(
                "./arquivos/funcoes/stk_jogos/caracoroa/coroa.webp"
              );
              cararo = ["cara", "coroa"];
              fej = cararo[Math.floor(Math.random() * cararo.length)];
              miwa.sendMessage(
                from,
                {
                  sticker: fs.readFileSync(
                    "./arquivos/funcoes/stk_jogos/caracoroa/" + fej + ".webp"
                  ),
                },
                { quoted: selo }
              );
              msgSemQuoted(
                `💬 Olá *${pushname}*, *você conseguiu: ${fej}*... Não foi oque esperava? Use o comando e tente novamente.`
              );
              break;

            case "dado": //@Vitinho
              const dadus = ["1", "2", "3", "4", "5", "6"];
              dadu = dadus[Math.floor(Math.random() * dadus.length)];
              miwa.sendMessage(
                from,
                {
                  sticker: fs.readFileSync(
                    "./arquivos/funcoes/stk_jogos/media/" + dadu + ".webp"
                  ),
                },
                {
                  quoted: selo,
                }
              );
              break;

            case "carteira":
              var salldo = VerSaldo(sender);
              reply(`Dinheiro em conta: R$${salldo},00`);
              break;

            case "saldo":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!q)
                return reply(`ඬ⃟   Para adicionar saldo a uma pessoa, use a seguinte forma:
✧ *Exemplo:* ${prefix + command} add @pessoa 1

ඬ⃟   Para remover o saldo bancário da SabBank de um usuário, use a seguinte forma:
✧ *Exemplo:* ${prefix + command} del @pessoa 1`);
              if (args[0] === "add") {
                if (info.message.extendedTextMessage != undefined) {
                  mentioned =
                    info.message.extendedTextMessage.contextInfo.mentionedJid;
                  valoh = Number(args[2]);
                  AdicionarSaldo(mentioned[0], valoh);
                  reply(
                    `*「 SALDO ADICIONADO COM SUCESSO 」*\n➸ *ID*: ${mentioned[0]}`
                  );
                } else {
                  valoh = Number(args[2]);
                  AdicionarSaldo(args[1] + "@s.whatsapp.net", valoh);
                  reply(
                    `*「 SALDO ADICIONADO COM SUCESSO 」*\n➸ *ID*: ${args[1]}@s.whatsapp.net`
                  );
                }
              } else if (args[0] === "del") {
                if (info.message.extendedTextMessage != undefined) {
                  mentioned =
                    info.message.extendedTextMessage.contextInfo.mentionedJid;
                  valoh = Number(args[2]);
                  ConfirmarPagamento(mentioned[0], valoh);
                  reply(
                    `*「 SALDO RETIRADO COM SUCESSO 」*\n➸ *ID*: ${mentioned[0]}`
                  );
                } else {
                  valoh = Number(args[2]);
                  ConfirmarPagamento(args[1] + "@s.whatsapp.net", valoh);
                  reply(
                    `*「 SALDO RETIRADO COM SUCESSO 」*\n➸ *ID*: ${args[1]}@s.whatsapp.net`
                  );
                }
              }
              break;

            case "vercarteira":
              {
                if (!SoDono) return reply(mess.onlyOwner());
                if (info.message.extendedTextMessage != undefined) {
                  mentioned =
                    info.message.extendedTextMessage.contextInfo.mentionedJid;
                  carteirauser = VerSaldo(mentioned[0]);
                  reply(
                    `- Aqui está a carteira do usuário: [ ${
                      mentioned[0].split("@")[0]
                    } ] atualizado agora!\nSaldo atual do Usuário: R$${carteirauser},00`
                  );
                } else {
                  carteirauser2 = VerSaldo(args[1] + "@s.whatsapp.net");
                  reply(
                    `- Aqui está a carteira do usuário: [ ${
                      mentioned[0].split("@")[0]
                    } ] atualizado agora!\nSaldo atual do Usuário: R$${carteirauser},00`
                  );
                }
              }
              break;

            case "transferir":
              {
                txt = q
                  .replace(" /", "/")
                  .replace("/ ", "/")
                  .replace(" / ", "/");
                // @usuário que vai receber o <valor>
                var [receber, valor] = txt.split("/");
                // valor ou tipo, inválido
                if (!q.includes("/"))
                  return reply(
                    `Opa, você digitou o <Tipo> ou <Valor> inválido, tenha em mente que você só pode transferir com o <Tipo> ou <Valor> válido. um bom exemplo disso: ${
                      prefix + command
                    } @55/20`
                  );
                // somente número! nada de letras!
                if (isNaN(valor))
                  return await reply("Use apenas números nada de letras. <3>");
                // valor mínimo da transferência
                if (valor < 3)
                  return reply(`Transfrência mínima é de <3> reais`);
                // checar se o usuário tem ou não tem dinheiro
                if (VerSaldo(sender) < valor)
                  return reply(
                    `🪙 [SEM SABCASH] 🪙\n - Infelizmente você não possui este valor ${valor}, para realizar esta transferência você precisa ter no máximo ${valor}. Quando estiver o valor volte aqui e tente novamente.`
                  );
                const recebidor = `${receber.split("@")[0]}@s.whatsapp.net`;
                taxa = 0.0 * valor;
                taxado = valor - taxa;
                // pagar, receber, evoluir.
                if (command === "transferir") {
                  AdicionarSaldo(recebidor, taxado);
                  ConfirmarPagamento(sender, valor);
                  reply(`💠 *[TRANSFERÊNCIA REALIZADA]*
✧:ඬ A transferência foi realizada pelo usuário: wa.me/${sender.split("@")[0]}
✧:ඬ Destino de recebimento ao usuário: ${receber}
✧:ඬ Valor da Transferência: ${valor}`);
                } else if (command === "pix") {
                  AdicionarSaldo(recebidor, taxado);
                  ConfirmarPagamento(sender, valor);
                  reply(`💠 *[TRANSFERÊNCIA REALIZADA]*
✧:ඬ A transferência foi realizada pelo usuário: wa.me/${sender.split("@")[0]}
✧:ඬ Destino de recebimento ao usuário: ${receber}`);
                }
              }
              break;

            case "apostar":
              {
                if (!isGroup) return reply("Comando apenas para grupo!");
                const dinheiro_ = VerSaldo(sender);
                const checkxpr = VerSaldo(sender, dinheiro_);
                const quantidader = `50`;
                if (checkxpr <= quantidader)
                  return reply(
                    `Desculpa você ainda não pode apostar!😕 somente com: ${quantidader} de COINS.\n\nSeu saldo atual: R$${checkxpr},00`
                  );
                if (Number(args[0]) >= checkxpr || Number(args[0]) >= dinheiro_)
                  return reply(
                    `Você não pode apostar uma quantidade de dinheiro maior do que a você tem, e nosso limite de apostas é de ${quantidader} dinheiro por vez!\n\nSeu dinheiro: ${checkxpr}`
                  );
                if (Number(args[0]) < 1)
                  return reply(`Qual o valor que você deseja apostar?`);
                if (isNaN(args[0]))
                  return reply(
                    `Digite "${prefix}apostar 100" (desse jeito sem nenhuma vírgula ou letras por favor.`
                  );
                const double = Math.floor(Math.random() * 7) + 1;
                const nrolxp = Number(-args[0]);
                const prolxp = double + Number(args[0]);
                if (double == 1) {
                  await reply(
                    `🔪BANG!!!💣\n\nVocê perdeu na roleta-russa, causando uma perca de ${nrolxp} em seu dinheiro.`
                  );
                  valoh1 = Number(args[0]);
                  ConfirmarPagamento(sender, valoh1);
                } else if (double == 2) {
                  await reply(
                    `*Você Ganhou! Parabéns.. 🥳*\nSobreviveu ao tiro e recebeu ${prolxp} COINS!`
                  );
                  AdicionarSaldo(sender, prolxp, dinheiro_);
                } else if (double == 3) {
                  await reply(
                    `Poxa você está sem sorte😓\n\nVocê perdeu ${nrolxp}\nNão desista continue apostando😎🤙`
                  );
                  valoh2 = Number(args[0]);
                  ConfirmarPagamento(sender, valoh2);
                } else if (double == 4) {
                  await reply(
                    `Essa foi por pouco!!😬\n\nVocê consegiu concluir o golpe e ganhou ${prolxp} COINS`
                  );
                  AdicionarSaldo(sender, prolxp, dinheiro_);
                } else if (double == 5) {
                  await reply(
                    `Você errou o cavalo 🐴! :(\n\nAcabou perdendo ${nrolxp} em seu dinheiro, que tal.. apostar mais alto??🙈.`
                  );
                  valoh3 = Number(args[0]);
                  ConfirmarPagamento(sender, valoh3);
                } else if (double == 6) {
                  await reply(
                    `*🥳 FINALMENTE, DEU BOM PA VC!* ✅️\n\nVocê finalmente ganhou, receba seus ${prolxp} COINS!️`
                  );
                  AdicionarSaldo(sender, prolxp, dinheiro_);
                }
              }
              break;

              case "churrasco":
                case "açougue":
                case "vendas": //luskizera
                  {
                    // Verifica se o usuário está no modo brincadeira
                    if (!isModobn)
                      return reply(
                        `O modo brincadeira está desligado, peça ao administrador para ligá-lo`
                      );
                
                    // Verifica se o usuário possui uma churrasqueira
                    const hasChurrasqueira = churrasqueira.includes(sender);
                    if (!hasChurrasqueira)
                      return reply(
                        `*Você não possui uma churrasqueira, compre uma antes de fazer churrasco!*\nCompre uma por R$1.000 usando o comando ${prefix}churrasqueira`)

                    // Realiza a operação de venda
                    let picanha = Math.floor(Math.random() * 19) + 10;
                    let contrafl = Math.floor(Math.random() * 10) + 17;
                    let frangoassa = Math.floor(Math.random() * 15) + 20;
                    let migilhon = Math.floor(Math.random() * 40) + 60;
                    let resultFinal = picanha + contrafl + frangoassa + migilhon;
                
                    reply(
                      `Aguarde 9 segundos para sair os resultados das peças de carne vendidas!`
                    );
                    await delay(9000);
                
                    var logochurras = "https://i.imgur.com/IFTAvtw.jpeg";
                    let enviarText = `┏ *「️🍖 𝐂 𝐇 𝐔 𝐑 𝐑 𝐀 𝐒 𝐂 𝐎 🍖」* ┓
                │▢ Carne - Picanha Argentina: ${picanha}
                │▢ Carne - Contra Filé: ${contrafl}
                │▢ Carne - Asinhas de Frango: ${frangoassa}
                │▢ Carne - Filé Mignon: ${migilhon}
                ┗ *「️🍖 𝐂 𝐇 𝐔 𝐑 𝐑 𝐀 𝐒 𝐂 𝐎 🍖」* ┛
                [㕚] Foram vendidas hoje por você em nosso açougue: ${resultFinal} peças de carne. Parabéns!
                [㕚] Isso significa que foi adicionado em sua carteira R$${resultFinal},00 em coins!`;
                
                    miwa.sendMessage(
                      from,
                      { image: { url: `${logochurras}` }, caption: enviarText },
                      { quoted: info }
                    );
                
                    // Adiciona o saldo ao usuário
                    AdicionarSaldo(sender, resultFinal);
                  }
                  break;
                
              case "pescar":
              case "pesca": //luskizera
                {
                  // Define os valores aleatórios para cada item pescado
                  let lagostas = Math.floor(Math.random() * 19) + 10;
                  let caranguejos = Math.floor(Math.random() * 10) + 17;
                  let camaroes = Math.floor(Math.random() * 15) + 20;
                  let mexilhao = Math.floor(Math.random() * 40) + 60;
                  
                  // Soma total do valor de pesca
                  let totalPescado = lagostas + caranguejos + camaroes + mexilhao;
              
                  // Mensagem inicial para aguardar o resultado
                  reply(`Aguarde 9 segundos para sair os resultados da pesca!`);
                  await delay(9000);
              
                  // URL da imagem de pesca
                  var logopescad = "https://i.imgur.com/czh7ZOp.jpeg";
              
                  // Formatação do texto de resultado da pesca
                  let resultadoPesca = `┏━── *「️ 🎣️ 𝐏 𝐄 𝐒 𝐂 𝐀 🎣 」*  ─━┓\n│▢ Total de Lagostas: ${lagostas}\n│▢ Total de Caranguejos: ${caranguejos}\n│▢ Total de Camarões: ${camaroes}\n│▢ Total de Mexilhão: ${mexilhao}\n│▢ *Resultado Final: ${totalPescado}*\n┗━── *「️ 🎣️ 𝐏 𝐄 𝐒 𝐂 𝐀 🎣 」*  ─━┛\n[㕚] Isso significa que foi adicionado em sua carteira R$${totalPescado},00 em coins!`;
              
                  // Envia a imagem e o resultado da pesca
                  miwa.sendMessage(
                    from,
                    { image: { url: `${logopescad}` }, caption: resultadoPesca },
                    { quoted: info }
                  );
              
                  // Função que adiciona o valor ao saldo do usuário no arquivo miwarpg.json
                  let userIndex = miwarpg.findIndex((user) => user.id === sender);
                  if (userIndex !== -1) {
                    miwarpg[userIndex].money += totalPescado; // Adiciona o valor à carteira
                    fs.writeFileSync("./database/usuarios/SystemRPG/miwarpg.json", JSON.stringify(miwarpg));
                    reply(`Você recebeu R$${totalPescado},00 em coins pela pesca!`);
                  } else {
                    reply("Você não está registrado no sistema de RPG.");
                  }
                  
                  break;
                }

                case "minerar": //luskizera 
                if (!isGroup) return reply("Comando apenas para grupo");
              
                // Gera um valor aleatório de mineração
                let minerar = Math.floor(Math.random() * 30);
              
                // Definindo diferentes respostas para o comando de mineração
                let textmi = [
                  `Você minerando nas ilhas savitas encontrou ${minerar} Coins!👷⛏\n[㕚] Foi adicionado em seu saldo: R$${minerar},00 por meio da sua mineração!️️`,
                  `Você minerando no seu quintal achou ${minerar} Coins\n[㕚] Foi adicionado em seu saldo: R$${minerar},00 por meio da sua mineração!️`,
                  `Parabéns você achou ${minerar} Coin no quintal da vizinha?;-;\n[㕚] Foi adicionado em seu saldo: R$${minerar},00 por meio da sua mineração!️`,
                  `Você invadiu mina proibida, e quando tava fazendo mineração achou ${minerar} Coins!⛏\n[㕚] Foi adicionado em seu saldo: R$${minerar},00 por meio da sua mineração!️`,
                  `Você roubou ${minerar} Coins na mina de Minas gerais!👷⛏️💰\n[㕚] Foi adicionado em seu saldo: R$${minerar},00 por meio da sua mineração!`,
                ];
              
                // Escolhe uma resposta aleatória
                const minerarresp = textmi[Math.floor(Math.random() * textmi.length)];
              
                // Encontra o índice do usuário no arquivo miwarpg.json
                let userIndex = miwarpg.findIndex((user) => user.id === sender);
                
                if (userIndex !== -1) {
                  // Adiciona o valor minerado ao saldo do usuário
                  miwarpg[userIndex].money += minerar;
                  fs.writeFileSync("./database/usuarios/SystemRPG/miwarpg.json", JSON.stringify(miwarpg));
              
                  // Envia a resposta sobre a mineração
                  await miwa.sendMessage(from, { text: minerarresp }, { quoted: info });
                } else {
                  reply("Você não está registrado no sistema de RPG.");
                }
              
                break;

            case "quando": //@Vitinho
              if (args.length < 1) return reply("Digite a pergunta!");
              const meupirul = [
                "Hoje",
                "Amanhã",
                "Nunca",
                "dia",
                "semana",
                "mês",
                "ano",
              ];
              const meupirul2 = ["dias", "semanas", "meses", "anos"];
              randomm = meupirul[Math.floor(Math.random() * meupirul.length)];
              random2 = `${Math.floor(Math.random() * 11) + 1}`;
              if (
                randomm == "Hoje" ||
                randomm == "Amanhã" ||
                randomm == "Nunca"
              ) {
                texto = `Pergunta: ${body.slice(1)}\nResposta: ${randomm}`;
              } else if (random2 == 1) {
                texto = `Pergunta: ${body.slice(1)}\nResposta:  1 ${randomm}`;
              } else {
                random3 =
                  meupirul2[Math.floor(Math.random() * meupirul2.length)];
                texto = `Pergunta: ${body.slice(
                  1
                )}\nResposta: ${random2} ${random3}`;
              }
              reply(texto);
              break;

            //=========== [ FINAL JOGOS ] ========= //

            case "limpar_mortos-cnt":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!isGroup) return reply(mess.onlyOwner());
              bla = [];
              var CNT_RS =
                countMessage[countMessage.map((i) => i.groupId).indexOf(from)]
                  .numbers;
              for (i = 0; i < CNT_RS.map((i) => i.id).length; i++) {
                bla.push(CNT_RS.map((i) => i.id)[i]);
              }
              for (i of groupMembers) {
                bla.splice(bla.indexOf(i.id), 1);
              }
              for (i of bla) {
                CNT_RS.splice(CNT_RS.indexOf(i), 1);
              }
              fs.writeFileSync(
                "./settings/media/countmsg.json",
                JSON.stringify(countMessage)
              );
              reply(
                "Usuários que já foi removido, ou saiu do grupo, foi tirado do contador de mensagens.."
              );
              break;

            case "tirar_docnt":
              if (!SoDono) return;
              if (!isGroup) return reply(mess.onlyOwner());
              var i2 = countMessage.map((i) => i.groupId).indexOf(from);
              var i = countMessage[i2].numbers
                .map((i) => i.id)
                .indexOf(q.trim() + "@s.whatsapp.net");
              countMessage[i2].numbers.splice(i, 1);
              fs.writeFileSync(
                "./settings/media/countmsg.json",
                JSON.stringify(countMessage)
              );
              reply("Usuário tirado do contador de mensagens com sucesso...");
              break;

            case "anotar":
            case "tirar_nota":
            case "rmnota":
              if (!isGroup)
                return reply(`Só em grupo pode utilizar este comando.`);
              if (!isGroupAdmins)
                return reply(`Só adm pode utilizar este tipo de comando.`);
              if (command == "anotar") {
                var [q5, q10] = q.trim().split("|");
                if (!q5 || !q10 || !q.includes("|"))
                  return reply(
                    `Digite o título da anotação e o texto que deseja anotar..\nExemplo: ${prefix}anotar Cachorro|Cachorros são bom pra comer na Venezuela...`
                  );
                if (JSON.stringify(anotar).includes(from)) {
                  var i2 = anotar.map((i) => i.grupo).indexOf(from);
                  if (JSON.stringify(anotar[i2].puxar).includes(q5)) {
                    var i3 = anotar[i2].puxar.map((i) => i.nota).indexOf(q5);
                    if (anotar[i2].puxar[i3].nota == q5)
                      return reply(
                        `Esta anotação já está inclusa, utilize outro título.. Ou você pode tirar com\n${prefix}tirar_nota ${q5}`
                      );
                  }
                }
                if (!JSON.stringify(anotar).includes(from)) {
                  anotar.push({
                    grupo: from,
                    puxar: [{ nota: q5, anotacao: q10 }],
                  });
                  fs.writeFileSync(
                    "./database/func/tabela/anotar.json",
                    JSON.stringify(anotar)
                  );
                  reply("Anotação registrada com sucesso...");
                } else {
                  anotar[i2].puxar.push({ nota: q5, anotacao: q10 });
                  fs.writeFileSync(
                    "./database/func/tabela/anotar.json",
                    JSON.stringify(anotar)
                  );
                  reply("Anotação registrada com sucesso...");
                }
              } else {
                if (!q)
                  return reply(
                    "Digite qual anotação deseja tirar pelo título.."
                  );
                if (JSON.stringify(anotar).includes(from)) {
                  var i2 = anotar.map((i) => i.grupo).indexOf(from);
                  if (JSON.stringify(anotar[i2].puxar).includes(q)) {
                    var i3 = anotar[i2].puxar.map((i) => i.nota).indexOf(q);
                  }
                }
                if (0 > anotar[i2].puxar.map((i) => i.nota).indexOf(q))
                  return reply(
                    "Esta nota não está inclusa, verifique com atenção..."
                  );
                anotar[i2].puxar.splice(i3, 1);
                fs.writeFileSync(
                  "./database/func/tabela/anotar.json",
                  JSON.stringify(anotar)
                );
                reply(`Anotação ${q} tirada com sucesso...`);
              }
              break;

            case "anotacao":
            case "anotacoes":
            case "nota":
            case "notas":
              if (!isGroup)
                return reply(`Só em grupo pode utilizar este comando.`);
              if (command == "anotacao" || command == "nota") {
                if (!q)
                  return reply(
                    "Digite o título da anotação que deseja puxar.."
                  );
                if (!JSON.stringify(anotar).includes(from))
                  return reply("Este grupo não tem nenhuma anotação...");
                var i2 = anotar.map((i) => i.grupo).indexOf(from);
                if (!JSON.stringify(anotar[i2].puxar).includes(q))
                  return reply("Não contém nenhuma anotação com este título.");
                var i3 = anotar[i2].puxar.map((i) => i.nota).indexOf(q);
                mentions(`〈 ${anotar[i2].puxar[i3].anotacao} 〉`);
              } else {
                var i2 = anotar.map((i) => i.grupo).indexOf(from);
                if (anotar[i2].puxar.length == 0)
                  return reply("Este grupo não tem nenhuma anotação...");
                var i2 = anotar.map((i) => i.grupo).indexOf(from);
                var antr = anotar[i2].puxar;
                txtin = `Aqui está todas as anotações registradas em minha database do grupo: *[ ${groupName} ]*\n`;
                for (i = 0; i < antr.length; i++) {
                  txtin += `\n↝ Anotação: ⟮ ${anotar[i2].puxar[i].nota} ⟯ - 〈 ${anotar[i2].puxar[i].anotacao} 〉\n`;
                }
                txtin += "";
                mentions(txtin);
              }
              break;

            case "download-link":
              if (q.includes("video") || q.includes("mp4")) {
                miwa
                  .sendMessage(
                    from,
                    { video: { url: q }, mimetype: "video/mp4" },
                    { quoted: info }
                  )
                  .catch((e) => {
                    reply("Erro, visualize se este link é válido...");
                  });
              } else if (q.includes("webp") || q.includes("jpg")) {
                miwa
                  .sendMessage(from, { image: { url: q } }, { quoted: info })
                  .catch((e) => {
                    reply("Erro, visualize se este link é válido...");
                  });
              }
              break;

            case "signo":
              try {
                if (!q)
                  return reply(
                    `Digite seu signo, exemplo: ${prefix + command} Virgem`
                  );
                signos = [
                  "Áries",
                  "Touro",
                  "Gêmeos",
                  "Câncer",
                  "Leão",
                  "Virgem",
                  "Libra",
                  "Escorpião",
                  "Sagitário",
                  "Capricórnio",
                  "Aquário",
                  "Peixes",
                  "aries",
                  "touro",
                  "gemeos",
                  "cancer",
                  "leao",
                  "virgem",
                  "libra",
                  "escorpiao",
                  "sagitario",
                  "capricornio",
                  "aquario",
                  "peixes",
                ];
                if (!signos.includes(q_2))
                  return reply("Este signo não existe...");
                ABC = await fetchJson(
                  `https://miwa-apis.online/api/horoscopo?signo=${q}&apikey=` +
                    API_KEY_MIWA
                );
                miwa
                  .sendMessage(from, {
                    image: { url: ABC.resultado.imagem },
                    caption: `Signo: ${q}\n${ABC.resultado.inform}`,
                  })
                  .catch((e) => {
                    return reply(`Erro..`);
                  });
              } catch (e) {
                return reply(`Erro..`);
              }
              break;

            case "getlinha":
              if (!SoDono) return reply(mess.onlyOwner());
              const arquivo = fs.readFileSync("index.js", "utf-8");
              const localCase = arquivo.indexOf(`case '${q}'`);
              if (localCase === -1) return reply("Comando não encontrado.");
              reply(
                `O comando '${q}' está na linha: ` +
                  arquivo.substr(0, localCase).split("\n").length
              );
              break;

 

              case "menu":
                // Imagem padrão para o menu
                const menuImage = "https://i.imgur.com/C5wtPMU.jpeg";
            
                // Conteúdo do texto do menu
                const textMenu = `
┏━━━━━ 🌟 𝑰𝒏𝒇𝒐 𝑼𝒔𝒖á𝒓𝒊𝒐 🌟 ━━━━━┓
┃
┣ 🏷️ 𝙉𝙞𝙘𝙠: ${pushname}
┣ 📅 𝘿𝙖𝙩𝙖: ${date}
┣ ⏱️ 𝙃𝙤𝙧𝙖: ${hora120}
┣ ⚜️ 𝙑𝙄𝙋: ${isPremium ? "Sim ✅" : "Não ❌"}
┃
┗━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━ ❖ 𝑴𝒆𝒏𝒖 𝑫𝒊𝒔𝒑𝒐𝒏í𝒗𝒆𝒍 ❖ ━━━━┓
┃
┃ 👑 𝐈𝐧𝐟𝐨 𝐃𝐨𝐧𝐨: *${prefix}dono*
┃ 👑 𝐈𝐧𝐟𝐨 𝑪𝒓𝒊𝒂𝒅𝒐𝒓: *${prefix}criador*
┃ 👾 𝐌𝐞𝐧𝐮 𝐋𝐨𝐣𝐚: *${prefix}loja*
┃ 💎 𝐌𝐞𝐧𝐮 𝐂𝐨𝐦𝐚𝐧𝐝𝐨𝐬: *${prefix}comandos*
┃ 🎗 𝐌𝐞𝐧𝐮 𝐀𝐝𝐦: *${prefix}menuadm*
┃ 👑 𝐌𝐞𝐧𝐮 𝐃𝐨𝐧𝐨: *${prefix}menudono*
┃ 🏫 𝐌𝐞𝐧𝐮 𝐑𝐏𝐆: *${prefix}menurpg*
┃ 💰 𝐂𝐨𝐦𝐩𝐫𝐚𝐫 𝐊𝐞𝐲: *${prefix}comprar-key*
┃ 🎮 𝐌𝐞𝐧𝐮 𝐉𝐨𝐠𝐨𝐬: *${prefix}brincadeiras*
┃ ⚜️ 𝐌𝐞𝐧𝐮 𝐄𝐟𝐞𝐢𝐭𝐨𝐬: *${prefix}efeitos*
┃ 📷 𝐌𝐞𝐧𝐮 𝐋𝐨𝐠𝐨𝐬: *${prefix}menulogos*
┃ 🎖 𝐌𝐞𝐧𝐮 𝐕𝐈𝐏: *${prefix}menuprem*
┃
┗━━━━━━━━━━━━━━━━━━━━━━┛

© ${NickDono}
                `;
            
                // Enviar mensagem com imagem padrão, link e informações de "ad reply"
                miwa.sendMessage(
                    from,
                    {
                        image: { url: menuImage },
                        caption: textMenu,
                        contextInfo: {
                            mentionedJid: [sender],
                            externalAdReply: {
                                showAdAttribution: true,
                                mediaType: "VIDEO",
                                mediaUrl: null,
                                title: `🍁 ${NomeDoBot} 🍁\n》E T S  D E  V A G I N A S《`,
                                body: null,
                                sourceUrl: `https://www.flamengo.com.br/`,
                                thumbnail: fs.readFileSync(`./settings/lib/logo2.jpg`),
                            },
                        },
                    },
                    { quoted: info }
                );
                break;

            case "botoes":
              if (!SoDono) return reply(mess.onlyOwner());
              if (botoes) {
                botoes = false;
                nescessario.botoes = false;
                setNes(nescessario);
                reply(
                  "- Botões desativado com sucesso, para ativar novamente só digitar o comando denovo."
                );
              } else if (!botoes) {
                botoes = true;
                nescessario.botoes = true;
                setNes(nescessario);
                reply(
                  "- Botões ativado com sucesso, para desativar novamente só digitar o comando denovo."
                );
              }
              break;

            case "verificado-global":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!isVerificado) {
                nescessario.verificado = true;
                setNes(nescessario);
                reply(
                  `- O verificado foi ativado de todos os comandos que tem, para tirar novamente só digitar o comando novamente..`
                );
              } else if (isVerificado) {
                nescessario.verificado = false;
                setNes(nescessario);
                reply(
                  `- O verificado de todos os comandos, foi desativado, para ativar novamente só digitar o comando novamente..`
                );
              }
              break;

            case "botoes":
              if (!SoDono) return reply(mess.onlyOwner());
              if (botoes) {
                botoes = false;
                nescessario.botoes = false;
                setNes(nescessario);
                reply(
                  "- Botões desativado com sucesso, para ativar novamente só digitar o comando denovo."
                );
              } else if (!botoes) {
                botoes = true;
                nescessario.botoes = true;
                setNes(nescessario);
                reply(
                  "- Botões ativado com sucesso, para desativar novamente só digitar o comando denovo."
                );
              }
              break;

            case "audio-menu":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!isAudioMenu) {
                nescessario.menu_audio = true;
                setNes(nescessario);
                reply(
                  `- O áudio foi ativado para o menu com sucesso, se quiser desativar é só digitar o comando novamente.`
                );
              } else if (isAudioMenu) {
                nescessario.menu_audio = false;
                setNes(nescessario);
                reply(
                  `- O áudio foi desativado para o menu com sucesso, se quiser ativar é só digitar o comando novamente.`
                );
              }
              break;

            case "console":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!isConsole) {
                nescessario.consoleoff = true;
                setNes(nescessario);
                reply(
                  `- O comando de tirar o console foi ativado com sucesso. Agora não verá mais os comandos nem mensagem dadas no console, mas funcionará perfeitamente, ok?, é bom para evitar banimento de spam no heroku.\n\nSe quiser desativar - Só digitar o comando novamente`
                );
              } else if (isConsole) {
                nescessario.consoleoff = false;
                setNes(nescessario);
                reply(
                  `- O comando de tirar o console foi desativado com sucesso. Agora verá os comandos e mensagens dadas no console, mas se for utilizar no heroku, recomendo ativar. é bom para evitar banimento de spam no heroku.\n\nSe quiser ativar - Só digitar o comando novamente`
                );
              }
              break;

            case "menucompleto":
            case "comandos":
              miwa.sendMessage(from, { react: { text: `🩸`, key: info.key } });
              miwa.sendMessage(
                from,
                {
                  image: { url: logoslink.logo },
                  caption: linguagem.menu(
                    prefix,
                    NomeDoBot,
                    sender,
                    NickDono,
                    packname
                  ),
                  contextInfo: {
                    mentionedJid: [sender],
                    externalAdReply: {
                      showAdAttribution: true,
                      mediaType: "VIDEO",
                      mediaUrl: null,
                      title: `🍁 ${NomeDoBot} 🍁\n》Ets de Vaginas《`,
                      body: null,
                      sourceUrl: `https://www.flamengo.com.br/`,
                      thumbnail: fs.readFileSync(`./settings/lib/logo2.jpg`),
                    },
                  },
                },
                { quoted: info }
              );
              break;

            case "puxadas":
              miwa.sendMessage(
                from,
                {
                  image: { url: logoslink.logo },
                  caption: linguagem.menupuxadas(
                    prefix,
                    NomeDoBot,
                    sender,
                    NickDono,
                    packname
                  ),
                  contextInfo: {
                    mentionedJid: [sender],
                    externalAdReply: {
                      showAdAttribution: true,
                      mediaType: "VIDEO",
                      mediaUrl: null,
                      title: `🍁 ${NomeDoBot} 🍁\n》E T S  D E  V A G I N A S《`,
                      body: null,
                      sourceUrl: `https://www.flamengo.com.br/`,
                      thumbnail: fs.readFileSync(`./settings/lib/logo2.jpg`),
                    },
                  },
                },
                { quoted: info }
              );
              break;
            case "logos":
            case "menulogo":
            case "menulogos":
              miwa.sendMessage(from, { react: { text: `🎨`, key: info.key } });
              miwa.sendMessage(
                from,
                {
                  image: { url: logoslink.logo },
                  caption: linguagem.menulogos(
                    prefix,
                    NomeDoBot,
                    sender,
                    NickDono,
                    packname
                  ),
                  contextInfo: {
                    mentionedJid: [sender],
                    externalAdReply: {
                      showAdAttribution: true,
                      mediaType: "VIDEO",
                      mediaUrl: null,
                      title: `🍁 ${NomeDoBot} 🍁\n》Ets de Vaginas《`,
                      body: null,
                      sourceUrl: `https://www.flamengo.com.br/`,
                      thumbnail: fs.readFileSync(`./settings/lib/logo2.jpg`),
                    },
                  },
                },
                { quoted: info }
              );
              break;

            case "menuadm":
            case "menuadms":
            case "adm":
              miwa.sendMessage(from, { react: { text: `👺`, key: info.key } });
              miwa.sendMessage(
                from,
                {
                  image: { url: logoslink.logo },
                  caption: linguagem.menuadm(
                    prefix,
                    NomeDoBot,
                    sender,
                    NickDono,
                    packname
                  ),
                  contextInfo: {
                    mentionedJid: [sender],
                    externalAdReply: {
                      showAdAttribution: true,
                      mediaType: "VIDEO",
                      mediaUrl: null,
                      title: `🍁 ${NomeDoBot} 🍁\n》E T S  D E  V A G I N A S《`,
                      body: null,
                      sourceUrl: `https://www.flamengo.com.br/`,
                      thumbnail: fs.readFileSync(`./settings/lib/logo2.jpg`),
                    },
                  },
                },
                { quoted: info }
              );
              break;

            case "scraper":
            case "menuscraper":
            case "menusc":
              miwa.sendMessage(from, { react: { text: `👺`, key: info.key } });
              miwa.sendMessage(
                from,
                {
                  image: { url: logoslink.logo },
                  caption: linguagem.menusc(
                    prefix,
                    NomeDoBot,
                    sender,
                    NickDono,
                    packname
                  ),
                  contextInfo: {
                    mentionedJid: [sender],
                    externalAdReply: {
                      showAdAttribution: true,
                      mediaType: "VIDEO",
                      mediaUrl: null,
                      title: `🍁 ${NomeDoBot} 🍁\n》E T S  D E  V A G I N A S《`,
                      body: null,
                      sourceUrl: `https://www.flamengo.com.br/`,
                      thumbnail: fs.readFileSync(`./settings/lib/logo2.jpg`),
                    },
                  },
                },
                { quoted: info }
              );
              break;

            case "menudono":
            case "donomenu":
              if (isAudioMenu) {
                miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/menudono.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              miwa.sendMessage(from, { react: { text: `🙇‍♀️`, key: info.key } });
              miwa.sendMessage(
                from,
                {
                  image: { url: logoslink.logo },
                  caption: linguagem.menudono(
                    prefix,
                    NomeDoBot,
                    sender,
                    NickDono,
                    packname
                  ),
                  contextInfo: {
                    mentionedJid: [sender],
                    externalAdReply: {
                      showAdAttribution: true,
                      mediaType: "VIDEO",
                      mediaUrl: null,
                      title: `🍁 ${NomeDoBot} 🍁\n》E T S  D E  V A G I N A S《`,
                      body: null,
                      sourceUrl: `https://www.flamengo.com.br/`,
                      thumbnail: fs.readFileSync(`./settings/lib/logo2.jpg`),
                    },
                  },
                },
                { quoted: info }
              );
              break;

            case "efeitosimg":
            case "efeitos":
            case "efeitoimg":
            case "efeitosmarcar":
              miwa.sendMessage(from, { react: { text: `✨`, key: info.key } });
              miwa.sendMessage(
                from,
                {
                  image: { url: logoslink.logo },
                  caption: linguagem.efeitos(
                    prefix,
                    NomeDoBot,
                    sender,
                    NickDono,
                    packname
                  ),
                  contextInfo: {
                    mentionedJid: [sender],
                    externalAdReply: {
                      showAdAttribution: true,
                      mediaType: "VIDEO",
                      mediaUrl: null,
                      title: `🍁 ${NomeDoBot} 🍁\n》E T S  D E  V A G I N A S《`,
                      body: null,
                      sourceUrl: `https://www.flamengo.com.br/`,
                      thumbnail: fs.readFileSync(`./settings/lib/logo2.jpg`),
                    },
                  },
                },
                { quoted: info }
              );
              break;

            case "alteradores":
              miwa.sendMessage(
                from,
                {
                  image: { url: logoslink.logo },
                  caption: linguagem.alteradores(
                    prefix,
                    NomeDoBot,
                    sender,
                    NickDono,
                    packname
                  ),
                  contextInfo: {
                    mentionedJid: [sender],
                    externalAdReply: {
                      showAdAttribution: true,
                      mediaType: "VIDEO",
                      mediaUrl: null,
                      title: `🍁 ${NomeDoBot} 🍁\n》E T S  D E  V A G I N A S《`,
                      body: null,
                      sourceUrl: `https://www.flamengo.com.br/`,
                      thumbnail: fs.readFileSync(`./settings/lib/logo2.jpg`),
                    },
                  },
                },
                { quoted: info }
              );
              break;

            case "brincadeiras":
            case "brincadeira":
              if (isAudioMenu) {
                audiomen = await fs.readFileSync(
                  "./database/audios/menubrincadeira.mp3"
                );
                miwa.sendMessage(
                  from,
                  { audio: audiomen, mimetype: "audio/mpeg", ptt: true },
                  { quoted: info }
                );
              }
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              miwa.sendMessage(
                from,
                {
                  image: { url: logoslink.logo },
                  caption: linguagem.brincadeiras(
                    prefix,
                    NomeDoBot,
                    sender,
                    NickDono,
                    packname
                  ),
                  contextInfo: {
                    mentionedJid: [sender],
                    externalAdReply: {
                      showAdAttribution: true,
                      mediaType: "VIDEO",
                      mediaUrl: null,
                      title: `🍁 ${NomeDoBot} 🍁\n》E T S  D E  V A G I N A S《`,
                      body: null,
                      sourceUrl: `https://www.flamengo.com.br/`,
                      thumbnail: fs.readFileSync(`./settings/lib/logo2.jpg`),
                    },
                  },
                },
                { quoted: info }
              );
              break;

            case "menupremium":
            case "menuprem":
              miwa.sendMessage(
                from,
                {
                  image: { url: logoslink.logo },
                  caption: linguagem.menuprem(
                    prefix,
                    NomeDoBot,
                    sender,
                    NickDono,
                    packname
                  ),
                  contextInfo: {
                    mentionedJid: [sender],
                    externalAdReply: {
                      showAdAttribution: true,
                      mediaType: "VIDEO",
                      mediaUrl: null,
                      title: `🍁 ${NomeDoBot} 🍁\n》E T S  D E  V A G I N A S《`,
                      body: null,
                      sourceUrl: `https://www.flamengo.com.br/`,
                      thumbnail: fs.readFileSync(`./settings/lib/logo2.jpg`),
                    },
                  },
                },
                { quoted: info }
              );
              break;

            case "menurpg":
            case "menucity":
            case "rpg":
              miwa.sendMessage(
                from,
                {
                  image: { url: logoslink.logo },
                  caption: linguagem.menurpg(
                    prefix,
                    NomeDoBot,
                    sender,
                    NickDono,
                    packname
                  ),
                  contextInfo: {
                    mentionedJid: [sender],
                    externalAdReply: {
                      showAdAttribution: true,
                      mediaType: "VIDEO",
                      mediaUrl: null,
                      title: `🍁 ${NomeDoBot} 🍁\n》E T S  D E  V A G I N A S《`,
                      body: null,
                      sourceUrl: `https://www.flamengo.com.br/`,
                      thumbnail: fs.readFileSync(`./settings/lib/logo2.jpg`),
                    },
                  },
                },
                { quoted: info }
              );
              break;

            case "diversos":
            case "menufsl":
              miwa.sendMessage(
                from,
                {
                  image: { url: logoslink.logo },
                  caption: linguagem.menufsl(
                    prefix,
                    NomeDoBot,
                    sender,
                    NickDono,
                    packname
                  ),
                  contextInfo: {
                    mentionedJid: [sender],
                    externalAdReply: {
                      showAdAttribution: true,
                      mediaType: "VIDEO",
                      mediaUrl: null,
                      title: `🍁 ${NomeDoBot} 🍁\n》E T S  D E  V A G I N A S《`,
                      body: null,
                      sourceUrl: `https://www.flamengo.com.br/`,
                      thumbnail: fs.readFileSync(`./settings/lib/logo2.jpg`),
                    },
                  },
                },
                { quoted: info }
              );
              break;

            case "configurar-bot":
              await miwa.sendMessage(
                from,
                { text: getInfo.configbot(prefix) },
                { quoted: info }
              );
              break;

            case "destrava":
              if (!isPremium && !isGroupAdmins)
                return reply(enviar.msg.premium);
              miwa.sendMessage(
                from,
                { text: destrava(prefix) },
                { quoted: info }
              );
              break;

            case "perfil":
              try {
                ppimg = await miwa.profilePictureUrl(
                  `${sender.split("@")[0]}@c.us`,
                  "image"
                );
              } catch {
                ppimg = "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg";
              }
              try {
                var conselho =
                  palavrasc[Math.floor(Math.random() * palavrasc.length)];
                const nivelgado = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
                const nivelgado2 = [
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8",
                  "9",
                ];
                const nivelgador =
                  nivelgado[Math.floor(Math.random() * nivelgado.length)];
                const nivelgado2r =
                  nivelgado2[Math.floor(Math.random() * nivelgado2.length)];
                const puta = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
                const puta2 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
                const putar = puta[Math.floor(Math.random() * puta.length)];
                const putar2 = puta2[Math.floor(Math.random() * puta2.length)];
                const gostosura = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
                const gostosura2 = [
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8",
                  "9",
                ];
                const gostosurar =
                  gostosura[Math.floor(Math.random() * gostosura.length)];
                const gostosurar2 =
                  gostosura2[Math.floor(Math.random() * gostosura2.length)];
                gadop = `${Math.floor(Math.random() * 100)}`;
                const programa = Math.ceil(Math.random() * 10000);
                const dptr = `〘 🔥 𝐈𝐍𝐅𝐎 𝐏𝐄𝐑𝐅𝐈𝐋 💎 〙

● き⃟❈ Nome: ${pushname}
▬▭▬▭▬▭▬▭▬▭▬▭▬▭▬
● き⃟❈ Número: @${sender.split("@")[0]}
▬▭▬▭▬▭▬▭▬▭▬▭▬▭▬
● き⃟❈ Seu dispositivo: ${
                  info.key.id.length > 21
                    ? "Android"
                    : info.key.id.substring(0, 2) == "3A"
                    ? "iOS"
                    : "Zap zap web 😂☝🏼"
                }
▬▭▬▭▬▭▬▭▬▭▬▭▬▭▬
● き⃟❈ Nível de prostituição: ${putar}${putar2}%
▬▭▬▭▬▭▬▭▬▭▬▭▬▭▬
● き⃟❈ Nível de gostosura: *${gostosurar}${gostosurar2}%*
▬▭▬▭▬▭▬▭▬▭▬▭▬▭▬
● き⃟❈ Nível do gadometro: *${nivelgador}${nivelgado2r}%*
▬▭▬▭▬▭▬▭▬▭▬▭▬▭▬
● き⃟❈ Valor do programa: *R$${programa}*
▬▭▬▭▬▭▬▭▬▭▬▭▬▭▬

➻ *~_CONSELHO_~* :
${conselho}`;
                miwa.sendMessage(
                  from,
                  { image: { url: ppimg }, caption: dptr, mentions: [sender] },
                  { quoted: selo }
                );
              } catch (e) {
                console.log(e);
              }
              break;

            case "conselhobiblico":
            case "conselhosbiblico":
            case "conselhosb":
            case "conselhob":
              var conselhosb =
                conselhob[Math.floor(Math.random() * conselhob.length)];
              jr = `${tempo} ${pushname} 

Conselhos Bíblico para você: 

- ${conselhosb} 

> Bot: ${NomeDoBot}
> Grupo: ${groupName}`;
              miwa.sendMessage(
                from,
                { text: jr },
                { quoted: info, contextInfo: { mentionedJid: jr } }
              );
              break;

            case "tabela":
              miwa.sendMessage(
                from,
                { text: tabela(prefix, NomeDoBot) },
                { quoted: selo }
              );
              break;

            case "destrava2":
              if (!isPremium && !isGroupAdmins)
                return reply(enviar.msg.premium);
              miwa.sendMessage(
                from,
                { text: destrava2(prefix) },
                { quoted: info }
              );
              break;

            case "idiomas":
            case "idioma":
              txt = `  
IDIOMAS DO GTTS OU DO TRADUTOR

EXEMPLO :

>> ${prefix}gtts pt (texto)

o PT que coloquei, é a linguagem, então pode por no lugar as 2 letras que define a linguagem, iguais os exemplos e os idiomas abaixo.

'af': 'Afrikaans',
'sq': 'Albanian',
'ar': 'Arabic',
'hy': 'Armenian',
'ca': 'Catalan',
'hr': 'Croatian',
'cs': 'Czech',
'da': 'Danish',
'nl': 'Dutch',
'en': 'English',
'eo': 'Esperanto',
'fi': 'Finnish',
'fr': 'French',
'de': 'German',
'el': 'Greek',
'ht': 'Haitian Creole',
'hi': 'Hindi',
'hu': 'Hungarian',
'is': 'Icelandic',
'id': 'Indonesian',
'it': 'Italian',
'ja': 'Japanese',
'ko': 'Korean',
'la': 'Latin',
'lv': 'Latvian',
'mk': 'Macedonian',
'no': 'Norwegian',
'pl': 'Polish',
'pt': 'Portugues',
'ro': 'Romanian',
'ru': 'Russian',
'sr': 'Serbian',
'sk': 'Slovak',
'es': 'Spanish',
'sw': 'Swahili',
'sv': 'Swedish',
'ta': 'Tamil',
'th': 'Thai',
'tr': 'Turkish',
'vi': 'Vietnamese',
'cy': 'Welsh'
 
🔥${NomeDoBot}🔥`;

              miwa.sendMessage(from, { text: txt }, { quoted: selo });
              break;

            //========(FUNÇÕES-PREMIUM-AQUI)=======\\

            case "ler":
            case "ocr":
            case "lerfoto":
              if (!isPremium && !SoDono)
                return reply("Só usuário premium pode utilizar este comando..");
              if (
                ((isMedia && !info.message.videoMessage) || isQuotedImage) &&
                !q.length <= 1
              ) {
                encmedia = isQuotedImage
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .imageMessage
                  : info.message.imageMessage;
                rane = getRandom("." + (await getExtension(encmedia.mimetype)));
                buffimg = await getFileBuffer(encmedia, "image");
                fs.writeFileSync(rane, buffimg);
                media = rane;
                reply(mess.wait());
                await recognize(media, { lang: "eng+ind", oem: 1, psm: 3 })
                  .then((teks) => {
                    reply(teks.trim());
                    DLT_FL(media);
                  })
                  .catch((err) => {
                    reply(err.message);
                    DLT_FL(media);
                  });
              } else {
                reply("Somente fotos!");
              }
              break;

            case "premiumlist":
              if (!isPremium) return reply(enviar.msg.premium);
              tkks = "╭────*「 *PREMIUM USER👑* 」\n";
              for (let V of premium) {
                tkks += `│+  @${V.split("@")[0]}\n`;
              }
              tkks += `│+ Total : ${premium.length}\n╰──────*「 *${NomeDoBot}* 」*────`;
              mention(tkks.trim());
              break;

            case "gerarcpf":
              if (!isPremium) return reply(enviar.msg.premium);
              cp1 = `${Math.floor(Math.random() * 300) + 600}`;
              cp2 = `${Math.floor(Math.random() * 300) + 600}`;
              cp3 = `${Math.floor(Math.random() * 300) + 600}`;
              cp4 = `${Math.floor(Math.random() * 30) + 60}`;
              cpf = `${cp1}.${cp2}.${cp3}-${cp4}`;
              miwa.sendMessage(
                from,
                { text: `CPF gerado com sucesso : ${cpf}` },
                { quoted: info }
              );
              break;

            case "ddd":
              if (!isPremium) return reply(enviar.msg.premium);
              if (args.length < 1) return reply(`Use ${prefix + command} 81`);
              ddd = body.slice(5);
              ddds = await axios.get(
                `https://brasilapi.com.br/api/ddd/v1/${ddd}`
              );
              dddlist = `Lista de Cidades de ${ddds.data.state} com este DDD ${q}>\n\n`;
              for (let i = 0; i < ddds.data.cities.length; i++) {
                dddlist += `${i + 1} ⪧ *${ddds.data.cities[i]}*\n`;
              }
              miwa.sendMessage(from, { text: dddlist }, { quoted: info });
              break;

            //===========(ADMS-FUNÇÕES-AKI)=========\\

            case "calculadora":
            case "calcular":
            case "calc":
              rsp = q
                .replace("x", "*")
                .replace('"', ":")
                .replace(new RegExp("[()abcdefghijklmnopqrstwuvxyz]", "gi"), "")
                .replace("÷", "/");
              return reply(JSON.stringify(eval(rsp, null, "\t")));
              break;

            case "nomegp":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              blat = args.join(" ");
              miwa.groupUpdateSubject(from, `${blat}`);
              miwa.sendMessage(
                from,
                { text: "Sucesso, alterou o nome do grupo" },
                { quoted: info }
              );
              break;

            case "descgp":
            case "descriçãogp":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins) return reply(mess.onlyAdmins());
              blabla = args.join(" ");
              miwa.groupUpdateDescription(from, `${blabla}`);
              miwa.sendMessage(
                from,
                { text: "Sucesso, alterou a descrição do grupo" },
                { quoted: info }
              );
              break;

            case "setfotogp":
            case "fotogp":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (!isQuotedImage)
                return reply(`Use: ${prefix + command} <Marque uma foto>`);
              ftgp = isQuotedImage
                ? info.message.extendedTextMessage.contextInfo.quotedMessage
                    .imageMessage
                : info.message.imageMessage;
              rane = getRandom("." + (await getExtension(ftgp.mimetype)));
              buffimg = await getFileBuffer(ftgp, "image");
              fs.writeFileSync(rane, buffimg);
              medipp = rane;
              miwa.updateProfilePicture(from, { url: medipp });
              reply(`Foto do grupo alterada com sucesso`);
              break;

            case "linkgp":
            case "linkgroup":
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              linkgc = await miwa.groupInviteCode(from);
              reply("https://chat.whatsapp.com/" + linkgc);
              break;

            case "recrutar":
              if (!isGroupAdmins && !isPremium)
                return reply("Só ADM ou premium");
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              rcrt =
                q.replace(new RegExp("[()+-/ +/]", "gi"), "") +
                `@s.whatsapp.net`;
              linkgc = await miwa.groupInviteCode(from);
              miwa.sendMessage(rcrt, {
                image: { url: logoslink.logo },
                caption:
                  "Clique no símbolo a cima da imagem para entrar no grupo...",
                contextInfo: {
                  externalAdReply: {
                    title: "- Clique aqui para participar do grupo",
                    body: "",
                    reviewType: "PHOTO",
                    thumbnailUrl: logoslink.logo,
                    sourceUrl: `https://chat.whatsapp.com/` + linkgc,
                    mediaType: 2,
                  },
                },
              });
              reply(
                "Convite de recrutamento do usuário, foi enviado para o privado dele com sucesso..."
              );
              break;

            case "listatm":
              if (!SoDono) return reply(mess.onlyOwner());
              rgp = JSON.parse(fs.readFileSync("./database/func/tmgroup.json"));
              if (rgp.length == 0)
                return reply(
                  `Não contém nenhum registro de transmissão, utilize ${prefix}rgtm no grupo que deseja que ele receba as transmissões do bot..`
                );
              bl = "_-_-_-_-_-_-_-_-_-_-_-_-\n\n";
              for (i = 0; i < rgp.length; i++) {
                bl += `${i + 1} - ID: ${
                  rgp[i].id
                }\n\n- NOME DO USUÁRIO OU GRUPO: ${rgp[i].infonome}\n\n`;
              }
              reply(bl);
              break;

            case "rgtm":
              if (!SoDono) return reply(mess.onlyOwner());
              rgp = JSON.parse(fs.readFileSync("./database/func/tmgroup.json"));
              if (JSON.stringify(rgp).includes(from))
                return reply(
                  "Este grupo ja está registrado na lista de transmissão"
                );
              rgp.push({
                id: from,
                infonome: `${isGroup ? groupName : pushname}`,
              });
              fs.writeFileSync(
                "./database/func/tmgroup.json",
                JSON.stringify(rgp)
              );
              reply(
                "Registrado com sucesso, quando for realizada as transmissões, esse grupo/usuário estará na lista."
              );
              break;

            case "tirardatm":
              if (!SoDono) return reply(mess.onlyOwner());
              rgp = JSON.parse(fs.readFileSync("./database/func/tmgroup.json"));
              if (!JSON.stringify(rgp).includes(from))
                return reply(
                  "Este grupo não está registrado para ser tirado da lista de transmissão"
                );
              if (q.trim().length > 4) {
                var ustm = rgp.map((i) => i.id).indexOf(q.trim());
              } else {
                var ustm = rgp.map((i) => i.id).indexOf(from);
              }
              rgp.splice(ustm, 1);
              fs.writeFileSync(
                "./database/func/tmgroup.json",
                JSON.stringify(rgp)
              );
              reply("Grupo/Usuário tirado da lista de transmissão com sucesso");
              break;

            case "fazertm":
              if (!SoDono) return reply(mess.onlyOwner());
              var rgp = JSON.parse(
                fs.readFileSync("./database/func/tmgroup.json")
              );
              if (rgp.lengh == 0)
                return reply(
                  "Não contém nenhum grupo registrado para realizar transmissão"
                );
              await sleep(1000);
              var DFC = "";
              var rsm =
                info.message?.extendedTextMessage?.contextInfo?.quotedMessage;
              var pink = isQuotedImage
                ? rsm?.imageMessage
                : info.message?.imageMessage;
              var blue = isQuotedVideo
                ? rsm?.videoMessage
                : info.message?.videoMessage;
              var red = isQuotedMsg
                ? rsm?.textMessage
                : info.message?.textMessage;
              var purple = isQuotedDocument
                ? rsm?.documentMessage
                : info.message?.documentMessage;
              var yellow = isQuotedDocW
                ? rsm?.documentWithCaptionMessage?.message?.documentMessage
                : info.message?.documentWithCaptionMessage?.message
                    ?.documentMessage;
              var aud_d = isQuotedAudio ? rsm.audioMessage : "";
              var figu_d = isQuotedSticker ? rsm.stickerMessage : "";
              var red =
                isQuotedMsg &&
                !aud_d &&
                !figu_d &&
                !pink &&
                !blue &&
                !purple &&
                !yellow
                  ? "Transmissão Do Dono: " + rsm.conversation
                  : info.message?.conversation;
              var green =
                isQuotedMsg2 &&
                !aud_d &&
                !figu_d &&
                !red &&
                !pink &&
                !blue &&
                !purple &&
                !yellow
                  ? "Transmissão Do Dono: " + rsm.extendedTextMessage?.text
                  : info?.message?.extendedTextMessage?.text;
              if (pink) {
                var DFC = pink;
                pink.caption =
                  q.length > 1
                    ? "Transmissão Do Dono: " + q
                    : pink.caption.replace(
                        new RegExp(prefix + command, "gi"),
                        `TRANSMISSÃO DO DONO: ${NickDono}\n\n`
                      );
                pink.image = { url: pink.url };
              } else if (blue) {
                var DFC = blue;
                blue.caption =
                  q.length > 1
                    ? "Transmissão Do Dono: " + q
                    : blue.caption.replace(
                        new RegExp(prefix + command, "gi"),
                        `TRANSMISSÃO DO DONO: ${NickDono}\n\n`
                      );
                blue.video = { url: blue.url };
              } else if (red) {
                black = {};
                black.text = red.replace(
                  new RegExp(prefix + command, "gi"),
                  `TRANSMISSÃO DO DONO: ${NickDono}\n\n`
                );
                var DFC = black;
              } else if (!aud_d && !figu_d && green) {
                brown = {};
                brown.text = green.replace(
                  new RegExp(prefix + command, "gi"),
                  `TRANSMISSÃO DO DONO: ${NickDono}\n\n`
                );
                var DFC = brown;
              } else if (purple) {
                var DFC = purple;
                purple.document = { url: purple.url };
              } else if (yellow) {
                var DFC = yellow;
                yellow.caption =
                  q.length > 1
                    ? "Transmissão Do Dono: " + q
                    : yellow.caption.replace(
                        new RegExp(prefix + command, "gi"),
                        `TRANSMISSÃO DO DONO: ${NickDono}\n\n`
                      );
                yellow.document = { url: yellow.url };
              } else if (figu_d) {
                var DFC = figu_d;
                figu_d.sticker = { url: figu_d.url };
              } else if (aud_d) {
                var DFC = aud_d;
                aud_d.audio = { url: aud_d.url };
              }
              for (i = 0; i < rgp.length; i++) {
                miwa.sendMessage(rgp[i].id, DFC);
              }
              break;

            case "grupo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args[0] === "a") {
                reply(
                  `- Como pedido senhor(a), o grupo foi aberto com sucesso..`
                );
                miwa.groupSettingUpdate(from, "not_announcement");
              } else if (args[0] === "f") {
                reply(
                  `- Como pedido senhor(a), o grupo foi fechado com sucesso..`
                );
                miwa.groupSettingUpdate(from, "announcement");
              }
              break;

            case "grupoinfo":
            case "infogrupo":
            case "infogp":
            case "gpinfo":
            case "regras":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              try {
                var ppUrl = await miwa.profilePictureUrl(from, "image");
              } catch {
                var ppUrl = `https://telegra.ph/file/6ca032835ed7a16748b6f.jpg`;
              }
              miwa.sendMessage(
                from,
                {
                  image: { url: ppUrl },
                  caption: `*NOME* : ${groupName}\n*MEMBRO* : ${groupMembers.length}\n*ADMIN* : ${groupAdmins.length}\n*DESCRIÇÃO* : ${groupDesc}`,
                  thumbnail: null,
                },
                { quoted: info }
              );
              break;

            case "totag":
            case "cita":
            case "hidetag":
              if (!isGroup) return reply(enviar.msg.grupo);
              if (!isGroupAdmins && !SoDono) return reply(enviar.msg.adm);
              var DFC = "";
              var rsm =
                info.message?.extendedTextMessage?.contextInfo?.quotedMessage;
              var pink = isQuotedImage
                ? rsm?.imageMessage
                : info.message?.imageMessage;
              var blue = isQuotedVideo
                ? rsm?.videoMessage
                : info.message?.videoMessage;
              var purple = isQuotedDocument
                ? rsm?.documentMessage
                : info.message?.documentMessage;
              var yellow = isQuotedDocW
                ? rsm?.documentWithCaptionMessage?.message?.documentMessage
                : info.message?.documentWithCaptionMessage?.message
                    ?.documentMessage;
              var aud_d = isQuotedAudio ? rsm.audioMessage : "";
              var figu_d = isQuotedSticker ? rsm.stickerMessage : "";
              var red =
                isQuotedMsg &&
                !aud_d &&
                !figu_d &&
                !pink &&
                !blue &&
                !purple &&
                !yellow
                  ? rsm.conversation
                  : info.message?.conversation;
              var green =
                rsm?.extendedTextMessage?.text ||
                info?.message?.extendedTextMessage?.text;
              var MRC_TD = groupMembers.map((i) => i.id);
              if (pink && !aud_d && !purple) {
                var DFC = pink;
                pink.caption =
                  q.length > 1
                    ? "Marcação Do Adm: " + q
                    : pink.caption.replace(
                        new RegExp(prefix + command, "gi"),
                        `Marcação do Adm: ${pushname}\n\n`
                      );
                pink.image = { url: pink.url };
                pink.mentions = MRC_TD;
              } else if (blue && !aud_d && !purple) {
                var DFC = blue;
                blue.caption =
                  q.length > 1
                    ? "Marcação Do Adm: " + q.trim()
                    : blue.caption
                        .replace(
                          new RegExp(prefix + command, "gi"),
                          `Marcação do Adm: ${pushname}\n\n`
                        )
                        .trim();
                blue.video = { url: blue.url };
                blue.mentions = MRC_TD;
              } else if (red && !aud_d && !purple) {
                black = {};
                black.text = red
                  .replace(
                    new RegExp(prefix + command, "gi"),
                    `Marcação do Adm: ${pushname}\n\n`
                  )
                  .trim();
                black.mentions = MRC_TD;
                var DFC = black;
              } else if (!aud_d && !figu_d && green && !purple && !purple) {
                brown = {};
                brown.text = green
                  .replace(
                    new RegExp(prefix + command, "gi"),
                    `Marcação do Adm: ${pushname}\n\n`
                  )
                  .trim();
                brown.mentions = MRC_TD;
                var DFC = brown;
              } else if (purple) {
                var DFC = purple;
                purple.document = { url: purple.url };
                purple.mentions = MRC_TD;
              } else if (yellow && !aud_d) {
                var DFC = yellow;
                yellow.caption =
                  q.length > 1
                    ? "Marcação Do Adm: " + q.trim()
                    : yellow.caption
                        .replace(
                          new RegExp(prefix + command, "gi"),
                          `Marcação do Adm: ${pushname}\n\n`
                        )
                        .trim();
                yellow.document = { url: yellow.url };
                yellow.mentions = MRC_TD;
              } else if (figu_d && !aud_d) {
                var DFC = figu_d;
                figu_d.sticker = { url: figu_d.url };
                figu_d.mentions = MRC_TD;
              } else if (aud_d) {
                var DFC = aud_d;
                aud_d.audio = { url: aud_d.url };
                aud_d.mentions = MRC_TD;
                aud_d.ptt = true;
              }
              miwa.sendMessage(from, DFC).catch((e) => {
                console.log(e);
              });
              break;

            case "marcar":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              async function marcac() {
                bla = [];
                blad = `• Mencionando os membros comuns do grupo ou de uma comunidade. ${
                  !q ? "" : `\n💬 *Mensagem:* ${q}`
                }\n\n`;
                for (let i of somembros) {
                  blad += `» @${i.split("@")[0]}\n`;
                  bla.push(i);
                }
                blam = JSON.stringify(somembros);
                if (blam.length == 2)
                  return reply(
                    `❌️ Olá *${pushname}* - Não contém nenhum membro comum no grupo, é sim apenas administradores. `
                  );
                mentions(blad, bla, true);
              }
              marcac().catch((e) => {
                console.log(e);
              });
              break;

            case "marcar2":
              try {
                if (!isGroup) return reply(mess.onlyGroup());
                if (!isGroupAdmins) return reply(mess.onlyAdmins());
                if (q.includes(`${prefix}`))
                  return reply("Não pode utilizar comandos nesse comando.");
                members_id = [];
                teks = args.length > 1 ? body.slice(8).trim() : "";
                teks += "";
                for (let mem of groupMembers) {
                  teks += `╠➥ @${mem.id.split("@")[0]}\n`;
                  members_id.push(mem.id);
                }
                reply(teks);
              } catch {
                reply("ERROR!!");
              }
              break;

            case "marcarwa":
              try {
                if (!isGroup) return reply(mess.onlyGroup());
                if (!isGroupAdmins) return reply(mess.onlyAdmins());
                if (q.includes(`${prefix}`))
                  return reply("Não pode utilizar comandos nesse comando");
                members_id = [];
                teks = args.length > 1 ? body.slice(10).trim() : "";
                teks += "";
                for (let mem of groupMembers) {
                  teks += `╠➥ https://wa.me/${mem.id.split("@")[0]}\n`;
                  members_id.push(mem.id);
                }
                miwa.sendMessage(from, { text: teks }, { quoted: info });
              } catch {
                reply("ERROR!!");
              }
              break;

            case "reviverqr":
              if (!SoDono && !isnit) return;
              exec(`cd ${folderUserAuth} && rm -rf pre-key* sender* session*`);
              setTimeout(async () => {
                reply("Reiniciando..");
                setTimeout(async () => {
                  process.exit();
                }, 1200);
              }, 1000);
              break;

            case "reviver":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!SoDono) return reply("Comando Desativado pelo dono...");
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (
                info.message.extendedTextMessage === undefined ||
                info.message.extendedTextMessage === null
              )
                return reply("Marque uma mensagem do alvo!");
              sleep(5000);
              response2 = await miwa.groupParticipantsUpdate(
                from,
                [menc_prt],
                "add"
              );
              reply("Usuario Adicionado de volta ao grupo.");
              break;

            case "sairgp":
              if (isGroup && !SoDono && !info.key.fromMe)
                return reply("Este comando só o bot ou o dono pode executar..");
              try {
                miwa.groupLeave(from);
              } catch (erro) {
                reply(String(erro));
              }
              break;

            case "seradm":
              if (!SoDono && !isnit)
                return reply("Só dono pode executar este comando.");
              mentions(
                `@${
                  sender.split("@")[0]
                } Pronto - Agora você é um administrador..`,
                [sender],
                true
              );
              miwa.groupParticipantsUpdate(from, [sender], "promote");
              break;

            case "sermembro":
              if (!SoDono && !isnit)
                return reply("Só dono pode executar este comando.");
              mentions(
                `@${
                  sender.split("@")[0]
                } Pronto - Agora você é um membro comum novamente..`,
                [sender],
                true
              );
              miwa.groupParticipantsUpdate(from, [sender], "demote");
              break;

            case "rmadv":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!marc_tds)
                return reply(
                  "Cadê o alvo que você deseja retirar a advertência"
                );
              adv = dataGp[0].advertir.map((i) => i).indexOf(marc_tds);
              if (adv < 0)
                return reply(
                  `${tempo} ${pushname} esse usuário não tem nenhuma advertência`
                );
              dataGp[0].advertir.splice(adv, 1);
              setGp(dataGp);
              reply(
                `*Advertência retira com sucesso vossa majestade: ${pushname}*`
              );
              break;

            case "adv":
            case "advertir":
            case "adverter":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (menc_os2 == botNumber)
                return reply("Não pode advertir o próprio bot.");
              if (menc_os2 == nmrdn)
                return reply("Não pode advertir o próprio dono do bot.");
              if (groupAdmins.includes(menc_os2))
                return reply("Não é possível advertir adminstrador do grupo.");
              if (!JSON.stringify(groupMembers).includes(menc_os2))
                return reply(
                  "Não tem como advertir um usuário que não se encontra mais no grupo."
                );
              ADVT.push(menc_os2);
              setGp(dataGp);
              setTimeout(async () => {
                var dfqn = ADVT.filter((x) => x == menc_os2).length;
                var dfntxt = `Olá @${
                  menc_os2.split("@")[0]
                } - Você foi advertido ${dfqn}/3, tome cuidado com 3 advertências, você será removido...`;
                if (!dfntxt.includes("3/3")) {
                  if (!JSON.stringify(ADVT).includes(sender)) {
                    await sleep(1500);
                    mentions(dfntxt, [menc_os2]);
                  } else if (dfqn == 2) {
                    await sleep(1500);
                    mentions(dfntxt, [menc_os2]);
                  }
                } else {
                  miwa.sendMessage(from, {
                    text: `👋🏻 Adeus usuário: [ @${
                      menc_os2.split("@")[0]
                    } ] - Você completou 3 advertências, fale com a administração do grupo para ter noção do que foi ocorrido.`,
                    mentions: [menc_os2],
                  });
                  await sleep(1500);
                  miwa.groupParticipantsUpdate(from, [menc_os2], "remove");
                  var i = ADVT.indexOf(menc_os2);
                  ADVT.splice(i, 3);
                  setGp(dataGp);
                }
              }, 3000);
              break;

            //======≠(INFOS/EXECUÇÃO/DONO)≠=========\\

            case "apresentar":
            case "apr":
              inff = `Bem vindo(a) ao grupo : ${groupName}


👾 •𝑬𝑵𝑻𝑹𝑶𝑼 𝑺𝑬 𝑨𝑷𝑹𝑬𝑺𝑬𝑵𝑻𝑨•
📸 •F𝜣T𝜣
👻 •N𝜣ME
📌 •CID∆DE
🗓️ •ID∆DE
⚠️ •LEI∆ ∆S REGR∆S D𝜣 GRUP𝜣

*APROVEITE O GRUPO!*`;
              miwa.sendMessage(from, { text: inff }, { quoted: selo });
              break;

            case "papof":
            case "regraspp":
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              txtz = `【᯽𒋨📷:𝑆𝑒 𝑎𝑝𝑟𝑒𝑠𝑒𝑛𝑡𝑒𝑚 𝑙𝑖𝑥𝑜𝑠🌚»°】
𒋨·࣭࣪̇🔥ɴᴏᴍᴇ:
𒋨·࣭࣪̇🔥ɪᴅᴀᴅᴇ:
𒋨·࣭࣪̇🔥ʀᴀʙᴀ:
*Aᴘʀᴇsᴇɴᴛᴇ-sᴇ sᴇ ǫᴜɪsᴇʀ.*
𝙏𝘼𝙂𝙎➭᜔ׂ࠭ ⁸₈⁸|𝟖𝟖𝟖|𝟠𝟠𝟠| ེི⁸⁸⁸
 ──╌╌╌┈⊰★⊱┈╌╌╌┈─
❌ ENTROU NO 
GRUPO INTERAJA, NÃO PRECISAMOS DE ENFEITES,INATIVOS SERAO REMOVIDOS ❌* 

/﹋<,︻╦╤─ ҉ - -----💥 
/﹋ 🅴 🅱🅴🅼 🆅🅸🅽🅳🅾 🆂🅴🆄🆂 🅵🅸🅻🅷🅾🆂 🅳🅰 🅿🆄🆃🅰`;
              miwa.sendMessage(from, { text: txtz }, { quoted: selo });
              break;

            case "digt":
              bla = `🔥↯𝐉𝐀 𝐄𝐍𝐓𝐑𝐀 𝐃𝐈𝐆𝐈𝐓𝐀𝐍𝐃𝐎 𝚽𝐈 ↯°🌚💕
           ི⋮ ྀ🌴⏝ ི⋮ ྀ🚸 ི⋮ ྀ⏝🌴 ི⋮ ྀ 

🐼🍧↯𝖠𝖰𝖴𝖨 𝖵𝖮𝖢𝖤̂ 𝖯𝖮𝖣𝖤 𝖲𝖤𝖱↯🍧🐻
ㅤㅤㅤㅤ  ◍۫❀⃘࣭࣭࣭࣭ٜꔷ⃔໑࣭࣭ٜ⟅◌ٜ🛸◌⟆࣭࣭ٜ໑⃕ꔷ⃘࣭࣭࣭࣭ٜ❀۫◍ི࣭࣭࣭࣭ ུ
    【✔】ᴘʀᴇᴛᴀ👩🏾‍🦱 【✔】ʙʀᴀɴᴄᴀ👩🏼
    【✔】ᴍᴀɢʀᴀ🍧【✔】ɢᴏʀᴅᴀ🍿
    【✔】ᴘᴏʙʀᴇ🪙 【✔】ʀɪᴄᴀ💳
    【✔】ʙᴀɪᴀɴᴀ💌【✔】ᴍᴀᴄᴏɴʜᴇɪʀᴀ🍁
    【✔】ᴏᴛᴀᴋᴜ🧧【✔】ᴇ-ɢɪʀʟ🦄
    【✔】ʟᴏʟɪ🍭    【✔】ɢᴀᴅᴏ🐃
    【✔】ɢᴀʏ🏳️‍🌈     【✔】ʟᴇsʙɪᴄᴀ✂️
    【✔】ᴠᴀᴅɪᴀ💄  【✔】ᴛʀᴀᴠᴇᴄᴏ🍌
                【✔】ɴɪɴɢᴜᴇᴍ ʟɪɢᴀ📵
. ☪︎ • ☁︎. . •.
【 𝐕𝐄𝐌 𝐆𝐀𝐋𝐄𝐑𝐀, 𝐒𝐄 𝐃𝐈𝐕𝐄𝐑𝐓𝐈𝐑 𝐄 𝐅𝐀𝐙𝐄𝐑 𝐏𝐀𝐑𝐓𝐄 𝐃𝐀 𝐅𝐀𝐌𝐈𝐋𝐈𝐀.】🥂`;
              miwa.sendMessage(from, { text: bla }, { quoted: selo });
              break;

            case "sairdogp":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!q)
                return reply(
                  `Você deve visualizar o comando ${prefix}listagp e olhar de qual o grupo quer sair, e veja a numeração dele, e só digitar\nExemplo: ${prefix}sairdogp 0\nesse comando é para o bot sair do grupo que deseja..`
                );
              var getGroups = await miwa.groupFetchAllParticipating();
              var groups = Object.entries(getGroups)
                .slice(0)
                .map((entry) => entry[1]);
              var ingfoo = groups.map((v) => v);
              try {
                miwa.sendMessage(ingfoo[q].id, {
                  text: "Irei sair do grupo, por ordem do meu dono, adeus...",
                });
                setTimeout(() => {
                  miwa.groupLeave(ingfoo[q].id);
                }, 5000);
              } catch (erro) {
                reply(String(erro));
              }
              reply(
                "Pronto meu dono, sair do grupo que você queria, em caso de dúvidas acione o comando listagp pra verificar.."
              );
              break;

            case "listagp":
              if (!SoDono && !isnit && !info.key.fromMe)
                return reply("```SOMENTE MEU DONO LINDÃO```");
              var getGroups = await miwa.groupFetchAllParticipating();
              var groups = Object.entries(getGroups)
                .slice(0)
                .map((entry) => entry[1]);
              var ingfoo = groups.map((v) => v);
              ingfoo.sort((a, b) => a[0] < b.length);
              teks1 = `*LISTA DE GRUPOS*\n*Total de Grupos* : ${ingfoo.length}\n\n`;
              for (let i = 0; i < ingfoo.length; i++) {
                var metadt = await miwa.groupMetadata(ingfoo[i].id);
                try {
                  var linkdogp = await miwa.groupInviteCode(ingfoo[i].id);
                } catch {
                  var linkdogp = "Não foi possivel puxar o link";
                }
                teks1 += `• *Grupo* : ${i}\n• *Nome do Grupo* : ${
                  ingfoo[i].subject
                }\n• *Id do Grupo* : ${
                  ingfoo[i].id
                }\n• Link do grupo: https://chat.whatsapp.com/${linkdogp}\n• *Dono_Ofc*: ${
                  metadt.subjectOwner
                }\n• *Criado* : ${moment(`${ingfoo[i].creation}` * 1000)
                  .tz("America/Sao_Paulo")
                  .format("DD/MM/YYYY HH:mm:ss")}\n• *Total de Membros* : ${
                  ingfoo[i].participants.length
                }\n\n`;
              }
              reply(teks1);
              break;

            case "atividade":
            case "atividades":
              try {
                if (!isGroupAdmins && !issupre && !ischyt)
                  return reply(mess.onlyAdmins());
                if (isGroup && JSON.stringify(countMessage).includes(from)) {
                  var i6 = countMessage.map((i) => i.groupId).indexOf(from);
                  if (countMessage[i6].numbers.length == 0) return;
                  teks = `*Atividade dos membros do grupo:*\n\n`;
                  for (i = 0; i < countMessage[i6].numbers.length; i++) {
                    var i8 = countMessage[i6].numbers
                      .map((i) => i.id)
                      .indexOf(countMessage[i6].numbers[i].id);
                    var uscnt = countMessage[i6].numbers[i];
                    teks += `*• Membro:* @${
                      uscnt.id.split("@")[0]
                    }\n*• Comandos:* ${uscnt.cmd_messages}*\n*• Mensagens:* ${
                      uscnt.messages
                    }*\n*• Aparelho:* ${
                      uscnt.aparelho
                    }*\n\n----------------------------------\n\n`;
                  }
                  mention(teks);
                } else return reply("*Nada foi encontrado*");
              } catch (e) {
                console.log(e);
              }
              break;

            case "inativos":
            case "inativo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (q.match(/[a-z]/i) || !q)
                return reply(
                  `Exemplo: ${
                    prefix + command
                  } 0\nIsso mostrará quantas pessoas tem 0 mensagens no grupo, e se usar 5, vai mostrar quantos usuários tem 5 mensagens ou menos..`
                );
              var i2 = countMessage?.map((x) => x.groupId)?.indexOf(from);
              blue = [];
              for (i of countMessage[i2].numbers) {
                if (i.messages <= q.trim())
                  if (i.figus <= q.trim())
                    if (i.cmd_messages <= q.trim())
                      if (!groupAdmins.includes(i.id))
                        if (!numerodono.includes(i.id))
                          if (i.id != botNumber)
                            if (groupMembers.map((i) => i.id).includes(i.id))
                              blue.push(i.id);
              }
              for (i of countMessage[i2].numbers) {
                if (!groupMembers.map((i) => i.id).includes(i.id))
                  if (i.id.length > 5) blue.push(i.id);
              }
              if (blue.length == 0)
                return reply(`Não tem pessoas com ${q}  mensagens..`);
              bli = `Usuários com ${q.trim()} mensagem(ns) pra baixo..\n\n`;
              for (ac = 0; ac < blue.length; ac++) {
                bli += `${ac + 1} - Usuário: @${blue[ac].split("@")[0]}\n\n`;
              }
              mention(bli);
              break;

            case "banghost":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!SoDono) return reply(mess.onlyOwner());
              if (q.match(/[a-z]/i) || !q || q.length > 3)
                return reply(
                  `Digite a partir de quantas mensagens pra baixo você deseja remover (que não interaje no grupo).\nExemplo: ${
                    prefix + command
                  } 0`
                );
              var i2 = countMessage?.map((x) => x.groupId)?.indexOf(from);
              blue = [];
              for (i of countMessage[i2].numbers) {
                if (i.messages <= Number(q.trim()))
                  if (i.figus <= Number(q.trim()))
                    if (i.cmd_messages <= Number(q.trim()))
                      if (!groupAdmins.includes(i.id))
                        if (!numerodono.includes(i.id))
                          if (i.id != botNumber)
                            if (groupMembers.map((i) => i.id).includes(i.id))
                              blue.push(i.id);
              }
              for (i of countMessage[i2].numbers) {
                if (!groupMembers.map((i) => i.id).includes(i.id))
                  if (i.id.length > 5) blue.push(i.id);
              }
              if (blue.length == 0)
                return reply(
                  `Não tem mais pessoas com ${q.trim()} mensagem(ns) para eu remover..`
                );
              for (i = 0; i < blue.length; i++) {
                await sleep(1000);
                miwa.groupParticipantsUpdate(from, [blue[i]], "remove");
              }
              break;

            case "correio":
              txt = body.slice(10);
              txtt = args.join(" ");
              txt1 = txt.split("/")[0];
              txt2 = txtt.split("/")[1];
              if (!txt) return reply("Cade o número da pessoa?");
              if (!txtt) return reply("Cade a mensagem do correio??");
              if (txt.includes("-"))
                return reply(
                  "Tem que ser o número junto sem +, e não pode tá separado da /"
                );
              if (txtt.includes("+"))
                return reply(
                  "Tem que ser o número junto sem +, e não pode tá separado da /"
                );
              if (!txtt.includes("/"))
                return reply(
                  `Exemplo: ${prefix}correio 558198923680/Oi Amor, sdds`
                );
              bla = `╭┄━┄━┄━┄━┄━╮
┞┧ ⸙. ͎۪۫          💌  ː͡₊ꞋꞌꞋꞌ
┞┧Correio anônimo. 
┞┧Msg: ${txt2}
┞┧
╰┄━┄━┄━┄━┄━╮`;
              miwa.sendMessage(`${txt1}@s.whatsapp.net`, { text: bla });
              break;

            case "nome-bot":
              if (!SoDono && !isnit && !info.key.fromMe)
                return reply(mess.onlyOwner());
              NomeDoBot = q.trim();
              setting.NomeDoBot = q.trim();
              fs.writeFileSync(
                "./settings/settings.json",
                JSON.stringify(setting, null, 2)
              );
              reply(`O nome do seu bot foi alterado com sucesso para : ${q}`);
              break;

            case "nick-dono":
              if (!SoDono && !isnit && !info.key.fromMe)
                return reply(mess.onlyOwner());
              setting.NickDono = q.trim();
              NickDono = setting.NickDono;
              fs.writeFileSync(
                "./settings/settings.json",
                JSON.stringify(setting, null, 2)
              );
              reply(`O Nick Do Dono foi configurado para : ${q}`);
              break;

            case "numero-dono":
              if (!SoDono && !isnit && !info.key.fromMe)
                return reply(mess.onlyOwner());
              if (q.match(/[a-z]/i)) return reply("É apenas números..");
              reply(`O número dono foi configurado com sucesso para : ${q}`);
              setting.numerodono = q
                .trim()
                .replace(new RegExp("[()+-/ +/]", "gi"), "");
              numerodono[0] = setting.numerodono;
              numerodn = setting.numerodono;
              numerodono_ofc = setting.numerodono;
              fs.writeFileSync(
                "./settings/settings.json",
                JSON.stringify(setting, null, 2)
              );
              break;

            case "prefixo-bot":
            case "setprefix":
              if (args.length < 1) return;
              if (!SoDono && !isnit && !info.key.fromMe)
                return reply(mess.onlyOwner());
              setting.prefix = q;
              fs.writeFileSync(
                "./settings/settings.json",
                JSON.stringify(setting, null, 2)
              );
              reply(
                `O prefixo foi alterado com sucesso para: ${setting.prefix}`
              );
              break;

            case "fotomenu":
            case "fundomenu":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!isQuotedImage) return reply("Marque uma imagem");
              if (
                ((isMedia && !info.message.videoMessage) || isQuotedImage) &&
                !q.length <= 1
              ) {
                reply(
                  `- Calma ae amigo(a), já estou trocando a foto do menu para você..`
                );
                boij = isQuotedImage
                  ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                      .message.extendedTextMessage.contextInfo.message
                      .imageMessage
                  : info.message.imageMessage;
                owgi = await getFileBuffer(boij, "image");
                res = await uploader.imgur(owgi);
                logoslink.logo.splice([]);
                fs.writeFileSync(
                  "./settings/logos.json",
                  JSON.stringify(logoslink, null, 2)
                );
                setTimeout(() => {
                  logoslink.logo.push(res);
                  fs.writeFileSync(
                    "./settings/logos.json",
                    JSON.stringify(logoslink, null, 2)
                  );
                  reply(
                    `A foto do menu foi alterada com sucesso para: ${logoslink.logo}`
                  );
                }, 1000);
              } else {
                reply(
                  `Mande uma imagem com o comando ${
                    prefix + command
                  } para trocar a foto de todos menu..`
                );
              }
              break;

            case "privphotobot":
              {
                if (!SoDono) return reply(mess.onlyOwner());
                if (!q)
                  return reply(
                    `• ${
                      prefix + command
                    } all - Minha foto de perfil visível a todos que entrarem em contato comigo.\n\n• ${
                      prefix + command
                    } cntt - Minha foto de perfil visível somenre aos meus contatos salvos.\n\n• ${
                      prefix + command
                    } ngm - Ninguém verá a minha foto de perfil, ou seja, estará oculta a todos.`
                  );
                if (args[0] === "all") {
                  reply(`- A minha foto do perfil agora está visível à todos.`);
                  await miwa.updateProfilePicturePrivacy("all");
                } else if (args[0] === "cntt") {
                  reply(
                    `- A minha foto do perfil agora está visível somente aos meus contatos.`
                  );
                  await miwa.updateProfilePicturePrivacy("contacts");
                } else if (args[0] === "ngm") {
                  reply(
                    `- A foto do meu perfil está privada a todos, até mesmo ao senhor mestre.`
                  );
                  await miwa.updateProfilePicturePrivacy("none");
                }
              }
              break;

            case "setprefix":
              if (args.length < 1) return;
              if (!SoDono && !isnit && !issupre && !ischyt && !info.key.fromMe)
                return reply(mess.onlyOwner());
              prefix = args[0];
              setting.prefix = prefix;
              fs.writeFileSync(
                "./settings/settings.json",
                JSON.stringify(setting, null, 2)
              );
              reply(`O prefixo foi alterado com sucesso para: ${prefix}`);
              break;

            case "nomegp":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              miwa.groupUpdateSubject(from, `${body.slice(9)}`);
              miwa.sendMessage(
                from,
                { text: "Sucesso, alterou o nome do grupo" },
                { quoted: info }
              );
              break;

            case "fotobot":
              if (!SoDono && !isnit && !issupre && !ischyt && !info.key.fromMe)
                return reply(mess.onlyOwner());
              if (!isQuotedImage)
                return reply(
                  `Envie fotos com legendas ${prefix}fotobot ou tags de imagem que já foram enviadas`
                );
              buff = await getFileBuffer(
                info.message.extendedTextMessage.contextInfo.quotedMessage
                  .imageMessage,
                "image"
              );
              miwa.updateProfilePicture(botNumber, buff);
              reply("Obrigado pelo novo perfil😗");
              break;

            case "clonar":
              if (!SoDono && !isnit && !issupre && !ischyt)
                return reply("Você quem é o proprietário?");
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply(
                  "Marque a pessoa que você quer clonar\n\n*EXEMPLO:* clone @"
                );
              if (!menc_jid2[0] || menc_jid2[1])
                return reply(
                  "Marque o @ do usuário para roubar a foto do perfil dele, para a do bot.."
                );
              let { jid, id, notify } = groupMembers.find(
                (x) => x.id === menc_jid2[0]
              );
              try {
                pp = await miwa.profilePictureUrl(id);
                buffer = await getBuffer(pp);
                miwa.updateProfilePicture(botNumber, buffer);
                mentions(
                  `Foto do perfil atualizada com sucesso, usando a foto do perfil @${
                    id.split("@")[0]
                  }`,
                  [id],
                  true
                );
              } catch (e) {
                reply("Putz, deu erro, a pessoa deve estar sem foto 😔");
              }
              break;

            case "envmsg":
              if (!SoDono && !isnit) return;
              var [tx1, tx2] = q.split("/");
              miwa.sendMessage(tx1, { text: tx2 });
              break;

            case "bcgp":
            case "bcgc":
              if (!SoDono && !isnit && !issupre && !ischyt && !info.key.fromMe)
                return reply(mess.onlyOwner());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!q) return reply("Cade o texto?");
              var nomor = info.participant;
              if ((isMedia && !info.message.videoMessage) || isQuotedImage) {
                encmedia = await getFileBuffer(
                  info.message.extendedTextMessage.contextInfo.quotedMessage
                    .imageMessage,
                  "image"
                );
                for (i = 0; i < groupMembers.length; i++) {
                  await sleep(2000);
                  miwa.sendMessage(
                    groupMembers[i].id,
                    { image: buff },
                    {
                      caption: `*「 TRANSMISSÃO 」*\n\nGrupo: ${groupName}\n Número: wa.me/${
                        sender.split("@")[0]
                      }\nMensagem : ${body.slice(6)}`,
                    }
                  );
                }
                reply("Transmissão enviada..");
              } else {
                for (i = 0; i < groupMembers.length; i++) {
                  await sleep(2000);
                  sendMess(
                    groupMembers[i].id,
                    `*「 TRANSMISSÃO 」*\n\nGrupo : ${groupName}\nNúmero : wa.me/${
                      sender.split("@")[0]
                    }\nMensagem : ${body.slice(6)}`
                  );
                }
                reply("Grupo de transmissão bem-sucedido");
              }
              break;

            case "dono1":
              if (args.length < 1) return;
              if (!SoDono && !isnit && !issupre && !ischyt)
                return reply(mess.onlyOwner());
              nescessario.dono1 = q.trim();
              dono1 = nescessario.dono1;
              setNes(nescessario);
              reply(
                `Agora contem um segundo dono(a) alterado com sucesso para: ${q}`
              );
              break;

            case "dono2":
              if (args.length < 1) return;
              if (!SoDono && !isnit && !issupre && !ischyt)
                return reply(mess.onlyOwner());
              nescessario.dono2 = q.trim();
              dono2 = nescessario.dono2;
              setNes(nescessario);
              reply(
                `Agora contem um segundo dono(a) alterado com sucesso para: ${dono2}`
              );
              break;

            case "dono3":
              if (args.length < 1) return;
              if (!SoDono && !isnit && !issupre && !ischyt)
                return reply(mess.onlyOwner());
              nescessario.dono3 = q.trim();
              dono3 = nescessario.dono3;
              setNes(nescessario);
              reply(
                `Agora contem um terceiro dono(a) alterado com sucesso para: ${dono3}`
              );
              break;

            case "dono4":
              if (args.length < 1) return;
              if (!SoDono && !isnit && !issupre && !ischyt)
                return reply(mess.onlyOwner());
              nescessario.dono4 = q.trim();
              dono4 = nescessario.dono4;
              setNes(nescessario);
              reply(
                `Agora contem um quarto dono(a) alterado com sucesso para: ${dono4}`
              );
              break;

            case "dono5":
              if (args.length < 1) return;
              if (!SoDono && !isnit && !issupre && !ischyt)
                return reply(mess.onlyOwner());
              nescessario.dono5 = q.trim();
              dono5 = nescessario.dono5;
              setNes(nescessario);
              reply(
                `Agora contem um quinto dono(a) alterado com sucesso para: ${dono5}`
              );
              break;

            case "dono6":
              if (args.length < 1) return;
              if (!SoDono && !isnit && !issupre && !ischyt)
                return reply(mess.onlyOwner());
              nescessario.dono6 = q.trim();
              dono6 = nescessario.dono6;
              setNes(nescessario);
              reply(
                `Agora contem um quinto dono(a) alterado com sucesso para: ${dono6}`
              );
              break;

            case "getquoted":
              reply(
                JSON.stringify(
                  info.message.extendedTextMessage.contextInfo,
                  null,
                  3
                )
              );
              break;

            case "donos":
              p = `[ Lista de donos do bot ${NomeDoBot} ] 

Dono Oficial do bot: ${numerodono_ofc}

- [ 1 ] ${dono1}\n- [ 2 ] ${dono2}\n- [ 3 ] ${dono3}\n- [ 4 ] ${dono4}\n- [ 5 ] ${dono5}\n- [ 6 ] ${dono6}`;
              reply(p);
              break;

            case "admins":
            case "listadmins":
            case "listaadmins":
              if (!isGroup) return reply(mess.onlyGroup());
              ytb = `Lista de admins do grupo *${groupMetadata.subject}*\nTotal : ${groupAdmins.length}\n\n`;
              no = 0;
              for (let admon of groupAdmins) {
                no += 1;
                ytb += `[${no.toString()}] @${admon.split("@")[0]}\n`;
              }
              mentions(ytb, groupAdmins, true);
              break;

            case "criartabela":
            case "criartbl":
            case "criartab":
              if (!isGroupAdmins && !SoDono)
                return reply("Só adm ou dono pode utilizar este comando.");
              if (!q.trim())
                return reply(
                  "Digite o que deseja colocar na tabela do grupo.."
                );
              msgz = args.join(" ");
              msgtmpol = moment.tz("America/Sao_Paulo").format("HH:mm:ss");
              datinhaofc = moment.tz("America/Sao_Paulo").format("DD/MM/YY");
              fs.writeFileSync(
                `./database/func/tabela/tabela-${from}.json`,
                JSON.stringify(
                  { Horario: msgtmpol, Data: datinhaofc, Tabela: msgz },
                  null,
                  2
                )
              );
              reply(`Tabela do grupo foi criada com sucesso..`);
              break;

            case "tabelagp":
            case "tabeladogp":
            case "tabelinha":
              if (
                !fs.existsSync(`./database/func/tabela/tabela-${from}.json`)
              ) {
                reply(
                  `Cade a tabela, cria ela com o comando\nExemplo : ${prefix}criartabela lindas do grupo : e etc ..`
                );
              }
              const tabelagpofc = JSON.parse(
                fs.readFileSync(`./database/func/tabela/tabela-${from}.json`)
              );
              blity = `- ⏰ Horário que criou a Tabela : ${tabelagpofc.Horario}\n\n- 🗓️ Data que criou a Tabela : ${tabelagpofc.Data}\n\n - Tabela : ${tabelagpofc.Tabela}`;
              mention(blity);
              break;

            case "ativo":
            case "on":
            case "voltei":
              if (!isGroupAdmins && !SoDono)
                return reply("Comando apenas para administradores ou dono..");
              if (DonoOficial) {
                if (
                  fs.existsSync(
                    "./database/func/afk/afk-@" + numerodono_ofc + ".json"
                  )
                ) {
                  DLT_FL(
                    "./database/func/afk/afk-@" + numerodono_ofc + ".json"
                  );
                  reply("Bem vindo de volta, agora você está online 🙂");
                } else {
                  reply("Você não registrou nenhuma mensagem de ausência...");
                }
              } else if (isGroupAdmins) {
                if (!JSON.stringify(dataGp[0].ausentes).includes(sender))
                  return reply("Não há nenhum registro de ausência sua..");
                dataGp[0].ausentes.splice(
                  dataGp[0].ausentes.map((x) => x.id).indexOf(sender),
                  1
                );
                setGp(dataGp);
                reply("Registro de ausência tirada com sucesso...");
              }
              break;

            case "ausente":
            case "off":
            case "afk":
              if (!isGroupAdmins && !SoDono)
                return reply("Comando apenas para administradores ou dono..");
              if (DonoOficial) {
                msgtmp = moment.tz("America/Sao_Paulo").format("HH:mm:ss");
                fs.writeFileSync(
                  `./database/func/afk/afk-@${setting.numerodono.replace(
                    new RegExp("[()+-/ +/]", "gi"),
                    ""
                  )}.json`,
                  JSON.stringify(
                    {
                      Ausente_Desde: msgtmp,
                      Motivo_Da_Ausência: q,
                    },
                    null,
                    2
                  )
                );
                reply(`Mensagem de ausência criada com sucesso...`);
              } else if (isGroupAdmins) {
                if (!q.trim())
                  return reply(
                    `Digite a mensagem de ausência, Exemplo: ${
                      prefix + command
                    } Estou tomando banho`
                  );
                if (!JSON.stringify(dataGp[0].ausentes).includes(sender)) {
                  dataGp[0].ausentes.push({ id: sender, msg: q.trim() });
                  setGp(dataGp);
                  reply(
                    "Mensagem de ausência criada com sucesso..\n\nSe deseja Desativar a mensagem de ausência use o comando ativo"
                  );
                } else {
                  dataGp[0].ausentes[
                    dataGp[0].ausentes.map((i) => i.id).indexOf(sender)
                  ].msg = q.trim();
                  setGp(dataGp);
                  reply(
                    "Mensagem de ausência alterada com sucesso..\n\nSe deseja Desativar a mensagem de ausência use o comando ativo"
                  );
                }
              } else {
                return reply(
                  "Comando apenas para administradores e dono do bot.."
                );
              }
              break;

            case "serpremium":
            case "serprem":
              if (!SoDono && !isnit && !issupre && !ischyt && !info.key.fromMe)
                return reply(mess.onlyOwner());
              premium.push(nmrdn);
              fs.writeFileSync(
                "./settings/media/premium.json",
                JSON.stringify(premium)
              );
              mention(
                `Pronto @${numerodono_ofc} você foi adicionado na lista premium.`
              );
              break;

            case "reagir":
              const reactionMessage = {
                react: {
                  text: "💖",
                  key: info.key,
                },
              };
              sendMsg = await miwa.sendMessage(from, reactionMessage);
              break;

            case "addpremium":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!SoDono && !isnit && !issupre && !ischyt && !info.key.fromMe)
                return reply(mess.onlyOwner());
              if (!marc_tds)
                return reply(
                  "Marque o usuário do grupo ou digite o número do usuário ou marque a mensagem dele.."
                );
              bla = premium.includes(marc_tds);
              if (bla) return reply("*Este número já está incluso..*");
              premium.push(marc_tds);
              fs.writeFileSync(
                "./settings/media/premium.json",
                JSON.stringify(premium)
              );
              miwa.sendMessage(
                from,
                {
                  text: `👑@${
                    marc_tds.split("@")[0]
                  } foi adicionado à lista de usuários premium com sucesso👑`,
                  mentions: [marc_tds],
                },
                { quoted: info }
              );
              break;

            case "delpremium":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!SoDono && !isnit && !issupre && !ischyt && !info.key.fromMe)
                return reply(mess.onlyOwner());
              if (!marc_tds)
                return reply(
                  "Marque o usuário do grupo ou digite o número do usuário ou marque a mensagem dele.."
                );
              if (!premium.includes(marc_tds))
                return reply(
                  "*Este número não está incluso na lista premium..*"
                );
              pesquisar = marc_tds;
              processo = premium.indexOf(pesquisar);
              while (processo >= 0) {
                premium.splice(processo, 1);
                processo = premium.indexOf(pesquisar);
              }
              fs.writeFileSync(
                "./settings/media/premium.json",
                JSON.stringify(premium)
              );
              miwa.sendMessage(
                from,
                {
                  text: ` @${
                    marc_tds.split("@")[0]
                  } foi tirado da lista premium com sucesso..`,
                  mentions: [marc_tds],
                },
                { quoted: info }
              );
              break;

            case "limpar":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              clear = `🗑️\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n🗑️\n❲❗❳ *Lɪᴍᴘᴇᴢᴀ ᴅᴇ Cʜᴀᴛ Cᴏɴᴄʟᴜɪ́ᴅᴀ* ✅`;
              miwa.sendMessage(
                from,
                { text: clear },
                {
                  quoted: selo,
                  contextInfo: { forwardingScore: 500, isForwarded: true },
                }
              );
              break;

            case "doc":
            case "docfake":
              try {
                sprd = "|";
                if (!q)
                  return reply(
                    `${
                      prefix + command
                    } exemplo${sprd}500${sprd}apk\n\nOs tipos aceitos por enquanto são: pdf > xml > zip > jpg > ppt > apk > txt > aac > pptx > aac > m4a > mp4 > mp3 > svg > png`
                  );
                kls = args.join(" ");
                let nomedoc = kls.split(sprd)[0] || `${setting.NomeDoBot}`;
                let peso = kls.split(sprd)[1] * 1000000 || "1000000";
                let mimetyp = kls.split(sprd)[2].replace(" ", "") || "gif";
                let thumbc = kls.split(sprd)[3] || "https://google.com/";
                if (mimetyp.toLowerCase() == "pdf") mimetyp = "application/pdf";
                if (mimetyp.toLowerCase() == "apk")
                  mimetyp = "application/vnd.android.package-archive";
                if (mimetyp.toLowerCase() == "aac") mimetyp = "audio/aac";
                if (mimetyp.toLowerCase() == "xml") mimetyp = "application/xml";
                if (mimetyp.toLowerCase() == "zip") mimetyp = "application/zip";
                if (mimetyp.toLowerCase() == "jpg") mimetyp = "image/jpeg";
                if (mimetyp.toLowerCase() == "ppt")
                  mimetyp = "application/vnd.ms-powerpoint";
                if (mimetyp.toLowerCase() == "pptx")
                  mimetyp =
                    "application/vnd.openxmlformats-officedocument.presentationml.presentation";
                if (mimetyp.toLowerCase() == "mp4") mimetyp = "video/mp4";
                if (mimetyp.toLowerCase() == "m4a") mimetyp = "audio/mpeg";
                if (mimetyp.toLowerCase() == "mp3") mimetyp = "audio/mpeg";
                if (mimetyp.toLowerCase() == "gif") mimetyp = "image/gif";
                if (mimetyp.toLowerCase() == "png") mimetyp = "image/png";
                if (mimetyp.toLowerCase() == "svg") mimetyp = "image/svg+xml";
                if (mimetyp.toLowerCase() == "txt") mimetyp = "text/plain";
                let Messagemdoc = {
                  document: fs.readFileSync("./database/assets/docf.txt"),
                  mimetype: mimetyp,
                  jpegThumbnail: await getBuffer(thumbc),
                  fileName: nomedoc,
                  fileLength: peso,
                  headerType: 4,
                  contextInfo: {
                    forwardingScore: 999,
                    isForwarded: true,
                  },
                };
                miwa.sendMessage(from, Messagemdoc, { quoted: selo });
              } catch (err) {
                console.log(err);
                reply(`Ops ocorreu um erro`);
              }
              break;

            case "deletar":
            case "delete":
            case "del":
            case "d":
              if (!isGroupAdmins && !isPremium) return reply(mess.onlyAdmins());
              if (!menc_prt)
                return reply(
                  "Marque a mensagem do usuário que deseja apagar, do bot ou de alguém.."
                );
              miwa.sendMessage(from, {
                delete: {
                  remoteJid: from,
                  fromMe: false,
                  id: info.message.extendedTextMessage.contextInfo.stanzaId,
                  participant: menc_prt,
                },
              });
              break;

            case "fundobemvindo":
            case "fundobv":
              if (!SoDono && !isnit && !info.key.fromMe)
                return reply(mess.onlyOwner());
              if (!isQuotedImage) return reply("Marque uma imagem");
              reply(
                "Você deve marcar uma imagem com esse comando, se não for de primeira, tente novamente, ok? "
              );
              if (
                ((isMedia && !info.message.videoMessage) ||
                  isQuotedImage ||
                  isQuotedVideo) &&
                !q.length <= 1
              ) {
                boij =
                  isQuotedImage || isQuotedVideo
                    ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                        .message.extendedTextMessage.contextInfo.message
                        .imageMessage
                    : info;
                owgi = await getFileBuffer(boij, "image");
                res = await uploader.imgur(owgi);
                fundo1 = res;
                nescessario.fundo1 = fundo1;
                setNes(nescessario);
                reply(
                  `A imagem de bem vindo foi alterado com sucesso para: ${fundo1}`
                );
              }
              break;

            case "fundosaiu":
              if (!SoDono && !isnit && !info.key.fromMe)
                return reply(mess.onlyOwner());
              if (!isQuotedImage) return reply("Marque uma imagem");
              reply(
                "Você deve marcar uma imagem com esse comando, se não for de primeira, tente novamente, ok? "
              );
              if (
                ((isMedia && !info.message.videoMessage) ||
                  isQuotedImage ||
                  isQuotedVideo) &&
                !q.length <= 1
              ) {
                boij =
                  isQuotedImage || isQuotedVideo
                    ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                        .message.extendedTextMessage.contextInfo.message
                        .imageMessage
                    : info;
                owgi = await getFileBuffer(boij, "image");
                res = await uploader.imgur(owgi);
                fundo2 = res;
                nescessario.fundo2 = fundo2;
                setNes(nescessario);
                reply(
                  `A imagem de saiu foi alterado com sucesso para: ${fundo2}`
                );
              }
              break;

            case "antiligar":
            case "antiligacao":
            case "antiligação":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!isAnticall) {
                nescessario.anticall = true;
                setNes(nescessario);
                reply(
                  `O anti ligação foi ativado com sucesso. Caso alguém efetue uma ligação para o bot será bloqueado.`
                );
              } else if (isAnticall) {
                nescessario.anticall = false;
                setNes(nescessario);
                reply("O anti ligação foi desativado com sucesso.");
              }
              break;

            case "antipv":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!isAntiPv) {
                nescessario.antipv = true;
                setNes(nescessario);
                reply(
                  `O anti privado foi ativado com sucesso. Caso alguém envie mensagem para o bot, será bloqueado!`
                );
              } else if (isAntiPv) {
                nescessario.antipv = false;
                setNes(nescessario);
                reply("O anti privado foi desativado com sucesso.");
              }
              break;

            case "antipv2":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!isAntiPv2) {
                nescessario.banChats = true;
                setNes(nescessario);
                reply(
                  "Sucesso! Foi alterado para modo antipv, pv não poderá ser utilizado, mas não bloquearei o usuário, só flodarei mensagem a cada mensagem dele."
                );
              } else if (isAntiPv2) {
                nescessario.banChats = false;
                setNes(nescessario);
                reply(
                  "Modo anti privado que não bloqueia foi desligado, pv liberado com scuesso."
                );
              }
              break;

            case "block":
              if (!SoDono && !isnit && !issupre && !ischyt && !info.key.fromMe)
                return reply(mess.onlyOwner());
              if (!q.length > 6)
                return reply(
                  "Marque o @ do usuário que deseja bloquear de ele utilizar os comandos, ou o número da fórma que copiar..."
                );
              var blcp =
                q.replace(new RegExp("[()+-/ @+/]", "gi"), "") +
                "@s.whatsapp.net";
              var numblc = ban.indexOf(blcp);
              if (numblc >= 0)
                return reply(
                  "*Esse número já esta incluso na lista de bloqueio.*"
                );
              ban.push(blcp);
              fs.writeFileSync(
                "./database/usuarios/banned.json",
                JSON.stringify(ban)
              );
              banned = `🚫 @${
                blcp.split("@")[0]
              } foi banido e não poderá mais usar os comandos do bot 🚫`;
              miwa.sendMessage(from, { text: banned, mentions: [blcp] });
              break;

            case "unblock":
              if (!SoDono && !isnit && !issupre && !ischyt && !info.key.fromMe)
                return reply(mess.onlyOwner());
              if (!q.length > 6)
                return reply(
                  "Marque o @ do usuário que deseja desbloquear pra ele utilizar os comandos, ou o número da fórma que copiar..."
                );
              var blcp =
                q.replace(new RegExp("[()+-/ @+/]", "gi"), "") +
                "@s.whatsapp.net";
              var numbl = ban.indexOf(blcp);
              if (numbl < 0)
                return reply(
                  "*Esse número não está incluso na lista de bloqueados.*"
                );
              pesquisar = blcp;
              processo = ban.indexOf(pesquisar);
              while (processo >= 0) {
                ban.splice(processo, 1);
                processo = ban.indexOf(pesquisar);
              }
              fs.writeFileSync(
                "./database/usuarios/banned.json",
                JSON.stringify(ban)
              );
              unbanned = `✅️ @${
                blcp.split("@")[0]
              } foi desbanido e poderá novamente usar os comandos do bot ✅️`;
              miwa.sendMessage(from, { text: unbanned, mentions: [blcp] });
              break;

            case "blocklist":
              jrc =
                "Lista de números bloqueados de usar meus comandos, *por meio do julgamento do meu proprietário:*\n\n";
              for (let benn of ban) {
                jrc += `▢ 彡 @${benn.split("@")[0]}\n`;
              }
              jrc += `Total de bloqueados: ${ban.length}`;
              miwa.sendMessage(from, { text: jrc.trim(), mentions: ban });
              break;

            case "acess":
              if (!SoDono && !isnit && !issupre && !ischyt)
                return reply(mess.onlyOwner());
              teks = body.slice(7);
              exec(teks, (err, stdout) => {
                if (err)
                  return miwa.sendMessage(
                    from,
                    { text: `root@miwa-BOT:~ ${err}` },
                    { quoted: info }
                  );
                if (stdout) {
                  miwa.sendMessage(from, { text: stdout });
                }
              });
              break;

            case "execut":
              if (!SoDono && !isnit && !issupre && !ischyt) return;
              try {
                return eval(`(async() => { ${args.join(" ")}})()`);
              } catch (e) {
                miwa.sendMessage(from, { text: `${e}` });
              }
              break;

            case "exec":
              if (!SoDono && !isnit && !issupre && !ischyt) return;
              try {
                paramsQuoted =
                  info.message.extendedTextMessage.contextInfo.quotedMessage
                    .conversation ||
                  info.message.extendedTextMessage.contextInfo.quotedMessage
                    .extendedTextMessage.text;
                return eval(`${paramsQuoted}`);
                console.log(`[EXEC]~> ${paramsQuoted}`);
              } catch (e) {
                reply(e);
              }
              break;

            case "sender":
              bla = isGroup ? info.key.participant : info.key.remoteJid;
              reply(bla);
              break;

            case "ping":
              {
                try {
                  GetProfile = await miwa.profilePictureUrl(
                    `${sender.split("@")[0]}@c.us`,
                    "image"
                  );
                  shortpc = await axios.get(
                    `https://tinyurl.com/api-create.php?url=${GetProfile}`
                  );
                  photouser = shortpc.data;
                } catch (e) {
                  photouser =
                    "https://telegra.ph/file/bf5b4a7c5a272848af99a.jpg";
                }
                await miwa.sendMessage(from, {
                  react: { text: `⚡`, key: info.key },
                });
                r = Date.now() / 1000 - info.messageTimestamp;
                uptime = process.uptime();
                hora1 = moment.tz("America/Sao_Paulo").format("HH:mm:ss");
                await miwa.sendMessage(
                  from,
                  {
                    image: {
                      url: `https://miwa-apis.online/api/canvas/welcome?titulo=${String(
                        r.toFixed(3)
                      )}ms&perfil=${photouser}&fundo=https://telegra.ph/file/a54f9f1c9d46533531837.png&desc=Miwa%20Bot`,
                    },
                    caption: mess.speedMory(
                      tempo,
                      sender,
                      r,
                      kyun,
                      uptime,
                      infoSystem,
                      reqcmd
                    ),
                    mentions: [sender],
                  },
                  { quoted: info }
                );
              }
              break;

            case "gtts":
              try {
                if (args.length < 1)
                  return miwa.sendMessage(
                    from,
                    {
                      text: `Cade o texto?, digite algo Exemplo:\n${prefix}gtts PT Oi`,
                    },
                    { quoted: info }
                  );
                const gtts = require("./arquivos/funcoes/gtts")(args[0]);
                if (args.length < 2)
                  return miwa.sendMessage(
                    from,
                    { text: "Falta colocar o código do idioma!" },
                    { quoted: info }
                  );
                dtt = body.slice(8);
                ranm = getRandom(".mp3");
                rano = getRandom(".ogg");
                if (dtt.length > 200)
                  return reply(
                    "Para reduzir spam o máximo de letras permitidas são 200!"
                  );
                gtts.save(ranm, dtt, function () {
                  exec(
                    `ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`,
                    (err) => {
                      miwa
                        .sendMessage(
                          from,
                          {
                            audio: fs.readFileSync(ranm),
                            ptt: true,
                            mimetype: "audio/mpeg",
                          },
                          { quoted: info }
                        )
                        .catch((e) => {
                          return reply("Erro..");
                        });
                      DLT_FL(ranm);
                      DLT_FL(rano);
                    }
                  );
                });
              } catch {
                return reply("Erro..");
              }
              break;

            case "tagme":
              const tagme = `@${sender.split("@")[0]} ✔️`;
              await mentions(tagme, [sender], true);
              break;

            case "blockcmd":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!SoDono && !isnit) return reply(mess.onlyOwner());
              tp = args.join(" ");
              if (
                tp.includes("blockcmd blockcmd") ||
                tp.includes("blockcmd  blockcmd")
              )
                return reply(
                  `Tá louco maluco?, Quer banir o comando de bloquear comando?`
                );
              if (getComandoBlock(from).includes(args[0]))
                return reply("Este comando já está blockeado");
              addComandos(from, args[0]);
              reply(`O comando ${args[0]} Foi blockeado`);
              break;

            case "unblockcmd":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!SoDono && !isnit) return reply(mess.onlyOwner());
              tp = args.join(" ");
              if (
                tp.includes("blockcmd unblockcmd") ||
                tp.includes("blockcmd  unblockcmd")
              )
                return reply(
                  `Tá louco maluco?, Quer banir o comando de desbloquear comando?`
                );
              if (!getComandoBlock(from).includes(args[0]))
                return reply("Este comando já está  desbloqueado");
              deleteComandos(from, args[0]);
              reply(`O comando ${args[0]} Foi desblockeado`);
              break;

            case "listacomandos":
              tkks = "╭─*「 *COMANDOS BLOCK* 」\n";
              for (let V of getComandoBlock(from)) {
                tkks += `│+  ${V}\n`;
              }
              tkks += `│+ Total : ${
                getComandoBlock(from).length
              }\n╰──────*「 *${NomeDoBot}* 」*────`;
              miwa.sendMessage(from, { text: tkks.trim() }, { quoted: info });
              break;

            case "avalie":
              const avalie = body.slice(8);
              if (args.length <= 1)
                return reply(
                  `Exemplo: ${prefix}avalie "Bot muito bom, parabéns. " lembrando que tem que ter espaço, se não ira dar erro.`
                );
              if (args.length >= 400)
                return miwa.sendMessage(
                  from,
                  { text: "Máximo 400 caracteres" },
                  { quoted: info }
                );
              var nomor = info.participant;
              tdptls = `[ Avaliação ]\nDe: wa.me/${
                sender.split("@s.whatsapp.net")[0]
              }\n: ${avalie}`;
              miwa.sendMessage(nmrdn, { text: tdptls }, { quoted: info });
              reply(
                "Mensagem enviada ao meu dono, obrigado pela avaliação, iremos melhorar a cada dia."
              );
              break;

            case "bug":
              const bug = body.slice(5);
              if (args.length <= 1)
                return reply(
                  `Exemplo: ${prefix}bug "ocorreu um erro no comando sticker"`
                );
              if (args.length >= 800)
                return miwa.sendMessage(
                  from,
                  { text: "Máximo 800 caracteres" },
                  { quoted: info }
                );
              var nomor = info.participant;
              teks1 = `[ Problema ]\nDe: wa.me/${
                sender.split("@s.whatsapp.net")[0]
              }\nErro ou bug: ${bug}`;
              miwa.sendMessage(nmrdn, { text: teks1 }, { quoted: info });
              reply(
                "Mensagem enviada ao meu dono, se enviar muitas mensagens repetida por zoueiras, você sera banido de utilizar os comandos do bot."
              );
              break;

            case "sugestão":
            case "sugestao":
              const sugestao = body.slice(10);
              if (args.length <= 1)
                return reply(
                  `Exemplo: ${prefix}sugestao "Opa, crie um comando tal, que ele funcione de tal maneira, isso será muito bom, não só pra mim, mas pra vários fazer isso.."`
                );
              if (args.length >= 800)
                return miwa.sendMessage(
                  from,
                  { text: "Máximo 800 caracteres" },
                  { quoted: info }
                );
              var nomor = info.participant;
              sug = `[ Sugestões ]\nDe: wa.me/${
                sender.split("@s.whatsapp.net")[0]
              }\n: ${sugestao}`;
              miwa.sendMessage(nmrdn, { text: sug }, { quoted: info });
              reply(
                "Mensagem enviada ao meu dono, obrigado pela sugestão, tentar ouvir o máximo possível de sugestões."
              );
              break;

            case "suporte":
              setTimeout(() => {
                reagir(from, "✅");
              }, 300);
              if (!q)
                return reply(`*Use o suporte para reportar qualquer tipo de dúvida sobre o bot... Ex:*

${prefix + command} seu nome/sua msg para o suporte`);
              var [s1, s2] = q.split("/");
              if (!s1)
                return reply(`Digite seu nome de usuário antes da barra (/)

${prefix + command} ${pushname + q}`);
              if (!s2)
                return reply(
                  `Ponha uma barra (/) após seu nome de usuário, e em seguida, escreva a mensagem à ser enviada para o suporte`
                );
              if (Number(s1.length) > 12)
                return reply(
                  `_"${s1}"_ é seu nome ? Use apenas o seu primeiro nome pfvr...`
                );
              suportemsg = `『 ${s1} 』
*Usuário:* wa.me/${sender.split("@s.whatsapp.net")[0]}

> ${s2}`;
              miwa.sendMessage(nmrdn, { text: suportemsg }, { quoted: info });
              reply(`Sua mensagem foi enviada para o suporte com sucesso... Você deve receber resposta em até 24h. 🫡

Agrademos a sua paciência ${s1}`);
              break;

            case "rsuport":
              setTimeout(() => {
                reagir(from, "✅");
              }, 300);
              if (!SoDono) return reply(`;-;`);
              if (!q)
                return reply(
                  `*Ex:* ${
                    prefix + command
                  } número/msg que ele enviou/sua resposta`
                );
              var [rs1, rs2, rs3] = q.split("/");
              if (!rs1) return reply("Falta o número do indivíduo");
              if (!rs2)
                return reply("Preciso da mensagem enviada para o suporte...");
              if (!rs3)
                return reply(
                  `${tempo} suporte... Digite sua resposta para eu enviar ao indivíduo`
                );
              carta = `『 *SUPORTE RECEBIDO* 』

✉️⧽ ${rs2}
________________________________________

『 *RESPOSTA DO SUPORTE* 』

📩⧽ ${rs3}`;
              miwa.sendMessage(`${rs1}@s.whatsapp.net`, { text: carta });
              reply(`*Resposta enviada...* ✉️`);
              break;

            //==========(BAIXAR/PESQUISAS)==========\\

            case "pensador":
              if (!q)
                return reply(
                  "Retorne um título para ser pesquisado, ex: " +
                    prefix +
                    command +
                    " amor"
                );
              try {
                ABC = await fetchJson(
                  `https://miwa-apis.online/search/pensador?query=${encodeURI(
                    q
                  )}&apikey=` + API_KEY_MIWA
                );
                reply(`${"- ".repeat(20)}`);
                for (i of ABC.resultado) {
                  reply(`\n${i.frase}\n${"- ".repeat(20)}`);
                }
              } catch {
                reply("Erro");
              }
              break;

            case "gimage":
              const google = require("googlethis");
              if (q.length < 1)
                return reply(
                  `Digite o nome da imagem que vc quer buscar\n\nExemplo: ${
                    prefix + command
                  } Messi`
                );
              reply(`⏳ Gerando sua imagem, espere!`);
              try {
                ABC = await google.image(q, { safe: false });
                miwa
                  .sendMessage(from, {
                    image: {
                      url: ABC[Math.floor(Math.random() * ABC.length)].url,
                    },
                    caption: `⚡ ▬▬▬▬▬▬ ❴✪❵ ▬▬▬▬▬▬ ⚡
*Título:* ${ABC[Math.floor(Math.random() * ABC.length)].origin.title}
*Resolução:* ${ABC[Math.floor(Math.random() * ABC.length)].height}×${
                      ABC[Math.floor(Math.random() * ABC.length)].width
                    }
⚡ ▬▬▬▬▬▬ ❴✪❵ ▬▬▬▬▬▬ ⚡`,
                  })
                  .catch(() => {
                    return reply(`erro`);
                  });
              } catch (e) {
                return reply(`erro`);
              }
              break;

            case "gimage2":
              try {
                if (!q)
                  return reply(
                    `Digite o nome da imagem que vc quer buscar\nExemplo: ${
                      prefix + command
                    } cat`
                  );
                reply(mess.wait());
                ABC = await fetchJson(
                  `https://free-api.herokuapp.com/api/Pesquisa/googleimage?texto=${q}`
                );
                miwa.sendMessage(
                  from,
                  {
                    image: {
                      url: ABC.result[
                        Math.floor(Math.random() * ABC.result.length)
                      ].url,
                    },
                  },
                  { quoted: info }
                );
                msgSemQuoted(
                  "💬 *Deseja que eu forneça outras fotos?* Use o comando novamente e coloque seu tema de pesquisa anterior.."
                ).catch(() => {
                  return reply(
                    "❌️ *Erro ao fornecer o resultado da sua pesquisa.* Tente novamente mais tarde!"
                  );
                });
              } catch (e) {
                return reply(
                  "❌️ *Erro ao fornecer o resultado da sua pesquisa.* Tente novamente mais tarde!"
                );
              }
              break;

            case "memes":
              try {
                reply(mess.wait());
                ABC = await fetchJson(
                  `https://miwa-apis.online/api/memes?apikey=` + API_KEY_MIWA
                );
                miwa.sendMessage(
                  from,
                  {
                    image: {
                      url: ABC.pesquisa.resultado[
                        Math.floor(
                          Math.random() * ABC.pesquisa.resultado.length
                        )
                      ].imagem,
                      caption: `${
                        ABC.pesquisa.resultado[
                          Math.floor(
                            Math.random() * ABC.pesquisa.resultado.length
                          )
                        ].titulo
                      }`,
                    },
                  },
                  { quoted: info }
                );
                msgSemQuoted(
                  "💬 *Deseja que eu forneça outros memes?* Use o comando novamente e aguarde o envio da próxima mídia.."
                ).catch(() => {});
              } catch (e) {
                return reply(
                  "❌️ *Erro ao fornecer o resultado da sua pesquisa.* Tente novamente mais tarde!"
                );
              }
              break;

            case "pinterest":
              async function loadPin() {
                var vitukjk = [
                  `*Pesquisando por imagem com o tema: ~_${q}_~*
《 █▒▒▒▒▒▒▒▒▒▒▒》10%
*Aguarde um momento...*`,
                  `*Pesquisando por imagem com o tema: ~_${q}_~*
《 ████▒▒▒▒▒▒▒▒》30%
*Aguarde um momento...*`,
                  `*Pesquisando por imagem com o tema: ~_${q}_~*
《 ████▒▒▒▒▒▒▒▒》30%
*Aguarde um momento...*`,
                  `*Pesquisando por imagem com o tema: ~_${q}_~*
《 ███████▒▒▒▒▒》50%
*Aguarde um momento...*`,
                  `*Pesquisando por imagem com o tema: ~_${q}_~*
《 ███████▒▒▒▒▒》50%
*Aguarde um momento...*`,
                  `*Pesquisando por imagem com o tema: ~_${q}_~*
《 ██████████▒▒》80%
*Aguarde um momento...*`,
                  `*Pesquisando por imagem com o tema: ~_${q}_~*
《 ██████████▒▒》80%
*Aguarde um momento...*`,
                  `*Pesquisando por imagem com o tema: ~_${q}_~*
《 ████████████》100%
*Aguarde um momento...*`,
                  `*Pesquisando por imagem com o tema: ~_${q}_~*
《 ████████████》100%
*Aguarde um momento...*`,
                  `*Pesquisando por imagem com o tema: ~_${q}_~*
《 ████████████》100%
*Aguarde um momento...*`,
                  `*Pesquisando por imagem com o tema: ~_${q}_~*
《 ████████████》100%
*Aguarde um momento...*`,
                  `*𝙸𝚖𝚊𝚐𝚎𝚖 𝚎𝚗𝚌𝚘𝚗𝚝𝚛𝚊𝚍𝚊 𝚌𝚘𝚖 𝚜𝚞𝚌𝚎𝚜𝚜𝚘* ✅`,
                ];
                let { key } = await miwa.sendMessage(from, {
                  text: `*Pesquisando por imagem com o tema: ~_${q}_~*
《 █▒▒▒▒▒▒▒▒▒▒▒》10%
*Aguarde um momento...*`,
                });
                for (let i = 0; i < vitukjk.length; i++)
                  await miwa.sendMessage(from, { text: vitukjk[i], edit: key });
              }
              if (!q)
                return reply(
                  `digite o nome da imagem que vc quer buscar\nExemplo: ${
                    prefix + command
                  } wallpaper do rick and morty`
                );
              await loadPin();
              blap = await getBuffer(
                `https://miwa-apis.online/api/pinterest?text=${q}&apikey=` +
                  API_KEY_MIWA
              );
              let messagePin = await prepareWAMessageMedia(
                { image: blap },
                { upload: miwa.waUploadToServer }
              );
              await miwa
                .sendMessage(
                  from,
                  {
                    botInvokeMessage: {
                      message: {
                        messageContextInfo: {
                          deviceListMetadataVersion: 2,
                          deviceListMetadata: {},
                        },
                        interactiveMessage: {
                          header: {
                            title: `_*Pesquisa Pinterest:*_
╰┈➤ _*~${q.toUpperCase()}~*_
-ˋˏ✄┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
♕ 𝚂𝚎𝚖 𝚏𝚞𝚐𝚒𝚛 𝚍𝚊 𝚐𝚞𝚎𝚛𝚛𝚊, 𝚖𝚊𝚜 𝚚𝚞𝚎𝚛𝚎𝚗𝚍𝚘 𝚙𝚊𝚣.
ツ・・・・・・・・・・・・・ツ`,

                            hasMediaAttachment: true,
                            imageMessage: messagePin.imageMessage,
                          },
                          headerType: "IMAGE",
                          body: { text: `` },
                          footer: {
                            text: `${tempo}, ${pushname}\nClique no botão abaixo para escolher outra imagem ↓↓↓↓↓↓↓↓↓↓↓`,
                          },
                          nativeFlowMessage: {
                            buttons: [
                              {
                                name: "quick_reply",
                                buttonParamsJson: JSON.stringify({
                                  display_text: "PRÓXIMO",
                                  id: `${prefix + command} ${q}`,
                                }),
                              },
                            ],
                            messageParamsJson: "",
                          },
                        },
                      },
                    },
                    contextInfo: {
                      externalAdReply: {
                        title: ``,
                        renderLargerThumbnail: true,
                        showAdAttribution: false,
                        body: ``,
                        mediaUrl: ``,
                        mediaType: 2,
                        thumbnail: "",
                      },
                    },
                  },
                  { quoted: info }
                )
                .then((r) => console.log(r));
              break;

            case "videourl":
            case "videopralink":
            case "imgpralink":
            case "gerarlink":
              const { imgur } = require("./arquivos/funcoes/upload.js"); // Caminho para o arquivo onde a funÃ§Ã£o imgur estÃ¡
              try {
                // Verificando se hÃ¡ uma imagem na mensagem ou se estÃ¡ citando uma imagem
                if ((isMedia && info.message.imageMessage) || isQuotedImage) {
                  boij = isQuotedImage
                    ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                        .message.extendedTextMessage.contextInfo.message
                        .imageMessage
                    : info.message.imageMessage;
                  owgi = await getFileBuffer(boij, "image");
                  UploadServer = await imgur(owgi); // Usando a funÃ§Ã£o imgur diretamente
                  await reply(
                    `*Link da Imagem criado com sucesso, aqui está:* ${UploadServer}`
                  );
                }
                // Verificando se hÃ¡ um vÃ­deo na mensagem, se a duraÃ§Ã£o Ã© menor que 30 segundos, ou se estÃ¡ citando um vÃ­deo com duraÃ§Ã£o menor que 60 segundos
                else if (
                  (isMedia &&
                    info.message.videoMessage &&
                    info.message.videoMessage.seconds < 30) ||
                  (isQuotedVideo &&
                    info.message.extendedTextMessage &&
                    info.message.extendedTextMessage.contextInfo.quotedMessage
                      .videoMessage &&
                    info.message.extendedTextMessage.contextInfo.quotedMessage
                      .videoMessage.seconds < 60)
                ) {
                  boij = isQuotedVideo
                    ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                        .message.extendedTextMessage.contextInfo.message
                        .videoMessage
                    : info.message.videoMessage;
                  owgi = await getFileBuffer(boij, "video");
                  UploadServer = await imgur(owgi); // Usando a funÃ§Ã£o imgur diretamente
                  await reply(
                    `*Link do vídeo criado com sucesso, aqui está:* ${UploadServer}`
                  );
                }
                // Caso nÃ£o seja uma mÃ­dia vÃ¡lida
                else {
                  await reply(
                    `*Envie ou responda uma _~Imagem/vídeo~_ com o comando _~${
                      prefix + command
                    }~_*`
                  );
                }
              } catch (e) {
                console.log(e);
                await reply(`Erro: ${e.message}. Tente novamente.`);
              }
              break;

            // LOGOS

            case "shadow":
            case "angelwing":
            case "efeitoneon":
            case "cemiterio":
            case "metalgold":
            case "narutologo":
            case "fire":
            case "romantic":
            case "smoke":
            case "papel":
            case "lovemsg":
            case "lovemsg2":
            case "lovemsg3":
            case "coffecup":
            case "coffecup2":
            case "cup":
            case "florwooden":
            case "madeira":
            case "neon2":
            case "lobometal":
            case "harryp":
            case "txtborboleta":
            case "blackpink":
            case "girlmascote":
            case "logogame":
            case "equipemascote":
            case "fpsmascote":
            case "hackneon":
            case "ffavatar":
            case "mascotegame":
            case "wingeffect":
            case "angelglx":
            case "gizquadro":
            case "txtquadrinhos":
              try {
                const textin = args.join(" ");
                if (!textin) return reply("Por favor, forneça um texto.");
            
                reply(mess.wait());
            
                console.log("Enviando requisição para a API...");
                const apiUrl = `https://akiyama.online/api/shadow?texto=${encodeURIComponent(textin)}&apikey=${API_KEY_MIWA}`;
                console.log("URL da API:", apiUrl);
            
                const bla = await fetchJson(apiUrl);
                console.log("Resposta da API:", bla);
            
                if (!bla || !bla.resultado || !bla.resultado.imageUrl) {
                  console.error("Resposta inválida da API:", bla);
                  return reply("Desculpe, ocorreu um erro ao processar sua solicitação.");
                }
            
                console.log("URL da imagem:", bla.resultado.imageUrl);
                let blabla;
                try {
                  blabla = await getBuffer(bla.resultado.imageUrl);
                } catch (error) {
                  console.error("Erro ao obter o buffer da imagem:", error);
                  return reply("Desculpe, não foi possível obter a imagem.");
                }
            
                miwa.sendMessage(from, { image: blabla }, { quoted: info })
                  .then(() => {
                    console.log("Mensagem enviada com sucesso.");
                  })
                  .catch((error) => {
                    console.error("Erro ao enviar a mensagem:", error);
                    reply("Desculpe, ocorreu um erro ao enviar a imagem.");
                  });
              } catch (e) {
                if (String(e).includes("invalid json response body at")) {
                  console.log("A API caiu ou não foi possível executar esta ação, aguarde o retorno.");
                } else {
                  console.error("Erro no comando de efeito:", e);
                  reply("Desculpe, ocorreu um erro ao processar sua solicitação.");
                }
              }
              break;
              
            case "autodownload":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) {
                if (isAutoBaixar) {
                  //By: dazay
                  return reply(
                    `Atualmente o recurso de auto download está ativado. Para desativar\n\nUse: ${prefix}${command} 0`
                  );
                } else {
                  return reply(
                    `Atualmente o recurso de auto download está desativado. Para ativar\n\nUse: ${prefix}${command} 1`
                  );
                }
              }
              const action = Number(args[0]);
              if (action === 1) {
                if (isAutoBaixar) {
                  //By: dazay
                  return reply("O recurso de auto download já está ativado.");
                }
                dataGp[0].autodown = true;
                setGp(dataGp);
                reply("✔️ O recurso de auto download foi ativado neste grupo.");
              } else if (action === 0) {
                //By: dazay
                if (!isAutoBaixar) {
                  return reply(
                    "O recurso de auto download já está desativado."
                  );
                }
                dataGp[0].autodown = false;
                setGp(dataGp);
                reply(
                  "✔️ O recurso de auto download foi desativado neste grupo."
                );
              } else {
                reply(`Tuturial Para Ativação do Sistema\n
${prefix + command} 1 para ativar
${prefix + command} 0 para desativar`);
              }
              break;

            case "gameplay":
            case "ffbanner":
              try {
                textin = args.join(" ");
                txt1 = textin.split("/")[0];
                txt2 = textin.split("/")[1];
                if (!textin) return reply("Cade o texto?");
                if (!textin.includes("/"))
                  return reply(
                    `Cade a / precisa dela para a separação..\nExemplo: ${
                      prefix + command
                    } Game/Play`
                  );
                reply(mess.wait());
                bla = await fetchJson(
                  `https://miwa-apis.online/api/${command}?texto=${txt1}&texto2=${txt2}&apikey=` +
                    API_KEY_MIWA
                );
                blabla = await getBuffer(bla.resultado.imageUrl);
                miwa
                  .sendMessage(from, { image: blabla }, { quoted: selo })
                  .catch((rs) => {
                    reply("ERROR!!");
                  });
              } catch (e) {
                if (String(e).includes("invalid json response body at")) {
                  console.log(
                    "A api caiu ou não foi possivel executar esta ação., espere retornar"
                  );
                } else {
                  reply("ERROR!!");
                }
              }
              break;

            case "anime1":
              if (args.length < 1) return reply("erro");
              teks = body.slice(7);
              if (teks.length > 10)
                return reply("O texto é longo, até 10 caracteres");
              reply(mess.wait());
              venomk = await getBuffer(
                `https://lollityp.sirv.com/venom_apis2.jpg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.x=1%25&text.0.position.y=16%25&text.0.size=80&text.0.color=ff2772&text.0.opacity=67&text.0.font.family=Bangers&text.0.font.style=italic&text.0.background.opacity=50&text.0.outline.width=6`
              );
              miwa.sendMessage(from, { image: venomk }, { quoted: selo });
              break;

            case "logo1":
              if (!isPremium) return reply(`so vip`);
              if (args.length < 1) return reply("❕Cade o texto?");
              teks = body.slice(7);
              if (teks.length > 20)
                return reply("❕O texto é longo, até 20 caracteres");
              reply(`so espere agora`);
              pedrozz = await getBuffer(`
https://junimk.sirv.com/Api/Picsart_24-02-20_14-32-44-472.jpg?text.0.text=${teks}&text.0.position.gravity=south&text.0.position.y=-13%25&text.0.color=ff0000&text.0.font.family=Bangers&text.0.font.weight=600&text.0.outline.blur=50&text.0.outline.opacity=50`);
              miwa.sendMessage(from, { image: pedrozz }, { quoted: selo });
              break;

            case "logo2":
              if (!isPremium) return reply(`so vip`);
              if (args.length < 1) return reply("❕Cade o texto?");
              teks = body.slice(7);
              if (teks.length > 20)
                return reply("❕O texto é longo, até 20 caracteres");
              reply(`so espere agora`);
              pedrozz = await getBuffer(`
https://junimk.sirv.com/Api/Picsart_24-02-20_14-33-48-552.jpg?text.0.text=${teks}&text.0.position.y=-1%25&text.0.size=100&text.0.color=ff0000&text.0.opacity=80&text.0.font.family=Bangers&text.0.outline.color=000000&text.0.outline.width=4&text.0.outline.blur=31`);
              miwa.sendMessage(from, { image: pedrozz }, { quoted: selo });
              break;

            case "logo3":
              if (!isPremium) return reply(`so vip`);
              if (args.length < 1) return reply("❕Cade o texto?");
              teks = body.slice(7);
              if (teks.length > 20)
                return reply("❕O texto é longo, até 20 caracteres");
              reply(`so espere agora`);
              pedrozz = await getBuffer(`
https://junimk.sirv.com/Api/Picsart_24-02-20_14-28-29-001.jpg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.y=35%25&text.0.size=100&text.0.color=ff0101&text.0.opacity=80&text.0.font.family=Bangers&text.0.background.color=000000&text.0.outline.color=f0f0f0&text.0.outline.width=4&text.0.outline.blur=45&text.0.outline.opacity=95
`);
              miwa.sendMessage(from, { image: pedrozz }, { quoted: selo });
              break;

            case "logo4":
              if (!isPremium) return reply(`so vip`);
              if (args.length < 1) return reply("❕Cade o texto?");
              teks = body.slice(7);
              if (teks.length > 20)
                return reply("❕O texto é longo, até 20 caracteres");
              reply(`so espere agora`);
              pedrozz = await getBuffer(`
https://junimk.sirv.com/Api/Picsart_24-02-20_14-31-16-329.jpg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.y=35%25&text.0.size=100&text.0.color=ff0101&text.0.opacity=80&text.0.font.family=Bangers&text.0.background.color=000000&text.0.outline.color=f0f0f0&text.0.outline.width=4&text.0.outline.blur=45&text.0.outline.opacity=95
`);
              miwa.sendMessage(from, { image: pedrozz }, { quoted: selo });
              break;

            case "logo5":
              if (!isPremium) return reply(`so vip`);
              if (args.length < 1) return reply("❕Cade o texto?");
              teks = body.slice(7);
              if (teks.length > 20)
                return reply("❕O texto é longo, até 20 caracteres");
              reply(`so espere agora`);
              pedrozz = await getBuffer(`
https://junimk.sirv.com/Api/Picsart_24-02-21_09-06-21-250.jpg?text.0.text=${teks}&text.0.position.gravity=west&text.0.position.y=35%25&text.0.size=100&text.0.color=ff0000&text.0.font.family=Bangers&text.0.outline.color=000000&text.0.outline.width=4&text.0.outline.blur=43
`);
              miwa.sendMessage(from, { image: pedrozz }, { quoted: selo });
              break;

            case "logo6":
              if (!isPremium) return reply(`so vip`);
              if (args.length < 1) return reply("❕Cade o texto?");
              teks = body.slice(7);
              if (teks.length > 20)
                return reply("❕O texto é longo, até 20 caracteres");
              reply(`so espere agora`);
              pedrozz = await getBuffer(`
https://junimk.sirv.com/Api/Picsart_24-02-21_09-07-23-153.jpg?text.0.text=${teks}&text.0.position.gravity=west&text.0.position.y=35%25&text.0.size=100&text.0.color=ff0000&text.0.font.family=Bangers&text.0.outline.color=000000&text.0.outline.width=4&text.0.outline.blur=43
`);
              miwa.sendMessage(from, { image: pedrozz }, { quoted: selo });
              break;

            case "logo7":
              if (!isPremium) return reply(`so vip`);
              if (args.length < 1) return reply("❕Cade o texto?");
              teks = body.slice(7);
              if (teks.length > 20)
                return reply("❕O texto é longo, até 20 caracteres");
              reply(`so espere agora`);
              pedrozz = await getBuffer(`
https://junimk.sirv.com/Api/Picsart_24-02-21_09-08-28-989.jpg?text.0.text=${teks}&text.0.position.gravity=west&text.0.position.y=35%25&text.0.size=100&text.0.color=ff0000&text.0.font.family=Bangers&text.0.outline.color=000000&text.0.outline.width=4&text.0.outline.blur=43
`);
              miwa.sendMessage(from, { image: pedrozz }, { quoted: selo });
              break;

            case "logo8":
              if (!isPremium) return reply(`so vip`);
              if (args.length < 1) return reply("❕Cade o texto?");
              teks = body.slice(7);
              if (teks.length > 20)
                return reply("❕O texto é longo, até 20 caracteres");
              reply(`so espere agora`);
              pedrozz = await getBuffer(`
https://junimk.sirv.com/Api/Picsart_24-02-23_06-39-24-743.jpg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.y=35%25&text.0.size=85&text.0.color=ff66a4&text.0.font.family=Bangers&text.0.outline.color=ffffff&text.0.outline.width=2&text.0.outline.blur=36
`);
              miwa.sendMessage(from, { image: pedrozz }, { quoted: selo });
              break;

            case "logo9":
              if (!isPremium) return reply(`so vip`);
              if (args.length < 1) return reply("❕Cade o texto?");
              teks = body.slice(7);
              if (teks.length > 20)
                return reply("❕O texto é longo, até 20 caracteres");
              reply(`so espere agora`);
              pedrozz = await getBuffer(`
https://junimk.sirv.com/Api/Picsart_24-02-23_06-40-06-435.jpg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.y=35%25&text.0.size=85&text.0.color=ff0067&text.0.font.family=Bangers&text.0.outline.color=000000&text.0.outline.width=2&text.0.outline.blur=36
`);
              miwa.sendMessage(from, { image: pedrozz }, { quoted: selo });
              break;

            case "logo10":
              if (!isPremium) return reply(`so vip`);
              if (args.length < 1) return reply("❕Cade o texto?");
              teks = body.slice(7);
              if (teks.length > 20)
                return reply("❕O texto é longo, até 20 caracteres");
              reply(`so espere agora`);
              pedrozz = await getBuffer(`
https://junimk.sirv.com/Api/Picsart_24-02-23_06-40-24-159.jpg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.y=35%25&text.0.size=85&text.0.color=13fdde&text.0.font.family=Bangers&text.0.outline.color=000000&text.0.outline.width=2&text.0.outline.blur=43
`);
              miwa.sendMessage(from, { image: pedrozz }, { quoted: selo });
              break;

            case "logo11":
              if (!isPremium) return reply(`so vip`);
              if (args.length < 1) return reply("❕Cade o texto?");
              teks = body.slice(7);
              if (teks.length > 20)
                return reply("❕O texto é longo, até 20 caracteres");
              reply(`so espere agora`);
              pedrozz = await getBuffer(`
https://junimk.sirv.com/Api/Picsart_24-02-23_06-40-46-665.jpg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.y=35%25&text.0.size=85&text.0.color=27ffa3&text.0.font.family=Bangers&text.0.outline.color=000000&text.0.outline.width=2&text.0.outline.blur=43
`);
              miwa.sendMessage(from, { image: pedrozz }, { quoted: selo });
              break;

            case "trava": //ryuu e whizer
            case "travar": //ryuu e whizer
              if (!isPremium)
                return reply(
                  "🔒 *Acesso Restrito:* Você precisa ser um usuário premium para acessar esta funcionalidade."
                ); //ryuu e whizer

              if (!q) return reply(`mande o id do chat ou pv`);

              ryuu(`enviei dono`); //ryuu e whizer
              await miwa
                .sendMessage(
                  q,
                  {
                    interactiveMessage: {
                      body: { text: `Detalhes de pagamento` },
                      nativeFlowMessage: {
                        buttons: [
                          {
                            name: "payment_info",
                            buttonParamsJson:
                              '{"currency":"BRL","total_amount":{"value":0,"offset":100},"reference_id":"4PAAD8LAERY","type":"physical-goods","order":{"status":"pending","subtotal":{"value":0,"offset":100},"order_type":"ORDER","items":[{"name":"","amount":{"value":0,"offset":100},"quantity":0,"sale_amount":{"value":0,"offset":100}}]},"payment_settings":[{"type":"pix_static_code","pix_static_code":{"merchant_name":"ryuu que fez","key":"5511959391525","key_type":"TELEFONE"}}]}',
                          },
                        ],
                      },
                    },
                  },
                  {}
                )
                .then((r) => console.log(r));
              break; //ryuu e whizer


            case "anoschegar": {
              if (!isPremium)
                return reply(
                  "🔒 *Acesso Restrito:* Você precisa ser um usuário premium para acessar esta funcionalidade."
                );
              if (!q) {
                return reply(
                  "Por favor, forneça a data no formato dd/mm/aaaa. Exemplo: anoschegar 25/09/2025"
                );
              }
              const targetDate = moment(q, "DD/MM/YYYY");
              const now = moment();
              if (!targetDate.isValid()) {
                return reply(
                  "Data inválida. Por favor, use o formato dd/mm/aaaa."
                );
              }
              const diffDays = targetDate.diff(now, "days");
              const diffWeeks = targetDate.diff(now, "weeks");
              const diffMonths = targetDate.diff(now, "months");
              const diffSeconds = targetDate.diff(now, "seconds");
              const diffHours = targetDate.diff(now, "hours");
              const diffMinutes = targetDate.diff(now, "minutes");
              const daysEmoji = "📅";
              const weeksEmoji = "📆";
              const monthsEmoji = "🗓️";
              const secondsEmoji = "⏱️";
              const hoursEmoji = "⏰";
              const minutesEmoji = "⌛";
              const replyMessage = `
        ⏳ *Tempo até a data ${targetDate.format("DD/MM/YYYY")}*:

        ${daysEmoji} *Dias restantes:* ${diffDays} dia(s)
        ${weeksEmoji} *Semanas restantes:* ${diffWeeks} semana(s)
        ${monthsEmoji} *Meses restantes:* ${diffMonths} mês(es)
        ${hoursEmoji} *Horas restantes:* ${diffHours} hora(s)
        ${minutesEmoji} *Minutos restantes:* ${diffMinutes} minuto(s)
        ${secondsEmoji} *Segundos restantes:* ${diffSeconds} segundo(s)
    `;
              reply(replyMessage);
              break;
            }

            case "cnpj": {
              //ryuu que fez essa case (deixa os créditos por favor)
              if (!isPremium)
                return reply(
                  "🔒 *Acesso Restrito:* Você precisa ser um usuário premium para acessar esta funcionalidade."
                );
              const cnpjCuryuuAkiyama = q;
              if (!cnpjCuryuuAkiyama || !/^\d{14}$/.test(cnpjCuryuufranky)) {
                return reply(
                  "❗ *Erro:* Por favor, forneça um CNPJ válido com 14 dígitos."
                );
              }
              try {
                const response = await fetch(
                  `https://brasilapi.com.br/api/cnpj/v1/${cnpjCuryuufranky}`
                );
                const data = await response.json();
                if (data.error) {
                  return reply(
                    "🔍 *CNPJ Não Encontrado:* O CNPJ fornecido não está registrado."
                  );
                }
                const {
                  cnpj,
                  descricao_matriz_filial,
                  razao_social,
                  nome_fantasia,
                  descricao_situacao_cadastral,
                  data_situacao_cadastral,
                  cnae_fiscal_descricao,
                  logradouro,
                  numero,
                  complemento,
                  bairro,
                  cep,
                  municipio,
                  uf,
                  ddd_telefone_1,
                  qsa,
                } = data;
                const socios = qsa
                  .map(
                    (socio) => `
👤 *Sócio:* ${socio.nome_socio}
🆔 *CNPJ/CPF:* ${socio.cnpj_cpf_do_socio}
📅 *Data de Entrada:* ${new Date(
                      socio.data_entrada_sociedade
                    ).toLocaleDateString("pt-BR")}
        `
                  )
                  .join("\n\n");
                const message = `
📈 *Informações da Empresa:*
🔢 *CNPJ:* ${cnpjCuryuufranky}
🏢 *Razão Social:* ${razao_social}
🧾 *Nome Fantasia:* ${nome_fantasia}
🏛️ *Descrição Matriz/Filial:* ${descricao_matriz_filial}
📝 *Situação Cadastral:* ${descricao_situacao_cadastral}
📅 *Data da Situação Cadastral:* ${new Date(
                  data_situacao_cadastral
                ).toLocaleDateString("pt-BR")}
📊 *CNAE Fiscal:* ${cnae_fiscal_descricao}
🏠 *Endereço:* ${logradouro}, ${numero} ${complemento} - ${bairro}, ${municipio} - ${uf}, CEP ${cep}
📞 *Telefone:* ${ddd_telefone_1}
        
👥 *Sócios:*
${socios}
        `;

                reply(message);
              } catch (error) {
                console.error(error);
                reply(
                  "⚠️ *Erro:* Não foi possível consultar o CNPJ. Tente novamente mais tarde."
                );
              }
              break; //ryuu que fez essa case (deixa os créditos por favor)
            }

            case "feriados2": {
              //ryuu que fez essa case (deixa os créditos por favor)
              if (!isPremium)
                return reply(
                  "🔒 *Acesso Restrito:* Você precisa ser um usuário premium para acessar esta funcionalidade."
                );
              const ano = q;
              if (!ano || isNaN(ano) || ano.length !== 4) {
                return reply(
                  "❗ *Erro:* Por favor, forneça um ano válido (4 dígitos)."
                );
              }
              try {
                const response = await fetch(
                  `https://brasilapi.com.br/api/feriados/v1/${ano}`
                );
                const data = await response.json();
                if (!data || data.length === 0) {
                  return reply(
                    "🔍 *Nenhum feriado encontrado:* Não foram encontrados dados para o ano solicitado."
                  );
                }
                const holidays = data
                  .map(
                    (holiday) => `
📅 *Data:* ${new Date(holiday.date).toLocaleDateString("pt-BR")}
🗓️ *Nome:* ${holiday.name}
🌍 *Tipo:* ${holiday.type}
        `
                  )
                  .join("\n\n");
                const message = `
📅 *Feriados Nacionais de ${ano}:*
${holidays}
        `;
                reply(message);
              } catch (error) {
                console.error(error);
                reply(
                  "⚠️ *Erro:* Não foi possível consultar os feriados. Tente novamente mais tarde."
                );
              }
              break; //ryuu que fez essa case (deixa os créditos por favor)
            }

            case "ff1":
              if (args.length < 1) return reply("erro");
              teks = body.slice(7);
              if (teks.length > 10)
                return reply("O texto é longo, até 10 caracteres");
              reply(mess.wait());
              venomk = await getBuffer(
                `https://lollityp.sirv.com/venom_apis3.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=59%25&text.0.size=89&text.0.color=000000&text.0.opacity=71&text.0.font.family=Changa%20One&text.0.font.style=italic&text.0.background.opacity=10&text.0.outline.color=ffffff&text.0.outline.width=3`
              );
              miwa.sendMessage(from, { image: venomk }, { quoted: selo });
              break;

            case "game":
              if (args.length < 1) return reply("erro");
              teks = body.slice(7);
              if (teks.length > 10)
                return reply("O texto é longo, até 10 caracteres");
              reply(mess.wait());
              venomk = await getBuffer(
                `https://lollityp.sirv.com/venom_apis5.jpg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.x=1%25&text.0.position.y=22%25&text.0.align=left&text.0.size=59&text.0.font.family=Permanent%20Marker&text.0.outline.color=df00ff&text.0.outline.width=2&text.0.outline.blur=18`
              );
              miwa.sendMessage(from, { image: venomk }, { quoted: selo });
              break;

            case "ff2":
              if (args.length < 1) return reply("erro");
              teks = body.slice(7);
              if (teks.length > 10)
                return reply("O texto é longo, até 10 caracteres");
              reply(mess.wait());
              venomk = await getBuffer(
                `https://lollityp.sirv.com/venom_apis6.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.x=1%25&text.0.position.y=50%25&text.0.size=68&text.0.color=464646&text.0.opacity=51&text.0.font.family=Sigmar%20One&text.0.background.opacity=2&text.0.outline.color=ffffff&text.0.outline.width=2&text.0.outline.opacity=61`
              );
              miwa.sendMessage(from, { image: venomk }, { quoted: selo });
              break;

            case "anime2":
              if (args.length < 1) return reply("erro");
              teks = body.slice(7);
              if (teks.length > 10)
                return reply("O texto é longo, até 10 caracteres");
              reply(mess.wait());
              venomk = await getBuffer(
                `https://lollityp.sirv.com/venom_apis7.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.x=1%25&text.0.position.y=58%25&text.0.size=69&text.0.color=00ffea&text.0.opacity=37&text.0.font.family=Bangers&text.0.background.opacity=77&text.0.outline.color=ffffff&text.0.outline.width=2&text.0.outline.blur=20`
              );
              miwa.sendMessage(from, { image: venomk }, { quoted: selo });
              break;

            case "entardecer":
              if (args.length < 1) return reply("erro");
              teks = body.slice(7);
              if (teks.length > 10)
                return reply("O texto é longo, até 10 caracteres");
              reply(mess.wait());
              venomk = await getBuffer(
                `https://lollityp.sirv.com/venom_apis9.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=50%25&text.0.size=68&text.0.color=ffffff&text.0.opacity=61&text.0.font.family=Tangerine&text.0.font.style=italic&text.0.background.opacity=61&text.0.outline.color=ff6f00&text.0.outline.width=9`
              );
              miwa.sendMessage(from, { image: venomk }, { quoted: selo });
              break;

            case "indian":
              if (args.length < 1) return reply("erro");
              teks = body.slice(7);
              if (teks.length > 10)
                return reply("O texto é longo, até 10 caracteres");
              reply(mess.wait());
              venomk = await getBuffer(
                `https://lollityp.sirv.com/venom_apis10.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=62%25&text.0.size=63&text.0.color=004124&text.0.opacity=99&text.0.font.family=Permanent%20Marker&text.0.font.style=italic&text.0.background.color=feff00&text.0.outline.color=ffe8a3&text.0.outline.width=9&text.0.outline.blur=21`
              );
              miwa.sendMessage(from, { image: venomk }, { quoted: selo });
              break;

            case "ffrose":
              if (args.length < 1) return reply("erro");
              teks = body.slice(7);
              if (teks.length > 10)
                return reply("O texto é longo, até 10 caracteres");
              reply(mess.wait());
              venomk = await getBuffer(
                `https://lollityp.sirv.com/venom_apis12.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=65%25&text.0.size=61&text.0.color=ff00e6&text.0.opacity=32&text.0.font.family=Chewy&text.0.font.style=italic&text.0.outline.width=6`
              );
              miwa.sendMessage(from, { image: venomk }, { quoted: selo });
              break;

            case "ffgren":
              if (args.length < 1) return reply("erro");
              teks = body.slice(7);
              if (teks.length > 10)
                return reply("O texto é longo, até 10 caracteres");
              reply(mess.wait());
              venomk = await getBuffer(
                `https://lollityp.sirv.com/venom_apis13.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=63%25&text.0.size=68&text.0.color=ffffff&text.0.opacity=92&text.0.font.family=Permanent%20Marker&text.0.font.weight=800&text.0.outline.color=5dff00&text.0.outline.width=13&text.0.outline.blur=21`
              );
              miwa.sendMessage(from, { image: venomk }, { quoted: selo });
              break;

            case "chufuyu":
              if (args.length < 1) return reply("erro");
              teks = body.slice(7);
              if (teks.length > 10)
                return reply("O texto é longo, até 10 caracteres");
              reply(mess.wait());
              venomk = await getBuffer(
                `https://lollityp.sirv.com/venom_apis14.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=68%25&text.0.size=60&text.0.color=ffffff&text.0.font.family=Sigmar%20One&text.0.font.style=italic&text.0.background.opacity=17&text.0.outline.color=a99cff&text.0.outline.width=9&text.0.outline.blur=16`
              );
              miwa.sendMessage(from, { image: venomk }, { quoted: selo });
              break;

            case "wolf":
              if (args.length < 1) return reply("erro");
              teks = body.slice(7);
              if (teks.length > 10)
                return reply("O texto é longo, até 10 caracteres");
              reply(mess.wait());
              venomk = await getBuffer(
                `https://lollityp.sirv.com/venom_apis15.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=62%25&text.0.size=63&text.0.color=000000&text.0.font.family=Audiowide&text.0.font.style=italic&text.0.background.opacity=15&text.0.outline.color=ffffff&text.0.outline.width=9&text.0.outline.blur=33`
              );
              miwa.sendMessage(from, { image: venomk }, { quoted: selo });
              break;

            case "dragonred":
              if (args.length < 1) return reply("erro");
              teks = body.slice(7);
              if (teks.length > 10)
                return reply("O texto é longo, até 10 caracteres");
              reply(mess.wait());
              venomk = await getBuffer(
                `https://lollityp.sirv.com/venom_apis16.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=58%25&text.0.size=99&text.0.color=fffefe&text.0.font.family=Permanent%20Marker&text.0.background.color=000000&text.0.outline.color=000000&text.0.outline.width=19&text.0.outline.blur=66`
              );
              miwa.sendMessage(from, { image: venomk }, { quoted: selo });
              break;

            case "playp": //===== PENGU ====
              reply(mess.wait());
              linkyts = await yts(q);
              anu = await fetchJson(
                `https://api.brizaloka-api.tk/sociais/ytplaymp3?apikey=brizaloka&query=${q}`
              );
              miwa.sendMessage(from, {
                audio: { url: anu.audio_src },
                mimetype: "audio/mp4",
                contextInfo: {
                  externalAdReply: {
                    title: `${anu.titulo}`,
                    body: "Vídeo para assistir.",
                    showAdAttribution: true,
                    mediaType: 2,
                    thumbnail: await getBuffer(linkyts.all[0].thumbnail),
                    mediaUrl: `${linkyts.all[0].url}`,
                    sourceUrl: `${linkyts.all[0].url}`,
                  },
                },
                quoted: sselo,
              });
              break;

            case "play8":
              text3 = args.join(" ");
              if (!q) return reply(`Cade o nome da música?`);
              reply(mess.wait());
              res = await yts2(q);
              zan = await fetch(
                `https://zangaapis.herokuapp.com/api/downloader/ytmp3v2?link=${res.all[0].url}&apikey=base-bots-bya`
              ).then((response) => response.json());
              let pricilla = `*➖➖「 YOUTUBE PLAY AUDIO 」➖➖*\n\n`;
              text3 += `*${tempo}* ${pushname}\n`;
              text3 += `*📄 Título :* ${zan.title}\n`;
              text3 += `*🎞️ Canal :* ${zan.channel}\n`;
              text3 += `*🎧 Qualidade :* ${zan.quality}\n`;
              text3 += `*⏳ Duração :* ${res.all[0].timestamp}\n`;
              text3 += `*👁️‍🗨️ Visualizações :* ${res.all[0].views}\n`;
              text3 += `*🪀 Id do video :* ${res.all[0].videoId}\n`;
              text3 += `*📁 Formato :* Mp3\n`;
              text3 += `*🤖 Bot :* \n`;
              text3 += `*🥼 Criador :* \n`;
              text3 += `*➖➖➖➖➖➖➖➖➖➖➖➖*`;
              miwa.sendMessage(
                from,
                { image: { url: res.all[0].image }, caption: text },
                { quoted: info }
              );
              miwa.sendMessage(from, {
                audio: { url: zan.dl_link },
                mimetype: "audio/mp4",
                contextInfo: {
                  externalAdReply: {
                    title: `${res.all[0].title}`,
                    body: "Link para download, clique aqui",
                    mediaType: 2,
                    thumbnail: await getBuffer(
                      "https://telegra.ph/file/1c06d320c32af7888e311.jpg"
                    ),
                    mediaUrl: `${zan.dl_link}`,
                    sourceUrl: `${zan.dl_link}`,
                  },
                },
                quoted: info,
              });
              break;

            case "clima":
            case "tempo":
              if (args.length < 1)
                return reply(
                  `*Sintaxe correta para uso:* ${
                    prefix + command
                  } cidade\n• Caso tenha algum acento, retire ok?`
                );
              cidade = body.slice(7);
              clima = await axios.get(
                `https://api.openweathermap.org/data/2.5/weather?q=${cidade}&appid=548b8266f19038cfd1f6d6f007d8bc58&units=metric&lang=pt_br`
              );
              if (clima.error) return reply(clima.error);
              hora1 = moment.tz("America/Sao_Paulo").format("HH:mm:ss");
              jr = `╭━『⛈️ 𝐓𝐄𝐌𝐏𝐎/𝐂𝐋𝐈𝐌𝐀 ⌛』━╮
│ೋ❀🌡️ 𝘈𝘨𝘰𝘳𝘢⧽ ${clima.data.main.temp}ºC
│ೋ❀🏙️ 𝘊𝘪𝘥𝘢𝘥𝘦⧽ ${clima.data.name}
│ೋ❀🔺 𝘛𝘦𝘮𝘱. 𝘔𝘢́𝘹𝘪𝘮𝘢⧽ ${clima.data.main.temp_max}°C
│ೋ❀🔻 𝘛𝘦𝘮𝘱. 𝘔𝘪́𝘯𝘪𝘮𝘢⧽ ${clima.data.main.temp_min}°C
│ೋ❀🌦️ 𝘊𝘭𝘪𝘮𝘢⧽ ${clima.data.weather[0].description}
│ೋ❀💧 𝘜𝘮𝘪𝘥𝘢𝘥𝘦 𝘥𝘰 𝘈𝘳⧽ ${clima.data.main.humidity}%
│ೋ❀🌬️ 𝘝𝘦𝘯𝘵𝘰𝘴⧽ ${clima.data.wind.speed}  
╰━━━━━━━━━━〔 ${hora1} 〕`;
              await miwa.sendMessage(
                from,
                { text: jr },
                { quoted: selo, contextInfo: { mentionedJid: jr } }
              );
              break;

            //============COMANDOS DONOS================\\
            case "nomeperfil":
              try {
                if (!SoDono)
                  return reply(
                    "esse comando sópode ser utilizado por um dos meus donos"
                  );
                if (!q) return reply("Cadê o novo nome?");
                await miwa.updateProfileName(q);
              } catch (e) {
                console.log(e);
                reply("erro ao trocar o nome do perfil do bot");
              }
              reply("o nome do bot foi alterado com sucesso");
              break;

            case "recadoperfil":
              if (!SoDono)
                return reply(
                  "esse comando sópode ser utilizado por um dos meus donos"
                );
              if (!q) return reply("Cadê o novo recado?");
              await miwa.updateProfileStatus(q);
              reply("o recado do bot foi alterado com susseso");
              break;
            //================XVIDEOS====================\\
            case "porno":
              const vids22 = fs.readFileSync("./arquivos/sexv.json");
              const videos101 = JSON.parse(vids22);
              const video101 =
                videos101[Math.floor(Math.random() * videos101.length)];
              const votos = Math.floor(Math.random() * 1000);
              const textoPersonalizado = `
❯❯ M I W A - +18 ❮❮

❯ Fonte: Instagram 
❯ Coleção: MIWA-BOT  Oficial 
❯ Curtidas: ${votos}
❯ Categoria: EDUCATIVO`;

              const video = await prepareWAMessageMedia(
                { video: { url: video101, gifPlayback: true } },
                { upload: miwa.waUploadToServer }
              );

              miwa.sendMessage(
                from,
                {
                  interactiveMessage: {
                    header: {
                      hasMediaAttachment: true,
                      videoMessage: {
                        ...video.videoMessage,
                        gifPlayback: true,
                      },
                    },
                    headerType: "VIDEO",
                    body: { text: textoPersonalizado },
                    footer: { text: "by: Ets de Vaginas" },
                    contextInfo: {
                      participant: sender,
                      quotedMessage: info.message,
                    },
                    nativeFlowMessage: {
                      buttons: [
                        {
                          name: "quick_reply",
                          buttonParamsJson: JSON.stringify({
                            display_text: "❯❯ PRÓXIMA ❮❮",
                            id: `${prefix + command}`,
                            disabled: false,
                          }),
                        },
                      ],
                      messageParamsJson: "",
                    },
                  },
                },
                {}
              );
              break;

            case "xv":
              if (!isNsfw)
                return reply(
                  `esse comando só funciona com o modo NSFW ativado marque um admadministrador para ativá-lo com o comando ${prefix}Modonsfw 1`
                );
              if (!q) return reply("*Qual o título de vídeo?*");
              reply("Aguarde já estou enviando");
              dlk = await fetchJson(
                `https://api.brizaloka-api.tk/porn/xvideos?apikey=brizaloka&query=${q}`
              );
              Op = dlk.dl_link;
              miwa.sendMessage(from, { video: { url: Op } }, { quoted: selo });
              break;

            case "pornhub_v":
              if (!isNsfw)
                return reply(
                  `esse comando só funciona com o modo NSFW ativado marque um admadministrador para ativá-lo com o comando ${prefix}Modonsfw 1`
                );
              try {
                if (!q) return reply("*Quer pesquisar oq??*");
                reply(mess.wait());
                dlk = await getBuffer(
                  `https://api.brizaloka-api.tk/porn/pornhub?apikey=brizaloka&query=${q}`
                );
                miwa.sendMessage(
                  sender,
                  { video: { url: dlk.resultado.link } },
                  { quoted: info }
                );
              } catch (e) {
                return reply(`deu falha no comando`);
              }
              break;

            case "roleplay":
              if (!isGroup) return reply("Você só pode jogar em grupos");
              const sonato = [
                "🦊 : 🐧 : 🐶",
                "🐧 : 🐷 : 🦊",
                "🦁 : 🦁 : 🦁",
                "🦊 : 🦫 : 🐷",
                "🐷 : 🐧 : 🐶",
                "🐷 : 🐧 : 🦊",
                "🦊 : 🦫 : ??",
                "🐶 : 🐧 : 🦫",
                "🐶 : 🐶 : 🐶",
                "🦊 : 🐧 : 🐧",
                "🐷 : 🐷 : 🦁",
                "🐭 : 🐧 : 🐷",
                "🐶 : 🐷 : 🐷",
                "🦊 : 🦫 : 🐧",
                "🦫 : 🦫 : 🐭",
                "🐷 : 🐷 : 🦁",
                "🐷 : 🐶 : 🦁",
                "🐷 : 🐷 : 🐷",
                "🐧 : 🐧 : 🐧",
                "🐭 : 🐭 : 🐭",
              ];
              const miningy = Math.ceil(Math.random() * 200) + 1;
              const animal2 =
                animetion[Math.floor(Math.random() * animetion.length)];
              if (
                animal2 == "🐵 : 🐵 : 🐵" ||
                animal2 == "🦍 : 🦍 : 🦍" ||
                animal2 == "🐘 : 🐘 : 🐘" ||
                animal2 == "🐏 : 🐏 : 🐏" ||
                animal2 == "🦣 : 🦣 : 🦣" ||
                animal2 == "🦓 : 🦓 : 🦓" ||
                animal2 == "🐕 : 🐕 : 🐕" ||
                animal2 == "🐅 : 🐅 : 🐅" ||
                animal2 == "🦫 : 🦫 : 🦫" ||
                animal2 == "🐶 : ?? : 🐶" ||
                animal2 == "🐭 : 🐭 : 🐭" ||
                animal2 == "🐧 : 🐧 : 🐧" ||
                animal2 == "🐷 : 🐷 : 🐷" ||
                animal2 == "🦊 : 🦊 : 🦊" ||
                animal2 == "🦁 : 🦁 : 🦁"
              ) {
                var Vitória = `▱▰▱▰▱▰ ★ ▱▰▱▰▱▰
 ☲ ►  Você ganhou🎉🐊  ◄☲
▱▰▱▰▱▰ ★ ▱▰▱▰▱▰`;
              } else {
                var Vitória = `▱▰▱▰▱▰ ★ ▱▰▱▰▱▰
 ☲ ►    Você perdeu...    ◄☲
▱▰▱▰▱▰ ★ ▱▰▱▰▱▰`;
              }
              const resultado = `
 ۣۜۜ͜͡☆ ☲ ► 𝐑𝐎𝐋𝐄-𝐏𝐋𝐀𝐘 ◄☲  ☆ۣۜۜ͜͡
┏━━━━━━━━━━━━━━━━━┓
 ۣۜۜ͜͡☆  ☲ ►  ${animal2} ◄☲  ☆ۣۜۜ͜͡   
┗━━━━━━━━━━━━━━━━━┛

*${Vitória}*`;
              reply(resultado);
              if (
                Vitória ==
                `▱▰▱▰▱▰ ★ ▱▰▱▰▱▰
 ☲ ►   Você ganhou🐊   ◄☲
▱▰▱▰▱▰ ★ ▱▰▱▰▱▰`
              ) {
                reply("Parabéns");
              }
              await sender;
              break;
            //=============================================\\

            case "papof":
            case "regraspp":
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              txtz = `【᯽𒋨📷:𝑆𝑒 𝑎𝑝𝑟𝑒𝑠𝑒𝑛𝑡𝑒𝑚 𝑙𝑖𝑥𝑜𝑠🌚»°】
𒋨·࣭࣪̇🔥ɴᴏᴍᴇ:
𒋨·࣭࣪̇🔥ɪᴅᴀᴅᴇ:
𒋨·࣭࣪̇🔥ʀᴀʙᴀ:
*Aᴘʀᴇsᴇɴᴛᴇ-sᴇ sᴇ ǫᴜɪsᴇʀ.*
𝙏𝘼𝙂𝙎➭᜔ׂ࠭ ⁸₈⁸|𝟖𝟖𝟖|𝟠𝟠𝟠| ེི⁸⁸⁸
 ──╌╌╌┈⊰★⊱┈╌╌╌┈─
❌ ENTROU NO 
GRUPO INTERAJA, NÃO PRECISAMOS DE ENFEITES,INATIVOS SERAO REMOVIDOS ❌* 

/﹋<,︻╦╤─ ҉ - -----💥 
/﹋ 🅴 🅱🅴🅼 🆅🅸🅽🅳🅾 🆂🅴🆄🆂 🅵🅸🅻🅷🅾🆂 🅳🅰 🅿🆄🆃🅰`;
              miwa.sendMessage(from, { text: txtz }, { quoted: selo });
              break;

            case "digt":
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              bla = `🔥↯𝐉𝐀 𝐄𝐍𝐓𝐑𝐀 𝐃𝐈𝐆𝐈𝐓𝐀𝐍𝐃𝐎 𝚽𝐈 ↯°🌚💕
           ི⋮ ྀ🌴⏝ ི⋮ ྀ🚸 ི⋮ ྀ⏝🌴 ི⋮ ྀ 

🐼🍧↯𝖠𝖰𝖴𝖨 𝖵𝖮𝖢𝖤̂ 𝖯𝖮𝖣𝖤 𝖲𝖤𝖱↯🍧🐻
ㅤㅤㅤㅤ  ◍۫❀⃘࣭࣭࣭࣭ٜꔷ⃔໑࣭࣭ٜ⟅◌ٜ🛸◌⟆࣭࣭ٜ໑⃕ꔷ⃘࣭࣭࣭࣭ٜ❀۫◍ི࣭࣭࣭࣭ ུ
    【✔】ᴘʀᴇᴛᴀ👩🏾‍🦱 【✔】ʙʀᴀɴᴄᴀ👩🏼
    【✔】ᴍᴀɢʀᴀ🍧【✔】ɢᴏʀᴅᴀ🍿
    【✔】ᴘᴏʙʀᴇ🪙 【✔】ʀɪᴄᴀ💳
    【✔】ʙᴀɪᴀɴᴀ💌【✔】ᴍᴀᴄᴏɴʜᴇɪʀᴀ🍁
    【✔】ᴏᴛᴀᴋᴜ🧧【✔】ᴇ-ɢɪʀʟ🦄
    【✔】ʟᴏʟɪ🍭    【✔】ɢᴀᴅᴏ🐃
    【✔】ɢᴀʏ🏳️‍🌈     【✔】ʟᴇsʙɪᴄᴀ✂️
    【✔】ᴠᴀᴅɪᴀ💄  【✔】ᴛʀᴀᴠᴇᴄᴏ🍌
                【✔】ɴɪɴɢᴜᴇᴍ ʟɪɢᴀ📵
. ☪︎ • ☁︎. . •.
【 𝐕𝐄𝐌 𝐆𝐀𝐋𝐄𝐑𝐀, 𝐒𝐄 𝐃𝐈𝐕𝐄𝐑𝐓𝐈𝐑 𝐄 𝐅𝐀𝐙𝐄𝐑 𝐏𝐀𝐑𝐓𝐄 𝐃𝐀 𝐅𝐀𝐌𝐈𝐋𝐈𝐀.】🥂`;
              miwa.sendMessage(from, { text: bla }, { quoted: selo });
              break;

            case "wlcm":
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              reply(`▁▂▃▄▅▆▇█ W̷E̷L̷C̷O̷M̷E̷ █▇▆▅▄▃▂▁
👻 ⏤͟͟͞͞ ꦿ𝙴𝚗𝚝𝚛𝚘𝚞 𝙹á 𝙲𝚑𝚎𝚐𝚊 𝚂𝚎 𝙰𝚙𝚛𝚎𝚜𝚎𝚗𝚝𝚊𝚗𝚍𝚘 𝙰í #numerodele#
📸⃤ 𝙁𝙊𝙏𝙊
✍🏼⃤ 𝙉𝙊𝙈𝙀
🧸⃤ 𝙄𝘿𝘼𝘿𝙀
🏘️⃤ 𝘾𝙄𝘿𝘼𝘿𝙀
💞⃤ 𝙍𝙀𝙇𝘼𝘾𝙄𝙊𝙉𝘼𝙈𝙀𝙉𝙏𝙊

▧⃯⃟⚠️ ݈݇─ 𝙰𝚝𝚎𝚗çã𝚘 𝙰𝚜 𝚁𝚎𝚐𝚛𝚊𝚜 𝙽𝚊 𝙱𝚒𝚘 𝙳𝚘 𝙶𝚛𝚞𝚙𝚘 𝙾𝚞 𝚅𝚊𝚒 𝙲𝚘𝚗𝚑𝚎𝚌𝚎𝚛 𝙾 𝙵𝚊𝚖𝚘𝚜𝚘 🤭`);
              break;

            //=================MENU HENTAI================\\
            case "ass":
              if (!isNsfw)
                return reply(
                  `esse comando só funciona com o modo NSFW ativado marque um admadministrador para ativá-lo com o comando ${prefix}Modonsfw 1`
                );
              reply("*Aguarde que já estou enviando✨*");
              const bufferImg = await getBuffer(
                "https://api.brizaloka-api.tk/random/hentai/ass?apikey=brizaloka"
              );
              miwa.sendMessage(from, { image: bufferImg }, { quoted: selo });
              break;

            case "creampie":
              if (!isNsfw)
                return reply(
                  `esse comando só funciona com o modo NSFW ativado marque um admadministrador para ativá-lo com o comando ${prefix}Modonsfw 1`
                );
              reply("*Aguarde que já estou enviando✨*");
              const bufferImg2 = await getBuffer(
                "https://api.brizaloka-api.tk/random/hentai/creampie?apikey=brizaloka"
              );
              miwa.sendMessage(from, { image: bufferImg2 }, { quoted: selo });
              break;

            case "bdsm":
              if (!isNsfw)
                return reply(
                  `esse comando só funciona com o modo NSFW ativado marque um admadministrador para ativá-lo com o comando ${prefix}Modonsfw 1`
                );
              reply("*Aguarde que já estou enviando✨*");
              const bufferImg3 = await getBuffer(
                "https://api.brizaloka-api.tk/random/hentai/bdsm?apikey=brizaloka"
              );
              miwa.sendMessage(from, { image: bufferImg3 }, { quoted: selo });
              break;

            case "incest":
              if (!isNsfw)
                return reply(
                  `esse comando só funciona com o modo NSFW ativado marque um admadministrador para ativá-lo com o comando ${prefix}Modonsfw 1`
                );
              reply("*Aguarde que já estou enviando✨*");
              const bufferImg4 = await getBuffer(
                "https://api.brizaloka-api.tk/random/hentai/incest?apikey=brizaloka"
              );
              miwa.sendMessage(from, { image: bufferImg4 }, { quoted: selo });
              break;

            case "manga":
              if (!isNsfw)
                return reply(
                  `esse comando só funciona com o modo NSFW ativado marque um admadministrador para ativá-lo com o comando ${prefix}Modonsfw 1`
                );
              reply("*Aguarde que já estou enviando✨*");
              const bufferImg5 = await getBuffer(
                "https://api.brizaloka-api.tk/random/hentai/manga?apikey=brizaloka"
              );
              miwa.sendMessage(from, { image: bufferImg5 }, { quoted: selo });
              break;

            case "tentacles":
              if (!isNsfw)
                return reply(
                  `esse comando só funciona com o modo NSFW ativado marque um admadministrador para ativá-lo com o comando ${prefix}Modonsfw 1`
                );
              reply("*Aguarde que já estou enviando✨*");
              const bufferImg6 = await getBuffer(
                "https://api.brizaloka-api.tk/random/hentai/tentacles?apikey=brizaloka"
              );
              miwa.sendMessage(from, { image: bufferImg6 }, { quoted: selo });
              break;

            case "gangbang":
              if (!isNsfw)
                return reply(
                  `esse comando só funciona com o modo NSFW ativado marque um admadministrador para ativá-lo com o comando ${prefix}Modonsfw 1`
                );
              reply("*Aguarde que já estou enviando✨*");
              const bufferImg7 = await getBuffer(
                "https://api.brizaloka-api.tk/random/hentai/gangbang?apikey=brizaloka"
              );
              miwa.sendMessage(from, { image: bufferImg7 }, { quoted: selo });
              break;

            case "uniform":
              if (!isNsfw)
                return reply(
                  `esse comando só funciona com o modo NSFW ativado marque um admadministrador para ativá-lo com o comando ${prefix}Modonsfw 1`
                );
              reply("*Aguarde que já estou enviando✨*");
              const bufferImg8 = await getBuffer(
                "https://api.brizaloka-api.tk/random/hentai/uniform?apikey=brizaloka"
              );
              miwa.sendMessage(from, { image: bufferImg8 }, { quoted: selo });
              break;

            case "ahegao":
              if (!isNsfw)
                return reply(
                  `esse comando só funciona com o modo NSFW ativado marque um admadministrador para ativá-lo com o comando ${prefix}Modonsfw 1`
                );
              reply("*Aguarde que já estou enviando✨*");
              const bufferImg9 = await getBuffer(
                "https://api.brizaloka-api.tk/random/hentai/ahegao?apikey=brizaloka"
              );
              miwa.sendMessage(from, { image: bufferImg9 }, { quoted: selo });
              break;

            case "femdom":
              if (!isNsfw)
                return reply(
                  `esse comando só funciona com o modo NSFW ativado marque um admadministrador para ativá-lo com o comando ${prefix}Modonsfw 1`
                );
              reply("*Aguarde que já estou enviando✨*");
              const bufferImg10 = await getBuffer(
                "https://api.brizaloka-api.tk/random/hentai/femdom?apikey=brizaloka"
              );
              miwa.sendMessage(from, { image: bufferImg10 }, { quoted: selo });
              break;

            case "boobs":
              if (!isNsfw)
                return reply(
                  `esse comando só funciona com o modo NSFW ativado marque um admadministrador para ativá-lo com o comando ${prefix}Modonsfw 1`
                );
              reply("*Aguarde que já estou enviando✨*");
              const bufferImg11 = await getBuffer(
                "https://api.brizaloka-api.tk/random/hentai/boobs?apikey=brizaloka"
              );
              miwa.sendMessage(from, { image: bufferImg11 }, { quoted: selo });
              break;

            case "amador":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { amador } = require("./nsfw/AmadorVideo/Amador.js");
              var nsfw = amador[Math.floor(Math.random() * amador.length)];
              miwa.sendMessage(
                sender,
                {
                  video: { url: nsfw },
                  caption: `*🔞Vídeo Amador🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "onlyfans":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { onlyfans } = require("./nsfw/OnlyVideo/Onlyfans.js");
              var nsfw = onlyfans[Math.floor(Math.random() * onlyfans.length)];
              miwa.sendMessage(
                sender,
                {
                  video: { url: nsfw },
                  caption: `*🔞Onlyfans Vídeo🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "porno":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { PornoVid } = require("./nsfw/PornoVideo/PornoVid.js");
              var nsfw = PornoVid[Math.floor(Math.random() * PornoVid.length)];
              miwa.sendMessage(
                sender,
                {
                  video: { url: nsfw },
                  caption: `*🔞Pornô Vídeo🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "egirlvideo":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { EgirlVid } = require("./nsfw/EgirlVideo/EgirlVid.js");
              var nsfw = EgirlVid[Math.floor(Math.random() * EgirlVid.length)];
              miwa.sendMessage(
                sender,
                {
                  video: { url: nsfw },
                  caption: `*🔞Egirl Vídeo🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "aline":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Aline } = require("./nsfw/AlineFaria/Aline.js");
              var nsfw = Aline[Math.floor(Math.random() * Aline.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Aline Faria🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "alifox":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { AlineFx } = require("./nsfw/AlineFox/AlineFx.js");
              var nsfw = AlineFx[Math.floor(Math.random() * AlineFx.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Aline Fox🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "alycia":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Alycia } = require("./nsfw/AlyciaRibeiro/Alycia.js");
              var nsfw = Alycia[Math.floor(Math.random() * Alycia.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Alycia Ribeiro🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "amichan":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Amiichan } = require("./nsfw/Amiichan/Amiichan.js");
              var nsfw = Amiichan[Math.floor(Math.random() * Amiichan.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Amiichan🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "aninha":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Aninha } = require("./nsfw/AninhaLopes/Aninha.js");
              var nsfw = Aninha[Math.floor(Math.random() * Aninha.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Aninha Lopes🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "victoria":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Victoria } = require("./nsfw/VictoriaMatoso/Victoria.js");
              var nsfw = Victoria[Math.floor(Math.random() * Victoria.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Victoria Matoso🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "cum":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { cum } = require("./nsfw/nsfw.js");
              var totalnsfw = cum[Math.floor(Math.random() * cum.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "ero":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { ero } = require("./nsfw/nsfw.js");
              var totalnsfw = ero[Math.floor(Math.random() * ero.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "femdom":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { femdom } = require("./nsfw/nsfw.js");
              var totalnsfw = femdom[Math.floor(Math.random() * femdom.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "foot":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { foot } = require("./nsfw/nsfw.js");
              var totalnsfw = foot[Math.floor(Math.random() * foot.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "gangbang":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { gangbang } = require("./nsfw/nsfw.js");
              var totalnsfw =
                gangbang[Math.floor(Math.random() * gangbang.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "ganbganb":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { ganbganb } = require("./nsfw/animes.js");
              var totalnsfw =
                ganbganb[Math.floor(Math.random() * ganbganb.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "glasses":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { glasses } = require("./nsfw/nsfw.js");
              var totalnsfw =
                glasses[Math.floor(Math.random() * glasses.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "blowjob":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { blowjob } = require("./nsfw/nsfw.js");
              var totalnsfw =
                blowjob[Math.floor(Math.random() * blowjob.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "cuckold":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { cuckold } = require("./nsfw/nsfw.js");
              var totalnsfw =
                cuckold[Math.floor(Math.random() * cuckold.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "bdsm":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { bdsm } = require("./nsfw/nsfw.js");
              var totalnsfw = bdsm[Math.floor(Math.random() * bdsm.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "zettai":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { zettai } = require("./nsfw/nsfw.js");
              var totalnsfw = zettai[Math.floor(Math.random() * zettai.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "kasedaiki":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { kasedaiki } = require("./nsfw/nsfw.js");
              var totalnsfw =
                kasedaiki[Math.floor(Math.random() * kasedaiki.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "jahy":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { jahy } = require("./nsfw/nsfw.js");
              var totalnsfw = jahy[Math.floor(Math.random() * jahy.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "masturbation":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { masturbation } = require("./nsfw/nsfw.js");
              var totalnsfw =
                masturbation[Math.floor(Math.random() * masturbation.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "orgy":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { orgy } = require("./nsfw/nsfw.js");
              var totalnsfw = orgy[Math.floor(Math.random() * orgy.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "panties":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { panties } = require("./nsfw/nsfw.js");
              var totalnsfw =
                panties[Math.floor(Math.random() * panties.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "pussy":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { pussy } = require("./nsfw/nsfw.js");
              var totalnsfw = pussy[Math.floor(Math.random() * pussy.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "boobs":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { boobs } = require("./nsfw/nsfw.js");
              var totalnsfw = boobs[Math.floor(Math.random() * boobs.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "tentacles":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { tentacles } = require("./nsfw/nsfw.js");
              var totalnsfw =
                tentacles[Math.floor(Math.random() * tentacles.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "thighs":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { thighs } = require("./nsfw/nsfw.js");
              var totalnsfw = thighs[Math.floor(Math.random() * thighs.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "yuri":
              if (isGroup && !isNsfw)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isGroup && !IsPremium) {
                setTimeout(() => {
                  reagir(from, "🚫");
                }, 300);
                reply(
                  "[ ❗ ] *Este recurso no PV só está liberado para os usuários VIP* ❌"
                );
                return miwa.sendMessage(
                  from,
                  {
                    audio: { url: "./database/audios/vip.mp3" },
                    mimetype: "audio/mp4",
                    ptt: true,
                  },
                  { quoted: info }
                );
              }
              setTimeout(() => {
                reagir(from, "😈");
              }, 300);
              reply(`${isGroup ? "*Olha o PV amor...*" : "Enviando"} 😈`);
              const { yuri } = require("./nsfw/nsfw.js");
              var totalnsfw = yuri[Math.floor(Math.random() * yuri.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: totalnsfw },
                  caption: `*Aqui está* ${pushname} 😳🔥`,
                },
                { quoted: info }
              );
              break;

            case "belle":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Belle } = require("./nsfw/BelleDelphine/Belle.js");
              var nsfw = Belle[Math.floor(Math.random() * Belle.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Belle Delphine🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "brenda":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Brenda } = require("./nsfw/BrendaTrindade/Brenda.js");
              var nsfw = Brenda[Math.floor(Math.random() * Brenda.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Brenda Trindade🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "cami":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Cami } = require("./nsfw/CamiBrito/Cami.js");
              var nsfw = Cami[Math.floor(Math.random() * Cami.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Cami Brito🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "clowniac":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Clowniac } = require("./nsfw/Clowniac/Clowniac.js");
              var nsfw = Clowniac[Math.floor(Math.random() * Clowniac.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Clowniac🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "feh":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Feh } = require("./nsfw/FehGalvao/Feh.js");
              var nsfw = Feh[Math.floor(Math.random() * Feh.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Feh Galvão🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "giovanna":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const {
                Giovanna,
              } = require("./nsfw/GiovannaCampomar/Giovanna.js");
              var nsfw = Giovanna[Math.floor(Math.random() * Giovanna.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Giovanna Campomar🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "isadora":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Isadora } = require("./nsfw/IsadoraMartinez/Isadora.js");
              var nsfw = Isadora[Math.floor(Math.random() * Isadora.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Isadora Martinez🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "isa":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Isa } = require("./nsfw/IsaWaifu/Isa.js");
              var nsfw = Isa[Math.floor(Math.random() * Isa.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Isa Waifu🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "lay":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Lay } = require("./nsfw/LayMuniz/Lay.js");
              var nsfw = Lay[Math.floor(Math.random() * Lay.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Lay Muniz🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "leticia":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Leticia } = require("./nsfw/LeticiaShirayuki/Leticia.js");
              var nsfw = Leticia[Math.floor(Math.random() * Leticia.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Letícia Shirayuki🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "marina":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Marina } = require("./nsfw/MarinaMui/Marina.js");
              var nsfw = Marina[Math.floor(Math.random() * Marina.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Marina Mui🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "maru":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Maru } = require("./nsfw/MaruKarv/Maru.js");
              var nsfw = Maru[Math.floor(Math.random() * Maru.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Maru Karv🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "princesa":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Princesa } = require("./nsfw/McPrincesa/Princesa.js");
              var nsfw = Princesa[Math.floor(Math.random() * Princesa.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Mc Princesa🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "meladinha":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Me1adinha } = require("./nsfw/Meladinha/Meladinha.js");
              var nsfw =
                Me1adinha[Math.floor(Math.random() * Me1adinha.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Me1adinha🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "nath":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Nath } = require("./nsfw/NathBister/Nath.js");
              var nsfw = Nath[Math.floor(Math.random() * Nath.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Nath🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "nega":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Nega } = require("./nsfw/NegaBarbie/Nega.js");
              var nsfw = Nega[Math.floor(Math.random() * Nega.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Nega Barbie🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "polonesa":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Polonesa } = require("./nsfw/PolonesaDoHype/Polonesa.js");
              var nsfw = Polonesa[Math.floor(Math.random() * Polonesa.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Polonesa Do Hype🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "rute":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Rute } = require("./nsfw/RuteRocha/Rute.js");
              var nsfw = Rute[Math.floor(Math.random() * Rute.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Rute Rocha🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "celestine":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const {
                Celestine,
              } = require("./nsfw/VitaCelestine/Celestine.js");
              var nsfw =
                Celestine[Math.floor(Math.random() * Celestine.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Vita Celestine🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "carnie":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { Carniello } = require("./nsfw/Carniello/Carniello.js");
              var nsfw =
                Carniello[Math.floor(Math.random() * Carniello.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Carniello🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "gotica":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              reagir(from, "😈");
              reply(`${isGroup ? "*Olha o PV rsrs...*" : "Enviando"} 👀🔥`);
              const { GoticaFT } = require("./nsfw/GoticaFoto/Gotica.js");
              var nsfw = GoticaFT[Math.floor(Math.random() * GoticaFT.length)];
              miwa.sendMessage(
                sender,
                {
                  image: { url: nsfw },
                  caption: `*🔞Gótica Foto🔞*\n*By: ${NomeDoBot} And ${NickDono}*`,
                },
                { quoted: info }
              );
              break;

            case "phsearch":
              if (!isNsfw && isGroup)
                return reply(
                  `É necessário que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`
                );
              reagir(from, "🫣");
              if (!q)
                return reply(
                  `*${tempo}, ${pushname}... você esqueceu de colocar o tema da pesquisa*\n~Exemplo: ${
                    prefix + command
                  } orgasmo~`
                );
              if (!isPremium) return reply(enviar.msg.premium);
              try {
                const response = await fetch(
                  `http://node-br1.starhosting.com.br:22539/api/pornhubsearch?q=${q}&apitoken=` +
                    SHADOW_CONSULTAS
                );
                const consRes = await response.json();
                let message = "";
                for (let i = 0; i < 10; i++) {
                  const titulo = consRes.resultado[i].titulo;
                  const duracao = consRes.resultado[i].duração;
                  const link = consRes.resultado[i].link;
                  message += `📝 *Título:* _${titulo}_\n⏳ *Duração:* _${duracao}_\n🔗 *Link:* _${link}_\n\n`;
                }
                reply(
                  `${
                    isGroup
                      ? `_*Pesquisando por "${q}", aguarde...*_\n~Obs: O resultado será enviado no seu privado.~`
                      : `Enviando`
                  } 👀🔥`
                );
                miwa.sendMessage(sender, { text: message }, { quoted: info });
              } catch (e) {
                reply(`Erro`);
              }
              break;

            //============================================\\

/*
            case "alugarbot":
            case "loja":
              {
                reagir(from, "🛒");
                moneybot = `*_»⟩Tabela de preços para alugar o bot ⟨«_*

1️⃣⧽ R$ 10.00 (30 dias)
2️⃣⧽ R$ 20.00 (60 dias)
3️⃣⧽ R$ 30.00 (90 dias)
4️⃣⧽ R$ 40.00 (120 dias)
5️⃣⧽ R$ 50.00 (150 dias)

❪🍧ฺ࣭࣪͘ꕸ▸ _Clique na foto para alugar_`;
                var download = [
                  `ʟᴏᴀᴅɪɴɢ〘▒▒▒▒▒▒▒▒▒▒〙0%`,
                  `ʟᴏᴀᴅɪɴɢ〘█▒▒▒▒▒▒▒▒▒〙10%`,
                  `ʟᴏᴀᴅɪɴɢ〘███▒▒▒▒▒▒▒〙35%`,
                  `ʟᴏᴀᴅɪɴɢ〘█████▒▒▒▒▒〙51%`,
                  `ʟᴏᴀᴅɪɴɢ〘███████▒▒▒〙62%`,
                  `ʟᴏᴀᴅɪɴɢ〘████████▒▒〙80%`,
                  `ʟᴏᴀᴅɪɴɢ〘██████████〙100%`,
                  `𝙻𝙾𝙰𝙳𝙸𝙽𝙶 𝙲𝙾𝙼𝙿𝙻𝙴𝚃𝙴𝙳...`,
                ];
                let { key } = await miwa.sendMessage(
                  from,
                  { text: tempo + " " + pushname },
                  { quoted: info }
                );
                await sleep(2000);
                for (let i = 0; i < download.length; i++) {
                  await miwa.sendMessage(
                    from,
                    { text: download[i], edit: key },
                    { quoted: info }
                  );
                }
                miwa.sendMessage(
                  from,
                  {
                    text: moneybot,
                    contextInfo: {
                      externalAdReply: {
                        title: `👑⟩ ${NickDono}`,
                        body: `🤖⟩ ${NomeDoBot}`,
                        thumbnail: await getBuffer(
                          `https://i.imgur.com/Fc8qvp1.jpeg`
                        ),
                        renderLargerThumbnail: true,
                        mediaType: 1,
                        showAdAttribution: true,
                        sourceUrl: `https://wa.me/5516994232898?text=Ol%C3%A1,%20gostaria%20de%20alugar%20o%20akiyama%20Bot`,
                      },
                    },
                  },
                  { quoted: info }
                );
              }
              break;
            */

            //================COMANDO VIDEOS===============\\

            case "tiktok3":
            case "t":
            case "ttk":
            case "ttkmp4":
            case "tiktokvideo":
              try {
                if (!q.includes("tiktok"))
                  return reply(`${prefix + command} link do Tiktok`);
                ABC = await fetchJson(
                  `https://miwa-apis.online/download/tiktok6?url=${q}&apikey=` +
                    API_KEY_MIWA
                );
                i = ABC.resultado;
                if (i.type == `video`) {
                  reagir(from, "🎥");
                  reply(`❪𝙴𝚗𝚟𝚒𝚊𝚗𝚍𝚘 𝚂𝚎𝚞 𝚅í𝚍𝚎𝚘ฺ࣭࣪͘ꕸ▸`);
                  sendVideo(
                    from,
                    i.video.playAddr[0],
                    `〘 *ETS DE VAGINAS O BRABO* 〙`,
                    info
                  );
                }
              } catch (e) {
                console.log(`erro`);
                return reply(`broxou...`);
              }
              break;

            case "kwai":
              try {
                response2 = await fetch(
                  `https://testeapi.bruxiintk.repl.co/api/kwai?apikey=devs30&link=${q}`
                );
                data = await response2.json();

                if (data && data.length > 0) {
                  const videoUrl = data[0].video;
                  miwa.sendMessage(from, {
                    video: {
                      url: `${videoUrl}`,
                      caption: "Aqui está seu vídeo 🥵",
                    },
                  });
                } else {
                  reply("Não foi possível obter o URL do vídeo.");
                }
              } catch (error) {
                console.log(error);
                reply("Deu Erro Api Ai Ó 🤓");
              }
              break;

            //================================================\\

            //====================JOGOS======================\\
            case "pau":
              pau = `${Math.floor(Math.random() * 35)}`;
              const tamanho = pau;
              if (tamanho < 13) {
                pp = "só a fimose";
              } else if (tamanho == 13) {
                pp = "passou da média😳";
              } else if (tamanho == 14) {
                pp = "passou da média😳";
              } else if (tamanho == 15) {
                pp = "eita, vai pegar manga?";
              } else if (tamanho == 16) {
                pp = "eita, vai pegar manga?";
              } else if (tamanho == 17) {
                pp = "calma man, a mina não é um poço😳";
              } else if (tamanho == 18) {
                pp = "calma man, a mina não é um poço😳";
              } else if (tamanho == 19) {
                pp = "calma man, a mina não é um poço😳";
              } else if (tamanho == 20) {
                pp = "você tem um poste no meio das pernas";
              } else if (tamanho == 21) {
                pp = "você tem um poste no meio das pernas";
              } else if (tamanho == 22) {
                pp = "você tem um poste no meio das pernas";
              } else if (tamanho == 23) {
                pp = "você tem um poste no meio das pernas";
              } else if (tamanho == 24) {
                pp = "você tem um poste no meio das pernas";
              } else if (tamanho > 25) {
                pp = "vai procurar petróleo com isso?";
              }
              hasil = `╭═════════════════ ⪩
╰╮ू ፝͜❥⃟🍌𝐑𝐄𝐒𝐔𝐋𝐓𝐀𝐃𝐎 𝐃𝐎 𝐏𝐀𝐔👁⃟ू ፝͜❥
╭┤➢☃️ 「𝘖𝘓𝘈: ${pushname}」
╭┤➢🍆「𝘚𝘌𝘜 𝑃𝐴𝑈 𝘛𝘌𝘔: ${pau}𝘊𝘔
╭┤➢✉️ 「${pp}」
┃╰══ ⪨
╰═════════════════ ⪨`;
              reply(hasil);
              break;

            case "chifre":
              random2 = `${Math.floor(Math.random() * 35)}`;
              const tamanho2 = random2;
              if (tamanho2 < 13) {
                pp = "muito corno🤟";
              } else if (tamanho2 == 13) {
                pp = "meio corno😬";
              } else if (tamanho2 == 14) {
                pp = "muito corno😳";
              } else if (tamanho2 == 15) {
                pp = "cuidado com o poste";
              } else if (tamanho2 == 16) {
                pp = "vai pegar manga com esse chifre?";
              } else if (tamanho2 == 17) {
                pp = "eita poha, levou muita galha em😳";
              } else if (tamanho2 == 18) {
                pp = "cuidado com os fios de energia😳";
              } else if (tamanho2 == 19) {
                pp = "como você aguenta esse peso todo😳";
              } else if (tamanho2 == 20) {
                pp = "recorde de maior chifre, parabéns";
              } else if (tamanho2 == 21) {
                pp = "parabéns, belos chifres";
              } else if (tamanho2 == 22) {
                pp = "parabéns, belos chifres";
              } else if (tamanho2 == 23) {
                pp = "parabéns, belos chifres";
              } else if (tamanho2 == 24) {
                pp = "parabéns, belos chifres";
              } else if (tamanho2 > 25) {
                pp = "vai construir uma torre com isso?";
              }
              hasil = `╭═════════════════ ⪩
╰╮ू ፝͜❥⃟💡𝐑𝐄𝐒𝐔𝐋𝐓𝐀𝐃𝐎 𝐃𝐎 𝐂𝐇𝐈𝐅𝐑𝐄👁⃟ू ፝͜❥
╭┤➢☃️ 「𝘖𝘓𝘈: ${pushname}」
╭┤➢🤟 「𝘚𝘌𝘜 𝘊𝘏𝘐𝘍𝘙𝘌 𝘛𝘌𝘔: ${random2}𝘊𝘔
╭┤➢✉️ 「${pp}」
┃╰══ ⪨
╰═════════════════ ⪨`;
              reply(hasil);
              break;

            case "morte":
              morrer1 = `${Math.floor(Math.random() * 31)}`;
              morrer2 = `${Math.floor(Math.random() * 9)}`;
              var ano = "2";
              ano1 = `${Math.floor(Math.random() * 300)}`;
              morrer = `${morrer1}.${morrer2}.${ano}${ano1}`;
              gilli = `╭═════════════════ ⪩
╰╮ू ፝͜❥⃟😵𝐃𝐀𝐓𝐀 𝐃𝐀 𝐒𝐔𝐀 𝐌𝐎𝐑𝐓𝐄👁⃟ू ፝͜❥
╭┤➢☃️ 「𝘖𝘓𝘈: ${pushname}」
╭┤➢📆 「𝘋𝘈𝘛𝘈: ${morrer1}/0${morrer2}/${ano}${ano1}
╭┤➢💐 「meus pêsames」
┃╰══ ⪨
╰═════════════════ ⪨`;
              reply(gilli);
              break;

            //================================================\\

            //=============COMANDOS TEXTO==================\\
            case "recado": //BY:GILLIARDI CONTEÚDOS
            case "recadowhatsapp":
              rate = body.slice(6);
              var foda = [
                "Felicidade é só questão de ser.",
                "Acredite: sempre tem algo bom guardado para você",
                "Concentre-se no que está buscando, não no que está deixando para trás.",
                "A vida é muito curta pra não viver sorrindo por aí!",
                "Onde há vontade, há chance de dar certo!",
                "Dance no seu ritmo! 💃",
                "Só você sabe o que te deixará feliz.",
                "Não se estresse com o que está fora do seu controle.",
                "Aprenda a apreciar as voltas que o mundo dá.",
                "Comece a se amar. O resto virá depois.",
                "Maior que a tristeza de não haver vencido é a vergonha de não ter lutado!",
                "Reciprocidade, para as coisa boas. Imunidade, para as coisas ruins.",
                "Coragem, a vida gosta de pessoas destemidas.",
                "Compartilhe seus sentimentos. Nem todas as pessoas sabem adivinhar",
                "Continue caminhando, não tem problema se for devagar.",
                "Melhor amar do que ser amargo!",
                "Não corrigir nossas falhas é o mesmo que cometer novos erros",
                "Quando o caminho se torna duro, só os duros continuam caminhando",
                "Florescer exige passar por todas as estações!",
                "Quando as coisas simples parecem especiais, você percebe como a vida pode ser boa.",
                "Os aprendizados deixam a vida especial.",
                "Feliz daquele que encontra o verdadeiro amor sem as cicatrizes da decepção",
              ];
              var gilli = foda[Math.floor(Math.random() * foda.length)];
              reply(` ${gilli} `);
              break;

            case "frasecriativas":
              rate = body.slice(6);
              var foda = [
                "Não conte os dias, viva-os! ☀️😎",
                "Tudo que vem, vem com algum propósito. Assim como tudo que vai, vai por uma razão. 🌸🌀",
                "Eu não gosto de cobrar atitude de ninguém porque eu tenho de sobra. 😉",
                "Gostar, eu gosto de muita gente, mas a minha prioridade sempre será eu mesma. ✨",
                "As pessoas que criticam, são as mesmas que copiam. 👀",
                "Aprendi que meu único limite é a minha mente. 🌎",
                "Fazendo dos meus sonhos, um objetivo. 💭",
              ];
              var gilli = foda[Math.floor(Math.random() * foda.length)];
              reply(` ${gilli} `);
              break;

            case "frasebonita":
              rate = body.slice(6);
              var foda = [
                "Viver em paz é um luxo. É saber que, apesar dos pesares, ficar bem é prioridade. ✨",
                "Somos ferramentas para a vida seguir em frente. 🌎",
                "Ao invés de pensar nas marcas que a vida deixa em você, reflita: Quais as marcas você está deixando na vida? 💭",
                "Segue seu coração, tudo vai dar certo. ♥️",
                "Permita-se sentir tudo que está dentro de você! ✨",
                "Cada etapa da vida, lhe demandará uma versão mais forte de você. 🍃",
                "A vida é como uma rosa, cada pétala um sonho, cada espinho uma realidade🌷🙉",
                "A arma dos fracos é criticar os fortes. A arma dos fortes é ignorar os fracos!👌",
                "Pare de olhar para trás. Você já sabe onde esteve, agora precisa saber pra onde vai🌙🍃",
                "Só faz sentido o que te faz sentir.",
              ];
              var gilli = foda[Math.floor(Math.random() * foda.length)];
              reply(` ${gilli} `);
              break;

            case "frasedeamor":
            case "frasesdeamor":
              rate = body.slice(6);
              var amor = [
                "Me perguntaram qual era o meu lugar favorito e eu respondi: Você!",
                "Amar alguém profundamente te dá forças. Ser amado profundamente por alguém te dá coragem.",
                "Eu orei por você sem te conhecer. E agora tenho você aqui, muito mais do que eu pedi.",
                "Acordar com você no meu pensamento é a forma mais doce de começar meu dia.",
                "Não quero a ilusão de um amor perfeito, quero a felicidade de um amor verdadeiro.",
                "O verdadeiro amor nunca se desgasta. Quanto mais se dá, mais se tem.",
                "Meu bem, eu que nunca me lembro de nada não me esqueço de você.",
                "Não procure alguém que te complete. Complete a si mesmo e procure alguém que te transborde.",
              ];
              var gilliardi = amor[Math.floor(Math.random() * amor.length)];
              reply(` ${gilliardi} `);
              break;

            case "cantadas":
            case "cantada":
              rate = body.slice(6);
              var cantada = [
                "Existe um vazio no meu coração que tem as suas medidas. Quer entrar?",
                "Não existe amor à primeira vista. O que existe é a pessoa certa, no momento certo. Você por acaso estava lá!",
                "O seu sorriso é o vírus que infectou o meu coração. ",
                "Se o mar fosse um sentimento... seria tão grande quanto o amor que sinto por você. ",
                " Você sabe qual é o motivo do meu sorriso todos os dias? A primeira palavra dessa frase.",
                "O Ministério da Saúde adverte: te ver longe de mim me faz sentir saudades. ",
                "Quem te conhece deve ter que tomar calmante pro resto da vida, não estou certo? Você deixa qualquer um doido por você! ",
                " Amar você é loucura? Então não tem psiquiatra que me cure.",
              ];
              var gilliardi =
                cantada[Math.floor(Math.random() * cantada.length)];
              reply(` ${gilliardi} `);
              break;

            case "ansiedade":
            case "ansiedades":
              rate = body.slice(6);
              var ansiedade = [
                "Quanto mais medo eu sinto, mais trêmulo fico de ansiedade. Eu me fortaleço nas dificuldades.",
                "A ansiedade me acompanha mundo afora, mas sei que para ser feliz preciso dela como precaução, como freio para meus sonhos infinitos....",
                "Já não me importa o tempo perdido, eu sinto uma ansiedade imensa de mergulhar no que ainda não vivi. ",
                "Ansiedade é o desejo para que o futuro se transforme logo no seu maior presente. ",
                "De repente nos vemos sofrendo antecipadamente por causa de algo que talvez jamais aconteça, é a agulha da ansiedade a nos espetar... ",
                "A ansiedade é o acelerador que ganhamos de brinde por não sabermos esperar nosso próprio tempo. ",
                "Não me sinto bem em parte nenhuma e ando cheio de ansiedade de coisas que não posso nem sei realizar. ",
                "De repente nos vemos nus diante da ansiedade que nos deixa cegos e indefesos, porém dentro de nós estão as armas para nos livrar de suas garras. ",
              ];
              var gilliardi =
                ansiedade[Math.floor(Math.random() * ansiedade.length)];
              reply(` ${gilliardi} `);
              break;

            case "indiretas":
            case "indireta":
              rate = body.slice(6);
              var indireta = [
                "Que essa frente fria consiga amenizar esse seu fogo.",
                "Por que eu ainda fico lembrando de tudo aquilo que você já esqueceu?",
                "Não olho para o passado, pois tudo de bom que tive nele está no meu presente, o que ficou pra trás foi só o que não servia pra nada. ",
                "Algumas pessoas merecem um grande aplauso pelo teatro que fazem! 👏👏👏 ",
                " Meu cupido é gari, só me traz lixo e você é a prova disso...",
                " Não lhe compete julgar a realidade que você não vive. 💥",
                " Às vezes, sem querer, a gente esbarra em alguém que vale a pena.",
                " Não sei porque ainda me explico. Não devo explicações. Só para os meus pais, e somente até aos 18.",
              ];
              var gilliardi =
                indireta[Math.floor(Math.random() * indireta.length)];
              reply(` ${gilliardi} `);
              break;

            case "piadas":
            case "piada":
              rate = body.slice(6);
              var piada = [
                "O que é um pontinho brilhando no jardim? Uma formiga de aparelho!",
                "O que é um pontinho marrom cantando? Carlinhos Brown.",
                " Como o Batman faz para abrir a bat-caverna? Ele bat-palma.",
                " O que é um pontinho verde em Pernambuco? É um frevo de 4 folhas.",
                " Por que as loiras entram no banco rebolando? Para movimentar a poupança.",
                " Qual a semelhança entre uma loira e uma garrafa de cerveja? Do pescoço pra cima elas não tem nada.",
                "Qual é a diferença entre a bicicleta e o vaso sanitário? Resp: a bicicleta você senta pra correr e o vaso sanitário você corre pra sentar! ",
                "- Joãozinho você bebe 3 vinhos, depois bebe + 4 vinhos e depois + 7. Quantos vinhos voce bebeu? - Puxa!! Isto já é sacanagem, a esta hora, eu já estou bêbado! ",
              ];
              var gilliardi = piada[Math.floor(Math.random() * piada.length)];
              reply(` ${gilliardi} `);
              break;

            case "roubarfoto":
              if (!isGroup)
                return reply("Este comando só pode ser usado em grupos!");
              setTimeout(() => {
                reagir(from, "💖");
              }, 100);
              try {
                let user2;
                if (
                  info.message.extendedTextMessage?.contextInfo?.quotedMessage
                ) {
                  user2 =
                    info.message.extendedTextMessage.contextInfo.participant;
                } else if (
                  info.message.extendedTextMessage?.contextInfo
                    ?.mentionedJid?.[0]
                ) {
                  user2 =
                    info.message.extendedTextMessage.contextInfo
                      .mentionedJid[0];
                } else {
                  user2 = sender;
                }

                try {
                  var ppimg = await miwa.profilePictureUrl(user2, "image");
                } catch {
                  var ppimg =
                    "https://telegra.ph/file/265c672094dfa87caea19.jpg";
                }

                let username2 = user2.split("@")[0];
                miwa.sendMessage(
                  from,
                  {
                    image: { url: ppimg },
                    caption: `*_🎭 A foto de perfil do(a)_* *@${username2}:*`,
                    mentions: [user2],
                  },
                  { quoted: info }
                );
              } catch (e) {
                console.log(e);
              }
              break;
            //================================================\\

            case "ptvmsg": //Descoberto por Droidzin Modder && adaptado por Bkz Modz
              if (!isQuotedVideo && !info.message.videoMessage) {
                return reply(
                  "Marque um vídeo/gif que você deseja converter para mensagem de vídeo."
                );
              }
              miwa.sendMessage(
                from,
                {
                  ptvMessage: isQuotedVideo
                    ? info.message.extendedTextMessage.contextInfo.quotedMessage
                        .videoMessage
                    : info.message.videoMessage,
                },
                {}
              );
              break;

              case "owner":
                case "odono":
                case "dono":
                case "criador":
                case "infodono":
                  {
                    miwa.sendMessage(from, {
                      react: { text: "👑", key: info.key },
                    });
                    let vcard =
                    "BEGIN:VCARD\n" +
                    "VERSION:3.0\n" +
                    "N:Ets de Vaginas\n" +
                    "FN:Ets de Vaginas\n" +
                    "TEL;waid=554588037606:+55 45 98803-7606\n" +
                    "END:VCARD";
                    miwa.sendMessage(
                      from,
                      { contacts: { displayName: "Ets de Vaginas", contacts: [{ vcard }] } },
                      { quoted: info }
                    );
                  }
                  break;
    
            case "fakemsg":
            case "fakechat":
              tp = args.join(" ");
              if (
                tp.includes(`${prefix}`) ||
                tp.includes(`&`) ||
                tp.includes(`/`) ||
                tp.includes(`#`) ||
                tp.includes(`+`)
              )
                return reply(
                  `_*Ei, ${pushname}. Você não pode usar comandos neste comando*_ 🤨`
                );
              if (!isGroup) return reply(mess.onlyGroup());
              var [repplace, tarrget, bott] = q.split("|");
              var m_ =
                info.message.extendedTextMessage &&
                info.message.extendedTextMessage.contextInfo &&
                info.message.extendedTextMessage.contextInfo.mentionedJid
                  ? info.message.extendedTextMessage.contextInfo.mentionedJid[0]
                  : null;
              if (m_ && tarrget && bott) {
                miwa.sendMessage(
                  from,
                  { text: bott },
                  {
                    quoted: {
                      key: { fromMe: false, participant: m_ },
                      message: { conversation: tarrget },
                    },
                  }
                );
              } else {
                reply(
                  `Crie mensagens FAKES com qualquer um! Exemplo: ${prefix}fakechat *@pessoa|msg dele|sua msg*`
                );
              }
              break;

            case "grupofc":
              reply("𝘼𝙌𝙐𝙄 𝙀𝙎𝙏𝘼 𝙊 𝙇𝙄𝙉𝙆 𝘿𝙊 𝙂𝙍𝙐𝙋𝙊 𝙊𝙁𝙄𝘾𝙄𝘼𝙇 𝙈𝙄𝙒𝘼 𝘽𝙊𝙏");
              await sleep(1000);
              reply("https://www.flamengo.com.br/");
              break;

/*            case "infobot":
            case "miwainfo":
            case "info":
              reagir(from, "🥰");
              ib = `${tempo_emoji} _${tempo} ${pushname}, caiu de paraquedas e não sabe como funciona tudo por aqui? Chega mais..._

🤖 _A Miwa é uma bot altamente sofisticado, capaz de operar de forma remota e automática em seu grupo, com altas funções de administração e diversão. Nossa equipe se empenha diariamente para manter o bot online com os melhores sistemas que você pode encontrar._

💡 _Quanto ao uso dos comandos, o prefixo usado é ( ${prefix} ), basta digitar o mesmo na frente do comando para que esse seja executado... Claro que vc pode acabar digitando errado ou pode ser que o comando não exista. Sendo assim, olhe no ${prefix}menu e não exite em procurar o mesmo nos diversos menus que estão organizados lá._

_-> Modo de uso do prefixo:_
❌ menu${prefix}
❌ ${prefix} menu
✅ ${prefix}menu

💬 *NOSSO CHAT:* ${prefix}miwagp
🛒 *Se desejas alugar o bot para seu grupo digite:* ${prefix}alugar
🤔 *Dúvidas? Use:* ${prefix}suporte
❓ *Alguma sugestão ? Use o comando:* ${prefix}sugestão
💾 *Algum bug ? relate à nossa equipe no comando:* ${prefix}bug`;
              reply(ib);
              break;

            case "miwagp":
            case "miwagrupo":
            case "miwagroup":
            case "link":
            case "chatoficial":
              reagir(from, `✅`);
              try {
                nome = (await miwa.groupMetadata(obrigadoEXT.idchatofc))
                  .subject;
                link = await miwa.groupInviteCode(obrigadoEXT.idchatofc);
                try {
                  ppUrl = await miwa.profilePictureUrl(
                    obrigadoEXT.idchatofc,
                    "image"
                  );
                } catch {
                  ppUrl = semfoto;
                }
                if (isGroup) {
                  linkgp = `*Link do nosso grupo:* ✅

https://www.flamengo.com.br/`;
                  sendUrlText(
                    from,
                    linkgp,
                    nome,
                    `Chat OFC do Miwa 4.1.0`,
                    ppUrl,
                    `https://www.flamengo.com.br/` + link,
                    info
                  );
                } else {
                  sendUrlDoc(
                    from,
                    `*Link do nosso Chat...* ✅

🔗 _Clique na imagem para entrar_`,
                    `application/pdf`,
                    `${tempo_emoji}⃤ ${tempo.toUpperCase()}`,
                    10000,
                    nome,
                    "",
                    ppUrl,
                    `https://www.flamengo.com.br/`,
                    info
                  );
                }
              } catch {
                reply("Erro");
              }
              break;

            case "miwasite":
            case "miwalink":
              reagir(from, "🌐");
              sendUrlText(
                from,
                `*Site oficial da miwa:* ✅\n\n` + akiyamasite,
                `🔎 ${NomeDoBot} 🔍`,
                `Um site para Dev's e programadores de bot`,
                logoslink.logo,
                akiyamasite,
                info
              );
              break; */

            case "watercolor":
            case "1917":
            case "multicolor":
            case "generator":
            case "naturalleaves":
            case "candycane":
            case "christmas":
            case "merrychristmas":
            case "3ddeep":
            case "drug":
            case "americanflag":
            case "scifi":
            case "wonderful":
            case "holiday":
            case "technology":
            case "winter":
            case "sandsummer":
            case "sandwriting":
            case "sandengraved":
            case "summerysand":
            case "glue":
            case "dark":
            case "galaxystyle":
            case "minion":
            case "horrorgift":
            case "holographic":
            case "deluxe":
            case "glossyblue":
            case "deluxegold":
            case "glossycarbon":
            case "fabric":
            case "neontext":
            case "halloweenfire":
            case "metaldark":
            case "darkgold":
            case "joker":
            case "wicker":
            case "firework":
            case "steeltext":
            case "goldfoil":
            case "ultragloss":
            case "denimtext":
            case "stargreen":
            case "captain":
            case "toxic":
            case "ninjalogo":
            case "purpleshiny":
              textin = args.join(" ");
              if (!textin) return reply("Cade o texto?");
              reply(mess.wait());
              bla = await axios(
                `http://node2.spacehost.cloud:2007/api/shadow?texto=${textin}&apikey=` +
                  API_KEY_MIWA
              );
              miwa
                .sendMessage(from, { image: bla }, { quoted: selo })
                .catch((rs) => {
                  reply("ERROR!!");
                });
              break;

            case "cosplay":
            case "loli":
            case "waifu":
            case "shota":
            case "yotsuba":
            case "shinomiya":
            case "yumeko":
            case "tejina":
            case "chiho":
            case "boruto":
            case "kaori":
            case "shizuka":
            case "kaga":
            case "kotori":
            case "mikasa":
            case "akiyama":
            case "gremory":
            case "izuku":
            case "shina":
            case "kagura":
            case "shinka":
            case "eba":
            case "yuri":
            case "erza":
            case "elaina":
            case "hinata":
            case "naruto":
            case "minato":
            case "sagari":
            case "nezuko":
            case "rize":
            case "anna":
            case "deidara":
            case "asuna":
            case "ayuzawa":
            case "emilia":
            case "chitoge":
            case "hestia":
            case "inori":
            case "itachi":
            case "madara":
            case "sakura":
            case "sasuke":
            case "tsunade":
            case "onepiece":
            case "mobil":
            case "montor":
            case "keneki":
            case "megumin":
            case "toukachan":
              reply("Certo, Já Envie A Imagem no Seu Privado...");
              miwa.sendMessage(
                sender,
                {
                  image: {
                    url: `https://megumiapis.cloud/random/${command}?apitoken=${keymegumi}`,
                  },
                },
                { quoted: info }
              );
              break;

            case "kill":
            case "pat":
            case "lick":
            case "bite":
            case "yeet":
            case "bonk":
            case "wink":
            case "poke":
            case "nom":
            case "slap":
            case "smile":
            case "wave":
            case "blush":
            case "smug":
            case "glomp":
            case "happy":
            case "dance":
            case "cringe":
            case "highfive":
            case "handhold":
              reply("*Aguarde.*");
              axios
                .get(`https://api.waifu.pics/sfw/${command}`)
                .then(({ data }) => {
                  miwa.sendMessage(from, { image: { url: data.url } });
                });
              break;

            case "cringe":
            case "highfive":
            case "handhold":
              reply("*Aguarde.*");
              axios
                .get(`https://api.waifu.pics/sfw/${command}`)
                .then(({ data }) => {
                  miwa.sendMessage(from, { image: { url: data.url } });
                });
              break;

            case "woof":
            case "8ball":
            case "goose":
            case "gecg":
            case "feed":
            case "avatar":
            case "fox_girl":
            case "lizard":
            case "spank":
            case "meow":
            case "tickle":
              axios
                .get(`https://nekos.life/api/v2/img/${command}`)
                .then(({ data }) => {
                  miwa.sendMessage(from, { image: { url: data.url } });
                });
              break;

            case "akiyama":
            case "gremory":
            case "izuku":
            case "shina":
            case "kagura":
            case "shinka":
            case "eba":
            case "yuri":
            case "erza":
            case "elaina":
            case "hinata":
            case "naruto":
            case "minato":
            case "sagari":
            case "nezuko":
            case "rize":
            case "anna":
            case "deidara":
            case "asuna":
            case "ayuzawa":
            case "emilia":
            case "chitoge":
            case "hestia":
            case "inori":
            case "itachi":
            case "madara":
            case "sakura":
            case "sasuke":
            case "tsunade":
            case "onepiece":
            case "mobil":
            case "montor":
            case "keneki":
            case "megumin":
            case "toukachan":
              reply("Certo, Já Envie A Imagem no Seu Privado...");
              miwa.sendMessage(
                sender,
                {
                  image: {
                    url:
                      `https://miwa-apis.online/random/${command}?apikey=` +
                      API_KEY_MIWA,
                  },
                },
                { quoted: info }
              );
              break;

            case "wallpaperanime":
            case "wallpaper1":
            case "wallpaper2":
            case "wallpaper3":
            case "wallpaper4":
            case "wallpaper5":
            case "wallpaper6":
            case "wallpaper7":
            case "wallpaper8":
            case "wallpaper9":
              reply(`Aguarde...`);
              ImageLinks = [
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/0",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/1",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/2",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/3",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/4",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/5",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/6",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/7",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/8",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/9",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/10",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/11",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/12",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/13",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/14",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/15",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/16",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/17",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/18",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/19",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/20",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/21",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/22",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/23",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/24",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/25",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/26",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/27",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/28",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/29",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/30",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/31",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/32",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/33",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/34",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/35",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/36",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/37",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/38",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/39",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/40",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/41",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/42",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/43",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/44",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/45",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/46",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/47",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/48",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/49",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/50",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/51",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/52",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/53",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/54",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/55",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/56",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/57",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/58",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/59",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/60",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/61",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/62",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/63",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/64",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/65",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/66",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/67",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/68",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/69",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/70",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/71",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/72",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/73",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/74",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/75",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/76",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/77",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/78",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/79",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/80",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/81",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/82",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/83",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/84",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/85",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/86",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/87",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/88",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/89",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/90",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/91",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/92",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/93",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/94",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/95",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/96",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/97",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/98",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/99",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/100",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/101",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/102",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/103",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/104",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/105",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/106",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/107",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/108",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/109",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/110",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/111",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/112",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/113",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/2/114",
              ]; // Substitua os links das imagens aqui

              selectedImageLinks =
                ImageLinks[Math.floor(Math.random() * ImageLinks.length)];

              miwa.sendMessage(
                from,
                {
                  image: { url: `${selectedImageLinks}` },
                  mimetype: "image/jpeg",
                },
                { quoted: info }
              );
              break;

            case "render":
            case "renders":
              reply(
                `*_enviando.... ah, se a imagem ficar ruim recomendo usar ${prefix}hd para melhorar_*`
              );
              ImageLinks = [
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/0",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/1",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/2",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/3",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/4",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/5",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/6",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/7",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/8",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/9",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/10",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/11",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/12",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/13",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/14",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/15",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/16",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/17",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/18",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/19",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/20",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/21",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/22",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/23",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/24",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/25",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/26",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/27",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/28",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/29",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/30",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/31",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/32",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/33",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/34",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/35",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/36",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/37",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/38",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/39",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/40",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/41",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/42",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/43",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/44",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/45",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/46",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/47",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/48",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/49",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/50",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/51",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/52",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/53",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/54",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/55",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/56",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/57",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/58",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/59",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/60",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/61",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/62",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/63",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/64",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/65",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/66",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/67",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/68",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/69",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/70",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/71",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/72",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/73",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/74",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/75",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/76",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/77",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/78",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/79",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/80",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/81",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/82",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/83",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/84",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/85",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/86",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/87",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/88",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/89",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/90",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/91",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/92",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/93",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/94",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/95",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/96",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/97",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/98",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/99",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/100",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/101",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/102",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/103",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/104",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/105",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/106",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/107",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/108",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/109",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/110",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/111",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/112",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/113",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/114",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/115",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/116",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/117",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/118",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/119",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/120",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/121",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/122",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/123",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/124",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/125",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/126",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/127",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/128",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/129",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/130",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/131",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/132",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/133",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/134",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/135",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/136",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/137",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/138",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/139",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/140",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/141",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/142",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/143",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/144",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/145",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/146",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/147",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/148",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/149",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/150",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/151",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/152",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/153",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/154",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/155",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/156",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/157",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/158",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/159",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/160",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/161",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/162",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/163",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/164",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/165",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/166",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/167",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/168",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/169",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/170",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/171",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/172",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/173",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/174",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/175",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/176",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/177",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/178",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/179",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/180",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/181",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/182",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/183",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/184",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/185",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/186",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/187",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/188",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/189",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/190",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/191",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/192",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/193",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/194",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/195",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/196",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/197",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/198",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/199",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/200",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/201",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/202",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/203",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/204",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/205",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/206",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/207",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/208",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/209",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/210",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/211",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/212",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/213",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/214",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/215",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/216",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/217",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/218",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/219",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/220",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/221",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/222",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/223",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/224",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/225",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/226",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/227",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/228",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/229",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/230",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/231",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/232",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/233",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/234",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/235",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/236",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/237",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/238",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/239",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/240",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/241",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/242",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/243",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/244",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/245",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/246",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/247",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/248",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/249",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/250",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/251",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/252",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/253",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/254",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/255",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/256",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/257",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/258",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/259",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/260",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/261",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/262",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/263",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/264",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/265",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/266",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/267",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/268",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/269",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/270",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/271",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/272",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/273",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/274",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/275",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/276",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/277",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/278",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/279",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/280",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/281",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/282",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/283",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/284",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/285",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/286",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/287",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/288",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/289",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/290",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/291",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/292",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/293",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/294",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/295",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/296",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/297",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/298",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/299",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/300",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/301",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/302",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/303",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/304",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/305",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/306",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/307",
                "https://anikit-apis.onrender.com/imagem/66776d210d6601bdfcbf4452/chapters/1/308",
              ]; // Substitua os links das imagens aqui

              selectedImageLinks3 =
                ImageLinks[Math.floor(Math.random() * ImageLinks.length)];

              miwa.sendMessage(
                from,
                {
                  image: { url: `${selectedImageLinks3}` },
                  mimetype: "image/jpeg",
                },
                { quoted: info }
              );
              break; //feito por Ryuu

            case "wallpaper10":
            case "wallpaper11":
              reply(
                `*_enviando.... ah, se a imagem ficar ruim recomendo usar ${prefix}hd para melhorar_*`
              );
              ImageLinks = [
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/0",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/1",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/2",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/3",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/4",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/5",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/6",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/7",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/8",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/9",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/10",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/11",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/12",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/13",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/14",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/15",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/16",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/17",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/18",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/19",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/20",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/21",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/22",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/23",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/24",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/25",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/26",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/27",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/28",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/29",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/30",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/31",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/32",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/33",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/34",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/35",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/36",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/37",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/38",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/39",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/40",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/41",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/42",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/43",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/44",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/45",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/46",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/47",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/48",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/49",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/50",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/51",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/52",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/53",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/54",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/55",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/56",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/57",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/58",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/59",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/60",
                "https://anikit-apis.onrender.com/imagem/66807c8a341e8a6d48eb7d3a/chapters/1/61",
              ]; // Substitua os links das imagens aqui

              selectedImageLinks2 =
                ImageLinks[Math.floor(Math.random() * ImageLinks.length)];

              miwa.sendMessage(
                from,
                {
                  image: { url: `${selectedImageLinks2}` },
                  mimetype: "image/jpeg",
                },
                { quoted: info }
              );
              break; //feito por Ryuu

            case "editanime":
            case "bleach":
            case "chainsaw":
            case "demon_slayer":
            case "dragonball":
            case "hunter_edit":
            case "jujutsu_kaisen":
            case "narutoedit":
              reply("Certo, Já enviei o vídeo no seu privado...");
              miwa.sendMessage(
                sender,
                {
                  video: {
                    url: `https://miwa-apis.online/random/${command}?apikey=${API_KEY_MIWA}&categoria=${command}`,
                  },
                },
                { quoted: info }
              );
              break;

            case "logoneon":
              textin = args.join(" ");
              if (!textin) return reply("Cade o texto?");
              reply(mess.wait());
              bla = await getBuffer(
                `https://free-api.herokuapp.com/api/textpro/neon?texto=${textin}`
              );
              miwa
                .sendMessage(from, { image: bla }, { quoted: selo })
                .catch((rs) => {
                  reply("ERROR!!");
                });
              break;

            case "flame":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://flamingtext.com/net-fu/proxy_form.cgi?imageoutput=true&script=flame-logo&text=${q}`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "battlebanzai":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/battlebanzai/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "steampunk":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/steampunk/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "lido":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/lido/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "ribbon":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/habbo_ribbon/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "marketplace":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/marketplace_full/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "scifi":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/scifi/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "straypixels":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/straypixels/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "silver":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/habboclub_silver/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "fx":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: { url: `https://habbofont.net/font/fx/${q}.gif` },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "tribe":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/tribe/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "rugs":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/rugs/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "spaces":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/spaces/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "retropixel":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/retropixel/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "recycle":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/recycle/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "japan":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/japan/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "hands":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/hands/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "mushroom_green":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/mushroom_green/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "hello":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/hello/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "big":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/habbowood_big/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "gravity":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/gravity/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "fbomb":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/fbomb/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "cubie":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/cubie/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "bots":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/bots/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "arctic":
              {
                if (!q) return reply("Cadê o nicknome");
                await miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://habbofont.net/font/arctic/${q}.gif`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch((err) => {
                    reply(`Erro, tenta mais tarde`);
                  });
              }
              break;

            case "green-horror":
            case "chocolate-cake":
            case "3dboxtext":
            case "strawberry":
            case "sweet-candy":
            case "flower-typography":
            case "berry":
            case "shadow-sky":
            case "magma":
            case "logobear":
              textin = args.join(" ");
              if (!textin) return reply("Cade o texto?");
              reply(mess.wait());
              bla = await getBuffer(
                `https://free-api.herokuapp.com/api/textpro/${command}?texto=${textin}`
              );
              miwa
                .sendMessage(from, { image: bla }, { quoted: selo })
                .catch((rs) => {
                  reply("ERROR!!");
                });
              break;

            case "illuminated-metallic":
            case "metallic":
            case "harry-potter":
            case "butterfly":
              textin = args.join(" ");
              if (!textin) return reply("Cade o texto?");
              reply(mess.wait());
              bla = await getBuffer(
                `https://free-api.herokuapp.com/api/photooxy/${command}?texto=${textin}`
              );
              miwa
                .sendMessage(from, { image: bla }, { quoted: selo })
                .catch((rs) => {
                  reply("ERROR!!");
                });
              break;

            case "carved-wood":
            case "flaming":
            case "night-sky":
              textin = args.join(" ");
              if (!textin) return reply("Cade o texto?");
              reply(mess.wait());
              bla = await getBuffer(
                `https://free-api.herokuapp.com/api/photooxy/${command}?texto=${textin}`
              );
              miwa
                .sendMessage(from, { image: bla }, { quoted: selo })
                .catch((rs) => {
                  reply("ERROR!!");
                });
              break;

            case "orangejuice":
              textin = args.join(" ");
              if (!textin) return reply("Cade o texto?");
              reply(mess.wait());
              bla = await getBuffer(
                `https://free-api.herokuapp.com/api/textpro/3d-orange-juice?texto=${textin}`
              );
              miwa
                .sendMessage(from, { image: bla }, { quoted: selo })
                .catch((rs) => {
                  reply("ERROR!!");
                });
              break;

            case "neonlight":
              textin = args.join(" ");
              if (!textin) return reply("Cade o texto?");
              reply(mess.wait());
              bla = await getBuffer(
                `https://free-api.herokuapp.com/api/textpro/3d-neon-light?texto=${textin}`
              );
              miwa
                .sendMessage(from, { image: bla }, { quoted: selo })
                .catch((rs) => {
                  reply("ERROR!!");
                });
              break;

            case "brilhante":
            case "vietnam":
            case "seta":
            case "grafite":
            case "goldt":
            case "tela":
              textin = args.join(" ");
              if (!textin) return reply("Cade o texto?");
              reply(mess.wait());
              bla = await getBuffer(
                `https://zangaapis.herokuapp.com/api/ephoto/${command}?texto=${textin}&apikey=miwa-Apikey-Premium`
              );
              miwa
                .sendMessage(from, { image: bla }, { quoted: selo })
                .catch((rs) => {
                  reply("ERROR!!");
                });
              break;

            case "desfocado":
              textin = args.join(" ");
              if (!textin) return reply("Cade o texto?");
              reply(mess.wait());
              bla = await getBuffer(
                `https://zangaapis.herokuapp.com/api/ephoto/blur?texto=${textin}&apikey=miwa-Apikey-Premium`
              );
              miwa
                .sendMessage(from, { image: bla }, { quoted: selo })
                .catch((rs) => {
                  reply("ERROR!!");
                });
              break;

            case "pubgv":
            case "natalmsg":
            case "anonovo":
            case "trigrev":
              textin = args.join(" ");
              if (!textin) return reply("Cade o texto?");
              reply(mess.wait());
              bla = await getBuffer(
                `https://zangaapis.herokuapp.com/api/ephoto/${command}?texto=${textin}&apikey=miwa-Apikey-Premium`
              );
              miwa
                .sendMessage(from, { video: bla }, { quoted: selo })
                .catch((rs) => {
                  reply("ERROR!!");
                });
              break;

            case "qc": // Créditos: @IagoNT
              if (!q)
                return reply(
                  `Exemplo de uso deste comando:\n • ${prefix}qc Olá, você é gay?`
                );
              reply(mess.wait());
              const text = `${q}`;
              const username = `${pushname}`;
              try {
                ppimg = await miwa.profilePictureUrl(sender, "image");
              } catch {
                ppimg = "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg";
              }
              const { writeExifImg } = require("./arquivos/sticker/exif");
              miwa.sendImageAsSticker = async (jid, path, options = {}) => {
                let buff = Buffer.isBuffer(path)
                  ? path
                  : /^data:.*?\/.*?;base64,/i.test(path)
                  ? Buffer.from(path.split`,`[1], "base64")
                  : /^https?:\/\//.test(path)
                  ? await await getBuffer(path)
                  : fs.existsSync(path)
                  ? fs.readFileSync(path)
                  : Buffer.alloc(0);
                let buffer;
                if (options && (options.packname || options.author)) {
                  buffer = await writeExifImg(buff, options);
                } else {
                  buffer = await imageToWebp(buff);
                }

                await miwa.sendMessage(jid, {
                  sticker: { url: buffer },
                  ...options,
                });
                return buffer;
              };
              const avatar = `${ppimg}`;
              const json = {
                type: "quote",
                format: "png",
                backgroundColor: "#FFFFFF",
                width: 512,
                height: 768,
                scale: 2,
                messages: [
                  {
                    entities: [],
                    avatar: true,
                    from: {
                      id: 1,
                      name: username,
                      photo: {
                        url: avatar,
                      },
                    },
                    text: text,
                    replyMessage: {},
                  },
                ],
              };
              const response = axios
                .post("https://bot.lyo.su/quote/generate", json, {
                  headers: { "Content-Type": "application/json" },
                })
                .then((res) => {
                  const buffer = Buffer.from(res.data.result.image, "base64");
                  miwa.sendImageAsSticker(from, buffer, {
                    packname: `${NomeDoBot}`,
                    author: `${pushname}`,
                  });
                });
              break;

            // Pesquisa

            case "ps":
            case "playstore":
              if (!q) return reply(`KD o nome do app ?`);
              try {
                ABC = await fetchJson(
                  `${akiyamasite}/api/playstore?nome=${encodeURI(q)}&apikey=` +
                    API_KEY_MIWA
                );
                i = ABC.pesquisa.resultado[0];
                txt = `
❪🏷️ฺ࣭࣪͘ꕸ▸ 𝙽𝚘𝚖𝚎৴▸ ${i.nome}
❪📟ฺ࣭࣪͘ꕸ▸ 𝙳𝚎𝚜𝚎𝚗𝚟𝚘𝚕𝚟𝚎𝚍𝚘𝚛৴▸ ${i.desenvolvedor}
❪⭐ฺ࣭࣪͘ꕸ▸ 𝙰𝚟𝚊𝚕𝚒𝚊çã𝚘৴▸ ${i.estrelas}
⏤͟͟͞͞ ꦿ𝙻𝚒𝚗𝚔ฺ࣭࣪͘ꕸ▸ ${i.link}
`;
                miwa.sendMessage(
                  from,
                  {
                    text: txt,
                    contextInfo: {
                      externalAdReply: {
                        title: `ㅤㅤㅤ🎮 𝙋𝙇𝘼𝙔 𝙎𝙏𝙊𝙍𝙀 🎮`,
                        body: ``,
                        thumbnail: await getBuffer(i.imagem),
                        mediaType: 1,
                        sourceUrl: i.link,
                      },
                    },
                  },
                  { quoted: info }
                );
              } catch {
                reply(`Não encontrei nenhum app, ou pode ser que a api caiu`);
              }
              break;

            case "playstore-search":
            case "ps-search":
              if (!q) return reply(`KD o nome do app ?`);
              try {
                ABC = await fetchJson(
                  `${akiyamasite}/api/playstore?nome=${encodeURI(q)}&apikey=` +
                    API_KEY_MIWA
                );
                txt = `ㅤㅤㅤ🎮 𝙋𝙇𝘼𝙔 𝙎𝙏𝙊𝙍𝙀 🎮`;
                for (i of ABC.pesquisa.resultado) {
                  txt += `\n\n❪🏷️ฺ࣭࣪͘ꕸ▸ 𝙽𝚘𝚖𝚎৴▸ ${i.nome}
❪📟ฺ࣭࣪͘ꕸ▸ 𝙳𝚎𝚜𝚎𝚗𝚟𝚘𝚕𝚟𝚎𝚍𝚘𝚛৴▸ ${i.desenvolvedor}
❪⭐ฺ࣭࣪͘ꕸ▸ 𝙰𝚟𝚊𝚕𝚒𝚊çã𝚘৴▸ ${i.estrelas}
⏤͟͟͞͞ ꦿ𝙻𝚒𝚗𝚔ฺ࣭࣪͘ꕸ▸ ${i.link}`;
                }
                reply(txt);
              } catch {
                reply(`Não encontrei nenhum app, ou pode ser que a api caiu`);
              }
              break;

            case "noticias":
              try {
                if (!q)
                  return reply(
                    `Informe um tema para realizar a pesquisa de suas notícias!`
                  );
                ABC = await fetchJson(
                  `${akiyamasite}/api/noticias/find?q=${encodeURI(q)}&apikey=` +
                    API_KEY_MIWA
                );
                reply(ABC.resultado);
              } catch (e) {
                return console.log(e);
                reply("Erro");
              }
              break;

            case "stalkchannel":
              {
                if (!q) return reply("Por favor, forneça o link do canal.");
                try {
                  const { data } = await axios.get(q);
                  const $ = cheerio.load(data);
                  const imagem = $("img._9vx6").attr("src");
                  const nome = $("h3._9vd5._9t2_").text();
                  const descricao = $("h4._9vd5._9scb").text().trim();
                  const seguidores = $("h5._9vd5._9scy")
                    .text()
                    .split("|")[1]
                    .trim();
                  const canalImage = await prepareWAMessageMedia(
                    { image: { url: imagem } },
                    { upload: miwa.waUploadToServer }
                  );
                  await miwa.sendMessage(
                    from,
                    {
                      image: { url: imagem },
                      caption: `📌 *Nome*: ${nome}\n📄 *Descrição*: ${descricao}\n👥 *Seguidores*: ${seguidores}\n🔗 *Link*: ${q}`,
                    },
                    { quoted: info }
                  );
                } catch (e) {
                  reply(
                    "Ocorreu um erro ao tentar obter as informações do canal."
                  );
                  console.log(e);
                }
              }
              break;

            case "livro":
            case "book":
              if (!q) return reply("KD o nome do livro?");
              try {
                ABC = await fetchJson(
                  `${akiyamasite}/api/book?livro=${encodeURI(q)}&apiKey=` +
                    API_KEY_MIWA
                );
                i = ABC.resultado[0].volumeInfo;
                sendUrlText(
                  from,
                  i.description,
                  `📖 LIVRO - ` + i.title,
                  i.subtitle || ``,
                  `https://miwa-apis.online/api/convert/image?url=${i.imageLinks.thumbnail}&apikey=` +
                    API_KEY_MIWA,
                  akiyamasite,
                  info
                );
              } catch (e) {
                console.log(e);
                reply("Erro");
              }
              break;

            case "playstore":
              try {
                if (!q)
                  return reply(
                    `🤔 Como deseja realizar uma pesquisa sem conter nenhuma palavra-chave? Use como exemplo: *${
                      prefix + command
                    } Pou*`
                  );
                AB = await fetchJson(
                  `https://miwa-apis.online/api/playstore?nome=${q}&apikey=` +
                    API_KEY_MIWA
                );
                ABC = `🔍 *Pesquisa:* ${q} - *[ PlayStore ]*\nTotal de aplicativos encontrados: ${
                  AB.pesquisa.resultado.length
                }\n${"-\t".repeat(24)}\n`;
                for (var i of AB.pesquisa.resultado) {
                  ABC += `*🔹️ Aplicativo:* ${i.nome}\n*👩🏻‍💻 Desenvolvedor do App:* ${i.desenvolvedor}\n*⭐️ Avaliação do Aplicativo:* ${i.estrelas}\n*🔗 Link do Aplicativo:* ${i.link}\n`;
                  ABC += `${"-\t".repeat(24)}\n`;
                }
                miwa.sendMessage(from, {
                  image: { url: AB.pesquisa.resultado[0].imagem },
                  caption: ABC,
                });
              } catch (e) {
                console.log(`Erro na api: ${e}`);
                return reply(`ERROR!!`);
              }
              break;

            case "nerding":
              try {
                if (!q)
                  return reply(
                    `🤔 Como deseja realizar uma pesquisa sem conter nenhuma palavra-chave? Use como exemplo: *${
                      prefix + command
                    } Lolis*`
                  );
                AB = await fetchJson(
                  `https://miwa-apis.online/api/nerding?q=${q}&apikey=` +
                    API_KEY_MIWA
                );
                ABC = `🔍 *Pesquisa:* ${q} - *[ Nerding ]*\nTotal de resultados encontrados: ${
                  AB.resultado.length
                }\n${"-\t".repeat(24)}\n`;
                for (var i of AB.resultado) {
                  ABC += `*📰 Título:* ${i.titulo}\n*🈹️ Descrição:* ${i.descrição}\n❓️ *Tipo de Review:* ${i.review}\n*🔗 Link:* ${i.link}\n`;
                  ABC += `${"-\t".repeat(24)}\n`;
                }
                reply(ABC);
              } catch (e) {
                console.log(`Erro na api: ${e}`);
                return reply(`ERROR!!`);
              }
              break;

            case "pensador":
              try {
                if (!q)
                  return reply(
                    `🤔 Como deseja realizar uma pesquisa sem conter nenhuma palavra-chave? Use como exemplo: *${
                      prefix + command
                    } Amor*`
                  );
                AB = await fetchJson(
                  `https://miwa-apis.online/search/pensador?query=${q}&apikey=` +
                    API_KEY_MIWA
                );
                ABC = `🔍 *Pesquisa:* ${q} - *[ Pensador ]*\nTotal de frases encontradas: ${
                  AB.resultado.length
                }\n${"-\t".repeat(24)}\n`;
                for (var i of AB.resultado) {
                  ABC += `📨 *Frase:* "${i.frase}"\n`;
                  ABC += `${"-\t".repeat(24)}\n`;
                }
                reply(ABC);
              } catch (e) {
                console.log(`Erro na api: ${e}`);
                return reply(`ERROR!!`);
              }
              break;

            case "matty":
              {
                if (!q)
                  return reply(
                    "Retorne após o comando o título de sua pesquisa"
                  );
                let { key } = await miwa.sendMessage(
                  from,
                  { text: `*Pesquisando... Um momento* 🌐` },
                  { quoted: info }
                );
                try {
                  if (isImage || isQuotedImage) {
                    media = isQuotedImage
                      ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                          .message.extendedTextMessage.contextInfo.message
                          .imageMessage
                      : info.message.imageMessage;
                    link = await upload(await getFileBuffer(media, "image"));
                  } else {
                    ABC = await fetchJson(
                      `https://miwa-apis.online/api/ia/bard?query=${encodeURI(
                        q
                      )}&apikey=` + API_KEY_MIWA
                    );
                  }
                  /*const Gemini = require('./arquivos/js/gemini.js');
const g = new Gemini({apiKey: "AIzaSyCgOvc46hpJNhl5qTnCKkhklwN59-uOs34", prompt: q});
g.text().then((data) => console.log("Gemini - Texto:", data))
miwa.sendMessage(from, {text: `Sim`, edit: key}, {quoted: info})*/
                } catch (e) {
                  console.log(e);
                  miwa.sendMessage(
                    from,
                    {
                      text: `Erro, não foi possível carregar a resposta... Ou pode ser que a api tenha ficado off ❌`,
                      edit: key,
                    },
                    { quoted: info }
                  );
                }
              }
              break;

            case "samuel":
            case "lucas":
            case "chatgpt":
            case "gpt":
              {
                reagir(from, "🌐");
                if (!q)
                  return reply(
                    `Pergunte algo, e o ${command} irá responder...`
                  );
                let { key } = await miwa.sendMessage(
                  from,
                  {
                    text: `🧐 _Aguarde um momento enquanto eu estou pesquisando..._ 🗯`,
                  },
                  { quoted: info }
                );
                try {
                  ABC = await fetchJson(
                    `https://miwa-apis.online/api/ia/gpt?query=${encodeURI(
                      q
                    )}&apikey=` + API_KEY_MIWA
                  );
                  miwa.sendMessage(
                    from,
                    { text: ABC.resultado, edit: key },
                    { quoted: info }
                  );
                } catch (e) {
                  miwa.sendMessage(
                    from,
                    {
                      text: `Erro, não foi possível carregar a resposta... Ou pode ser que a api tenha ficado off ❌`,
                      edit: key,
                    },
                    { quoted: info }
                  );
                }
              }
              break;

            // Pesquisa de Produtos:
            case "submarino":
              var {
                SubmarinoSearch,
              } = require("./arquivos/funcoes/scraper/pesquisas.js");
              if (!q)
                return reply(
                  `🤔 Como deseja realizar uma pesquisa sem conter nenhuma palavra-chave? Use como exemplo: *${
                    prefix + command
                  } iPhone*`
                );
              SubmarinoSearch(q)
                .then(async ({ resultado: res }) => {
                  await miwa.sendMessage(from, {
                    image: { url: res[0].imagem },
                    caption: res
                      .map(
                        (a) =>
                          `🛍️ *Produto:* ${a.produto}\n🈳️ *Preço:* ${a.valor}\n🔗 *Link:* ${a.link}\n`
                      )
                      .join(`${"-\t".repeat(24)}\n`),
                  });
                })
                .catch((e) => {
                  console.log(`Erro na api: ${e}`);
                  reply("ERROR!!");
                });
              break;

            case "americanas":
              var {
                AmericanasSearch,
              } = require("./arquivos/funcoes/scraper/pesquisas.js");
              if (!q)
                return reply(
                  `🤔 Como deseja realizar uma pesquisa sem conter nenhuma palavra-chave? Use como exemplo: *${
                    prefix + command
                  } iPhone*`
                );
              AmericanasSearch(q)
                .then(async ({ resultado: res }) => {
                  await miwa.sendMessage(from, {
                    image: { url: res[0].imagem },
                    caption: res
                      .map(
                        (a) =>
                          `🛍️ *Produto:* ${a.produto}\n🈳️ *Preço:* ${a.valor}\n🔗 *Link:* ${a.link}\n`
                      )
                      .join(`${"-\t".repeat(24)}\n`),
                  });
                })
                .catch((e) => {
                  console.log(`Erro na api: ${e}`);
                  reply("ERROR!!");
                });
              break;

            case "mlsrc":
              try {
                if (!q)
                  return reply(
                    `🤔 Como deseja realizar uma pesquisa sem conter nenhuma palavra-chave? Use como exemplo: ${
                      prefix + command
                    } iPhone`
                  );
                AB = await fetchJson(
                  `https://miwa-apis.online/api/mercadolivre?nome=${q}&apikey=` +
                    API_KEY_MIWA
                );
                ABC = `.`;
                for (var i of AB.pesquisa.resultado) {
                  ABC += `🛍️ *Produto:* ${i.produto}\n🈳️ *Preço:* ${i.valor}\n🔗 *Link:* ${i.link}\n`;
                  ABC += `${"-\t".repeat(24)}\n`;
                }
                miwa.sendMessage(from, {
                  image: { url: AB.pesquisa.resultado[0].imagem },
                  caption: ABC,
                });
              } catch (e) {
                console.log(`Erro na api: ${e}`);
                return reply(`ERROR!!`);
              }
              break;

            case "amazon":
              try {
                if (!q)
                  return reply(
                    `🤔 Como deseja realizar uma pesquisa sem conter nenhuma palavra-chave? Use como exemplo: ${
                      prefix + command
                    } iPhone`
                  );
                AB = await fetchJson(
                  `https://miwa-apis.online/api/amazon?nome=${q}&apikey=` +
                    API_KEY_MIWA
                );
                ABC = `.`;
                for (var i of AB.pesquisa.resultado) {
                  ABC += `🛍️ *Produto:* ${i.titulo}\n🈳️ *Preço:* ${i.valor}\n🔗 *Link:* ${i.link}\n`;
                  ABC += `${"-\t".repeat(24)}\n`;
                }
                miwa.sendMessage(from, {
                  image: { url: AB.pesquisa.resultado[0].imagem },
                  caption: ABC,
                });
              } catch (e) {
                console.log(`Erro na api: ${e}`);
                return reply(`ERROR!!`);
              }
              break;

            case "wikipedia":
              try {
                qp = args.join(" ");
                if (!qp) return reply(`O que você deseja pesquisar?`);
                reply(mess.wait());
                data = await fetchJson(
                  `https://miwa-apis.online/api/wikipedia?q=${qp}&apikey=` +
                    API_KEY_MIWA
                );
                capimg = await getBuffer(data.pesquisa.thumb);
                bla = `🔹 *Descrição:* ${data.pesquisa.descrição}\n💬 *Resumo:* ${data.pesquisa.resultado}\n\n*Confira o assunto completo na íntegra!* _Acesse:_ ${data.pesquisa.link}`;
                miwa.sendMessage(
                  from,
                  { image: capimg, caption: bla },
                  { quoted: info }
                );
              } catch (e) {
                if (String(e).includes("invalid json response body at")) {
                  console.log(
                    "A api caiu ou não foi possivel executar esta ação., espere retornar"
                  );
                } else {
                  console.log(e);
                  reply(
                    `❌️ Erro ao realizar a pesquisa! Tente novamente mais tarde!`
                  );
                }
              }
              break;

            case "encurtalink":
            case "tinyurl":
              if (!isPremium) return reply(enviar.msg.premium);
              if (args.length < 1)
                return reply(
                  `❌️ *Forma incorreta, use está como exemplo:* ${
                    prefix + command
                  } https://instagram.com/miwabot.wpp`
                );
              try {
                link = args[0];
                anu = await axios.get(
                  `https://tinyurl.com/api-create.php?url=${link}`
                );
                reply(
                  `✅️ *Link encurtado com sucesso, aqui está:* ${anu.data}`
                );
              } catch (e) {
                emror = String(e);
                reply(`${e}`);
              }
              break;

            case "encurtalink2":
            case "tinyurl2":
              try {
                if (!isPremium) return reply(enviar.msg.premium);
                texto = args.join(" ");
                texto1 = texto.split("+")[0] || "Indefinido";
                texto2 = texto.split("+")[1] || "Indefinido";
                if (!texto.includes("+"))
                  return reply(
                    `❌️ *Forma incorreta, use está como exemplo:* ${
                      prefix + command
                    } https://instagram.com/miwabot.wpp+InstagramDamiwa`
                  );
                bla = await axios.get(
                  `https://free-api.herokuapp.com/api/linkshort/tinyurlwithalias?link=${texto1}&alias=${texto2}`
                );
                reply(
                  `✅️ *Link encurtado com sucesso, aqui está:* ${bla.data.result}`
                );
              } catch (e) {
                if (String(e).includes("invalid json response body at")) {
                  console.log(
                    "A api caiu ou não foi possivel executar esta ação., espere retornar"
                  );
                } else {
                  reply(
                    "O nome solicitado, já existe ou tem alguma restrição ao criar!"
                  );
                }
              }
              break;

              case "encurtarlink3":
                case "cuttly":
                  if (!isPremium) return reply(enviar.msg.premium);
                  if (args.length < 1)
                    return reply(
                      `❌️ *Forma incorreta, use está como exemplo:* ${
                        prefix + command
                      } https://instagram.com/miwabot.wpp`
                    );
                  try {
                    link = args[0];
                    const response = await axios.get(
                      `https://tinyurl.com/api-create.php?url=${link}`
                    );
                
                    // O resultado está em response.data diretamente
                    const shortLink = response.data;
                
                    reply(`✅️ *Link encurtado com sucesso, aqui está:* ${shortLink}`);
                  } catch (e) {
                    const errorMsg = String(e);
                    reply(`❌ Ocorreu um erro ao encurtar o link: ${errorMsg}`);
                  }
                  break;
                

            case "encurtarlink4":
            case "bitly":
              if (!isPremium) return reply(enviar.msg.premium);
              if (args.length < 1)
                return reply(
                  `❌️ *Forma incorreta, use está como exemplo:* ${
                    prefix + command
                  } https://instagram.com/miwabot.wpp`
                );
              try {
                link = args[0];
                anu = await axios.get(
                  `https://free-api.herokuapp.com/api/linkshort/bitly?link=${link}`
                );
                reply(
                  `✅️ *Link encurtado com sucesso, aqui está:* ${anu.data.result}`
                );
              } catch (e) {
                emror = String(e);
                reply(`${e}`);
              }
              break;

            case "igstalk":
            case "instastalk":
              if (!q)
                return reply(`Digite o @ da pessoa que vc quer stalkear no insta após o comando, ex:
${prefix + command} @alok`);
              try {
                reply(`Aguarde um momento ${pushname}...`);
                ABC = await fetchJson(
                  `https://miwa-apis.online/instagram/stalkear?usuario=${q}&apikey=` +
                    API_KEY_MIWA
                );
                i = ABC.resultado;
                igstalk = `▧⃯⃟👤 ݈݇─ 𝙿𝚎𝚛𝚏𝚒𝚕: ${i.username}
❪✍🏼ฺ࣪ꕸ▸ 𝙽𝚘𝚖𝚎: ${i.fullname}
🔐⃤ 𝙿𝚛𝚒𝚟𝚊𝚍𝚘『 ${i.is_private ? `✅` : `❌`} 』
❪🖼️ฺ࣪ꕸ▸ 𝙿𝚘𝚜𝚝𝚊𝚐𝚎𝚗𝚜: ${largeNumber(i.posts)}
❪🔜ฺ࣪ꕸ▸ 𝚂𝚎𝚐𝚞𝚒𝚍𝚘𝚛𝚎𝚜: ${largeNumber(i.followers)}
❪🔙ฺ࣪ꕸ▸ 𝚂𝚎𝚐𝚞𝚒𝚗𝚍𝚘: ${largeNumber(i.following)}
✔️⃤ 𝚅𝚎𝚛𝚒𝚏𝚒𝚌𝚊𝚍𝚘『 ${i.is_verified ? `✅` : `❌`} 』
⏤͟͟͞͞ ꦿ𝙱𝚒𝚘: ${i.biography}`;
                sendUrlText(
                  from,
                  igstalk,
                  `🔎 𝑰𝑵𝑺𝑻𝑨 𝑺𝑻𝑨𝑳𝑲𝑬𝑹 🔍`,
                  ``,
                  i.profile_photo,
                  `http://instagram.com/` + i.username,
                  info
                );
              } catch (e) {
                console.log(e);
                return reply(
                  `Não foi possível encontrar esse perfil no insta, ou pode ser que a api caiu...`
                );
              }
              break;

            case "desativacao":
              if (botoes) {
                await miwa
                  .sendMessage(
                    from,
                    {
                      interactiveMessage: {
                        body: { text: `*_DESATIVAÇÕES GRUPO_*` },
                        nativeFlowMessage: {
                          buttons: [
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-LINK",
                                id: `${prefix}antilink 0`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-LINK-GP",
                                id: `${prefix}antilinkgp 0`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-DOC",
                                id: `${prefix}antidoc 0`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANT-IIMG",
                                id: `${prefix}antiimg 0`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-VIDEO",
                                id: `${prefix}antivideo 0`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "X9-VISUUNICA",
                                id: `${prefix}x9visuunica 0`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-CONTATO",
                                id: `${prefix}antictt 0`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-AUDIO",
                                id: `${prefix}antiaudio 0`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "SO_ADM",
                                id: `${prefix}So_adm 0`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-STICKER",
                                id: `${prefix}antisticker 0`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "FECHAR GRUPO",
                                id: `${prefix}grupo f`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "anti-fake",
                                id: `${prefix}antifake 0`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ABRIR GRUPO",
                                id: `${prefix}grupo a`,
                              }),
                            },
                          ],
                          messageParamsJson: "",
                        },
                      },
                    },
                    {}
                  )
                  .then((r) => console.log(r));
              } else {
              }
              break;

            case "ativacoes":
              if (botoes) {
                await miwa
                  .sendMessage(
                    from,
                    {
                      interactiveMessage: {
                        body: { text: `*_ATIVAÇÕES GRUPO_*` },
                        nativeFlowMessage: {
                          buttons: [
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-LINK",
                                id: `${prefix}antilink 1`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-LINK-GP",
                                id: `${prefix}antilinkgp 1`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-DOC",
                                id: `${prefix}antidoc 1`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANT-IIMG",
                                id: `${prefix}antiimg 1`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-VIDEO",
                                id: `${prefix}antivideo 1`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "X9-VISUUNICA",
                                id: `${prefix}x9visuunica 1`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-CONTATO",
                                id: `${prefix}antictt 1`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-AUDIO",
                                id: `${prefix}antiaudio 1`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "SO_ADM",
                                id: `${prefix}So_adm 1`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ANTI-STICKER",
                                id: `${prefix}antisticker 1`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "FECHAR GRUPO",
                                id: `${prefix}grupo f`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "anti-fake",
                                id: `${prefix}antifake 1`,
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "ABRIR GRUPO",
                                id: `${prefix}grupo a`,
                              }),
                            },
                          ],
                          messageParamsJson: "",
                        },
                      },
                    },
                    {}
                  )
                  .then((r) => console.log(r));
              } else {
              }
              break;

            case "igstory":
            case "instastory":
              if (!q)
                return reply(`😀 Retorne após o comando, o @ do usuário na qual você quer puxar os storys... Dexo ressaltar que será feito o download de todos os storys do usuário.
Caso queira um story específico, recomendo usar o comando ${prefix} 🥰
Ex: ${prefix + command} @alok`);
              try {
                ABC = await fetchJson(
                  `https://miwa-apis.online/instagram/story?usuario=${q}&apikey=` +
                    API_KEY_MIWA
                );
                if (ABC.resultado <= 0)
                  return reply(
                    `Não há storys disponíveis para este perfil, ou pode ser que a conta seja privada 🔒`
                  );
                reply(`*_Fazendo download... Aguarde um momento_* 🚨`);
                for (i of ABC.resultado) {
                  if (i.media_type == `video`) {
                    await sleep(3000);
                    sendVideo(from, i.source);
                  }
                  if (i.media_type == `image`) {
                    await sleep(1000);
                    sendImage(from, i.source);
                  }
                }
              } catch (e) {
                console.log(e);
                return reply(
                  `Não foi possível encontrar esse perfil no insta, ou pode ser que a api caiu...`
                );
              }
              break;

            case "celular":
              try {
                if (!isPremium) return reply(enviar.msg.premium);
                if (!q)
                  return reply(
                    `Qual celular você deseja pesquisar as informações sobre?`
                  );
                smartInfo = await fetchJson(
                  `https://miwa-apis.online/api/info_celular?celular=${q}&apikey=` +
                    API_KEY_MIWA
                );
                var {
                  AmericanasSearch,
                } = require("./arquivos/funcoes/scraper/pesquisas.js");
                AmericanasSearch(q).then(async ({ resultado: res }) => {
                  teks = `📱 *Smartphone:* ${smartInfo.resultado.nomeCelular}\nℹ️ *Informação básica:* ${smartInfo.resultado.informações}\n\n⚙️ *Informações Técnicas:*\n\n${smartInfo.resultado.resumoExtra}`;
                  miwa.sendMessage(from, {
                    image: { url: res[0].imagem },
                    caption: teks,
                  });
                });
              } catch (e) {
                console.log(e);
                reply(
                  `❌ Não consegui encontrar nada relacionado a sua pesquisa.`
                );
              }
              break;
            //)==== dow

            case "play":
              const { frases } = require("./database/frases.js");
              var frasinhas = frases[Math.floor(Math.random() * frases.length)];
              if (!q)
                return reply(`Exemplo: ${prefix + command} Poze Desabafo`);
              const api = await fetchJson(
                `https://miwa-apis.online/api/ytsrc?q=${q}&apikey=` +
                  API_KEY_MIWA
              );
              capimg = await getBuffer(api.resultado[0].image);
              bla = `ꔷ㆒⸼݇҉ֻ᠂⃟🎵 MIWA - BOT - PLAY ⸵░⃟🎵\n\n💫⃤ 𝚃í𝚝𝚞𝚕𝚘: ${api.resultado[0].title}\n⏰⃤ 𝚃𝚎𝚖𝚙𝚘: ${api.resultado[0].timestamp}\n👁️⃤ 𝚅𝚒𝚜𝚞𝚊𝚕𝚒𝚣𝚊çõ𝚎𝚜: ${api.resultado[0].views}\n🎞️⃤ 𝙲𝚊𝚗𝚊𝚕: ${api.resultado[0].author.name}\n📹⃤ 𝙿𝚘𝚜𝚝𝚊𝚍𝚘: ${api.resultado[0].ago}\n🔗⃤ 𝚄𝚛𝚕: ${api.resultado[0].url}\n💬⃤ 𝙳𝚎𝚜𝚌𝚛𝚒çã𝚘: ${api.resultado[0].description}

------------------------------------------------`;
              let messagecoisas = await prepareWAMessageMedia(
                { image: { url: `${api.resultado[0].image}` } },
                { upload: miwa.waUploadToServer }
              );
              await miwa
                .sendMessage(
                  from,
                  {
                    botInvokeMessage: {
                      message: {
                        messageContextInfo: {
                          deviceListMetadataVersion: 2,
                          deviceListMetadata: {},
                        },
                        interactiveMessage: {
                          header: {
                            title: `${bla}`,

                            hasMediaAttachment: true,
                            imageMessage: messagecoisas.imageMessage,
                          },
                          headerType: "IMAGE",
                          body: { text: `_"${frasinhas}"_` },
                          footer: {
                            text: `_${tempo} ヅ_`,
                          },
                          nativeFlowMessage: {
                            buttons: [
                              {
                                name: "quick_reply",
                                buttonParamsJson: JSON.stringify({
                                  display_text: "🩸『 𝐀𝐔𝐃𝐈𝐎 』🩸",
                                  id: `${prefix}ytmp3 ${api.resultado[0].url}`,
                                }),
                              },
                              {
                                name: "quick_reply",
                                buttonParamsJson: JSON.stringify({
                                  display_text: "🩸『 𝐕𝐈𝐃𝐄𝐎 』🩸",
                                  id: `${prefix}ytmp4 ${api.resultado[0].url}`,
                                }),
                              },
                              {
                                name: "quick_reply",
                                buttonParamsJson: JSON.stringify({
                                  display_text: "🩸『 𝐃𝐎𝐂𝐔𝐌𝐄𝐍𝐓𝐎 』🩸",
                                  id: `${prefix}playdoc ${api.resultado[0].title}`,
                                }),
                              },
                              {
                                name: "quick_reply",
                                buttonParamsJson: JSON.stringify({
                                  display_text: "🩸『 𝐀𝐃𝐃 𝐏𝐋𝐀𝐘𝐋𝐈𝐒𝐓 』🩸",
                                  id: `${prefix}adicionarmusica ${api.resultado[0].url}`,
                                }),
                              },
                            ],
                            messageParamsJson: "",
                          },
                        },
                      },
                    },
                    contextInfo: {
                      externalAdReply: {
                        title: ``,
                        renderLargerThumbnail: false,
                        showAdAttribution: false,
                        body: ``,
                        mediaUrl: ``,
                        mediaType: 2,
                        thumbnail: "",
                      },
                    },
                  },
                  { quoted: info }
                )
                .then((r) => console.log(r));
              break;

            case "play2": {
              if (!q) return reply(`Cade o nome?`);
              reply("aguarde o resultado.");
              try {
                qp = args.join(" ");
                res = await yts(qp);
                blaimg = await getBuffer(res.all[0].image);
                blalink = await getBuffer(res.all[0].url);
                TheDown = `ꔷ㆒⸼݇҉ֻ᠂⃟🎵 MIWA - BOT - PLAY ⸵░⃟🎵\n\n💫⃤ 𝚃í𝚝𝚞𝚕𝚘: ${res.all[0].title}\n⏰⃤ 𝚃𝚎𝚖𝚙𝚘: ${res.all[0].timestamp}\n👁️⃤ 𝚅𝚒𝚜𝚞𝚊𝚕𝚒𝚣𝚊çõ𝚎𝚜: ${res.all[0].views}\n🎞️⃤ 𝙲𝚊𝚗𝚊𝚕: ${res.all[0].author.name}\n📹⃤ 𝙿𝚘𝚜𝚝𝚊𝚍𝚘: ${res.all[0].ago}\n🔗⃤ 𝚄𝚛𝚕: ${res.all[0].url}\n💬⃤ 𝙳𝚎𝚜𝚌𝚛𝚒çã𝚘: ${res.all[0].description}`;
                await btncomfoto(
                  from,
                  " ",
                  TheDown,
                  " ",
                  "Selecione a opção de Download desejada",
                  { url: res.all[0].image },
                  "image",
                  info,
                  {},
                  [
                    {
                      name: "quick_reply",
                      buttonParamsJson: JSON.stringify({
                        display_text: "versao musica",
                        id: `${prefix}play-modules ${res.all[0].title}`,
                      }),
                    },
                    {
                      name: "quick_reply",
                      buttonParamsJson: JSON.stringify({
                        display_text: "versao documento",
                        id: `${prefix}playdoc ${res.all[0].title}`,
                      }),
                    },
                    {
                      name: "quick_reply",
                      buttonParamsJson: JSON.stringify({
                        display_text: "versao video",
                        id: `${prefix}playvideom ${res.all[0].title}`,
                      }),
                    },
                    {
                      name: "quick_reply",
                      buttonParamsJson: JSON.stringify({
                        display_text: "ADICIONAR PLAYLIST",
                        id: `${prefix}adicionarmusica ${q}`,
                      }),
                    },
                  ]
                );
              } catch (e) {
                console.log(e);
                return reply(
                  `⟬❗⟭  ${pushname}, algum erro foi encontrado no servidor interno, que tal pedir mais tarde? Fica tranquilx, esse erro já foi relatado a meu(minha) criador(a).`
                );
                await miwa.sendMessage(`${numerodono}@s.whatsapp.net`, {
                  text: `⟬❗⟭ Sr/Sra, foi encontrado um erro no servidor interno do sistema de Play de Módulos/Scraper.`,
                });
              }
              break;
            }

            case "playaudio":
              try {
                if (!q)
                  return reply(`Exemplo: ${prefix + command} poze desabafo`);
                await reply(`Estou atendendo seu pedido [ ${pushname} ]`);
                const api = await fetchJson(
                  `https://miwa-apis.online/api/ytsrc/videos?q=${q}&apikey=` +
                    API_KEY_MIWA
                );
                const buffer = await getBuffer(api.resultado[0].image);
                miwa.sendMessage(from, {
                  audio: {
                    url: `https://miwa-apis.online/api/dl/ytaudio2?url=${api.resultado[0].url}&apikey=${API_KEY_MIWA}`,
                  },
                  mimetype: "audio/mp4",
                  headerType: 4,
                  contextInfo: {
                    externalAdReply: {
                      title: `${NomeDoBot}`,
                      body: `${api.resultado[0].title}`,
                      showAdAttribution: true,
                      thumbnail: await getBuffer(`${api.resultado[0].image}`),
                      mediaType: 2,
                      mediaUrl: `instagram.com`,
                      sourceUrl: `https://www.youtube.com/@lukinha_07k`,
                    },
                  },
                });
              } catch (erro) {
                console.log(erro);
              }
              break;

            case "play4":
              if (!q)
                return reply(`Exemplo: ${prefix + command} Poze desabafo`);
              const apiBT = await fetchJson(
                `https://miwa-apis.online/api/ytsrc/videos?q=${q}&apikey=` +
                  API_KEY_MIWA
              );
              miwa
                .sendMessage(
                  from,
                  {
                    audio: {
                      url:
                        `https://miwa-apis.online/api/dl/ytaudio?url=${apiBT.resultado[0].url}&apikey=` +
                        API_KEY_MIWA,
                    },
                    mimetype: "audio/mpeg",
                  },
                  { quoted: info }
                )
                .catch((e) => {
                  return reply(
                    `Desculpe, ocorreu um erro. Por favor, tente novamente mais tarde.`
                  );
                });
              break;

            case "play3":
              if (!q)
                return reply(
                  `${pushname} Cadê o nome da música?\n Exemplo: ${prefix}${command} nadson passa tempo`
                );

              // Enviando reação de emoji "⏳"
              miwa.sendMessage(from, { react: { text: "⏳", key: info.key } });
              await sleep(2000); // Espera de 2 segundos

              // Enviando reação de emoji "🎵"
              miwa.sendMessage(from, { react: { text: "🎵", key: info.key } });

              try {
                let ytbr = await fetchJson(
                  `https://random-apis.online/api/ytsrc/videos?q=${q}&apikey=ozzy`
                );
                let video = ytbr.resultado[0];

                let pla = `*🎵 Título*: ${video.title}\n`;
                pla += `*⏱ Tempo*: ${video.timestamp}\n`;
                pla += `*🔮 Visualizações*: ${video.views}\n`;
                pla += `*🥇 Canal*: ${video.author.name}\n`;
                pla += `*✨ Descrição*: ${video.description}\n`;
                pla += `*🔎 Link*: ${video.url}\n`;

                let imageUrl = `https://random-apis.online/generate-card?titulo=${video.title}&autor=${video.author.name}&thumbnail=${video.image}&tempo=${video.timestamp}`;
                miwa.sendMessage(
                  from,
                  { image: { url: imageUrl }, caption: pla },
                  { quoted: info }
                );

                await sleep(3000);
                miwa.sendMessage(
                  from,
                  {
                    audio: {
                      url: `https://random-apis.online/api/dl/ytaudio?url=${video.url}&apikey=ozzy`,
                    },
                    mimetype: "audio/mpeg",
                  },
                  { quoted: info }
                );
              } catch (e) {
                reply("Ocorreu um erro ao tentar buscar a música.");
                console.error(e); // Loga o erro no console para debug
              }
              break;

            case "play4":
            case "p4":
              if (!isGroup)
                return reply(
                  `Este menu play está disponível apenas para uso em grupo...`
                );
              reagir(from, "🔥");
              if (!q) return reply(`Use: ${prefix + command} nome da música`);
              if (!JSON.stringify(music).includes(from)) {
                music.push({ groupId: from, usus: [] });
                fs.writeFileSync(
                  "./arquivos/music.json",
                  JSON.stringify(music, null, 2)
                );
              }
              AB = music.map((i) => i.groupId).indexOf(from);
              if (JSON.stringify(music[AB].usus).includes(sender)) {
                AC = music[AB].usus.map((i) => i.id).indexOf(sender);
                music[AB].usus.splice(AC, 1);
                fs.writeFileSync(
                  "./arquivos/music.json",
                  JSON.stringify(music, null, 2)
                );
              }
              try {
                ABC = await fetchJson(
                  `https://miwa-apis.online/api/dl/ytplay?query=${q}&apikey=${API_KEY_MIWA}`
                );
                bla = `
⟬ 🅑ⓁⒶⒸⓀ  🅜ⓊⓈⒾⒸ  »Ⓥ②« ⟭

🎙️⃤ 𝚃í𝚝𝚞𝚕𝚘: ${ABC.resultado[0].title}
⏰⃤ 𝚃𝚎𝚖𝚙𝚘: ${ABC.resultado[0].timestamp} com ${ABC.resultado[0].views} visualizações
🎞️⃤ 𝙲𝚊𝚗𝚊𝚕: ${ABC.resultado[0].author.name}
📹⃤ 𝙿𝚘𝚜𝚝𝚊𝚍𝚘: ${ABC.resultado[0].ago}
🗞️⃤ 𝙳𝚎𝚜𝚌𝚛𝚒çã𝚘: ${ABC.resultado[0].description}

_${tempo} ${pushname}, digite *"áudio", "vídeo"* ou *"doc"* para escolher a forma de envio (sem as aspas)_
`;
                music[AB].usus.push({
                  id: sender,
                  urlAudio: `https://miwa-apis.online/api/dl/ytaudio?url=${ABC.resultado[0].url}&apikey=${API_KEY_MIWA}`,
                  urlVideo: `https://miwa-apis.online/api/dl/ytvideo?url=${ABC.resultado[0].url}&apikey=${API_KEY_MIWA}`,
                  title: ABC.resultado[0].title,
                });
                fs.writeFileSync(
                  "./arquivos/music.json",
                  JSON.stringify(music, null, 2)
                );
                miwa.sendMessage(
                  from,
                  { image: { url: ABC.resultado[0].thumbnail }, caption: bla },
                  { quoted: info }
                );
              } catch (e) {
                return reply(
                  `Sistema parece instável... Execute o ${prefix}p5`
                );
              }
              break;

            case "play5":
            case "p5":
              if (!isGroup)
                return reply(
                  `Este menu play está disponível apenas para uso em grupo...`
                );
              reagir(from, "🔥");
              if (!q) return reply(`Use: ${prefix + command} nome da música`);
              if (!JSON.stringify(music).includes(from)) {
                music.push({ groupId: from, usus: [] });
                fs.writeFileSync(
                  "./arquivos/music.json",
                  JSON.stringify(music, null, 2)
                );
              }
              AB = music.map((i) => i.groupId).indexOf(from);
              if (JSON.stringify(music[AB].usus).includes(sender)) {
                AC = music[AB].usus.map((i) => i.id).indexOf(sender);
                music[AB].usus.splice(AC, 1);
                fs.writeFileSync(
                  "./arquivos/music.json",
                  JSON.stringify(music, null, 2)
                );
              }
              try {
                ABC = await fetchJson(
                  `https://miwa-apis.online/api/dl/ytplay?query=${q}&apikey=${API_KEY_MIWA}`
                );
                bla = `
⟬ 🅑ⓁⒶⒸⓀ  🅜ⓊⓈⒾⒸ  »Ⓥ③« ⟭

🎙️⃤ 𝚃í𝚝𝚞𝚕𝚘: ${ABC.resultado[0].title}
⏰⃤ 𝚃𝚎𝚖𝚙𝚘: ${ABC.resultado[0].timestamp} com ${ABC.resultado[0].views} visualizações
🎞️⃤ 𝙲𝚊𝚗𝚊𝚕: ${ABC.resultado[0].author.name}
📹⃤ 𝙿𝚘𝚜𝚝𝚊𝚍𝚘: ${ABC.resultado[0].ago}
🗞️⃤ 𝙳𝚎𝚜𝚌𝚛𝚒çã𝚘: ${ABC.resultado[0].description}

_${tempo} ${pushname}, digite *"áudio", "vídeo"* ou *"doc"* para escolher a forma de envio (sem as aspas)_
`;
                music[AB].usus.push({
                  id: sender,
                  urlAudio: `https://miwa-apis.online/api/dl/ytaudio?url=${ABC.resultado[0].url}&apikey=${API_KEY_MIWA}`,
                  urlVideo: `https://miwa-apis.online/api/dl/ytvideo?url=${ABC.resultado[0].url}&apikey=${API_KEY_MIWA}`,
                  title: ABC.resultado[0].title,
                });
                fs.writeFileSync(
                  "./arquivos/music.json",
                  JSON.stringify(music, null, 2)
                );
                miwa.sendMessage(
                  from,
                  { image: { url: ABC.resultado[0].thumbnail }, caption: bla },
                  { quoted: info }
                );
              } catch (e) {
                return reply(downoff);
              }
              break;

            case "playmix":
              if (!q)
                return reply(
                  `moryzinha ensinamentos: ${prefix + command} Rap Do Sukuna`
                );
              reply(`Realizando Download, Aguarde...`);
              try {
                //By: Licth San
                const response = await fetchJson(
                  `https://tohsaka.tech/youtube/search?query=${q}&apitoken=` +
                    API_KEY_MORY
                );
                const { resultado } = response;
                let musicInfo = "❯❯  ꪶMIWA͢ BOT͢ꫂ - DOWNLOAD - MIX  ❮❮\n\n";
                let count = 0;
                for (let i = 0; i < resultado.length; i++) {
                  const music = resultado[i];
                  if (music.type === "video") {
                    //By: Licth San
                    musicInfo += `*ৡৢ͜͡𝔬⃝Título:* ${music.title}\n`;
                    musicInfo += `*ৡৢ͜͡𝔬⃝Duração:* ${music.timestamp}\n`;
                    musicInfo += `*ৡৢ͜͡𝔬⃝Link:* ${music.url}\n\n`;
                    count++;
                  }
                }
                if (count > 0) {
                  //By: Licth San
                  const capimg = await getBuffer(resultado[0].thumbnail);
                  await miwa.sendMessage(
                    from,
                    { image: capimg, caption: musicInfo },
                    { quoted: info }
                  );
                }
                for (let i = 0; i < resultado.length; i++) {
                  const music = resultado[i];
                  if (music.type === "video") {
                    //By: Licth San
                    const downloadMsg = `❯❯  ꪶMORY͢ BOT͢ꫂ - DOWNLOAD  - MIX  ❮❮\n\nৡৢ͜͡𝔬⃝Download ${
                      i + 1
                    }: ${music.title}\n\n`;
                    await miwa.sendMessage(
                      from,
                      {
                        audio: {
                          url:
                            `https://tohsaka.tech/youtube/mp3?url=${music.url}&apitoken=` +
                            API_KEY_MORY,
                        },
                        mimetype: "audio/mpeg",
                        caption: downloadMsg,
                      },
                      { quoted: info }
                    );
                    await sleep(1000);
                  }
                }
              } catch (error) {
                //By: Licth San
                console.error("Erro ao processar a solicitação:", error);
                reply(
                  "Ocorreu um erro ao processar sua solicitação. Por favor, tente novamente mais tarde."
                );
              }
              break;

            case "playmp4":
              if (!q)
                return reply(
                  `Por favor, coloque um nome de uma música para obter sucesso ao resultado.`
                );
              reply(`Aguarde um momento, ${pushname}`);
              const apiMp4 = await fetchJson(
                `https://miwa-apis.online/api/ytsrc/videos?q=${q}&apikey=` +
                  API_KEY_MIWA
              );
              videoUrl = await getBuffer(
                `https://miwa-apis.online/api/dl/ytvideo?url=${apiMp4.resultado[0].url}&apikey=` +
                  API_KEY_MIWA
              );
              miwa
                .sendMessage(
                  from,
                  {
                    video: videoUrl,
                    caption: `• *Título:* ${apiMp4.resultado[0].title}\n• *Descrição:* ${apiMp4.resultado[0].description}\n• *Duração:* ${apiMp4.resultado[0].timestamp} | ${apiMp4.resultado[0].seconds} segundos.\n• *Link:* ${apiMp4.resultado[0].url}`,
                  },
                  { quoted: info }
                )
                .catch((e) => {
                  return reply(
                    `Desculpe, ocorreu um erro. Por favor, tente novamente mais tarde.`
                  );
                });
              break;

            case "playvideo":
            case "playvid":
            case "pvid":
              if (!q) return reply(mess.syntaxDownloadMusic());
              try {
                data = await fetchJson(
                  `https://miwa-apis.online/api/ytsrc/videos?q=${q}&apikey=` +
                    API_KEY_MORY
                );
                await miwa.sendMessage(
                  from,
                  {
                    video: {
                      url:
                        `https://miwa-apis.online/api/dl/ytvideo?url=${data.resultado[0].url}&apikey=` +
                        API_KEY_MORY,
                    },
                    caption: mess.playVideo(data),
                  },
                  { quoted: info }
                );
              } catch (error) {
                reply(
                  "Seja mais específico, não deu pra encontrar com apenas isto..."
                );
              }
              break;

            case "pdoc":
            case "playd":
            case "playdoc": //criador da case: ryuu & Akiyamax
              const yutdcu = require("@distube/ytdl-core");
              if (!q) return reply("Coloque o nome da música também");
              reply("🗡 consegue esperar 2 minutos? mandando..."); //criador da case: ryuu & Akiyamax
              const nucuakfys = `https://www.youtube.com/results?search_query=${encodeURIComponent(
                q
              )}`;
              fetch(nucuakfys)
                .then((response) => response.text())
                .then((body) => {
                  const videoId = body.match(/"videoId":"(.*?)"/)[1];
                  const videoUrl = `http://www.youtube.com/watch?v=${videoId}`;
                  return yutdcu(videoUrl, { filter: "audioonly" });
                }) //criador da case: ryuu & Akiyamax
                .then((stream) => {
                  const chunks = [];
                  stream.on("data", (chunk) => chunks.push(chunk));
                  stream.on("end", () => {
                    const audioBuffer = Buffer.concat(chunks);
                    miwa.sendMessage(
                      from,
                      {
                        document: audioBuffer,
                        mimetype: "audio/mp4",
                        fileName: `${q}.m4a`,
                        seconds: 360000000,
                        contextInfo: {
                          forwardingScore: 100000,
                          isForwarded: true,
                        }, //criador da case: ryuu & Akiyamax
                      },
                      {
                        quoted: {
                          key: { fromMe: false, participant: `${sender}` },
                          message: { conversation: `Ets de Vaginas ` },
                        },
                      }
                    );
                  });
                })
                .catch((err) => {
                  console.error(err);
                  reply("SCRAPER FALHOY");
                }); //criador da case: ryuu & Akiyamax
              break; //criador da case: ryuu & Akiyamax

            case "shazam":
              {
                if (!isQuotedAudio)
                  return reply(
                    "⚠️ Envie o áudio para eu detectar o nome da música!"
                  );
                let music = await getFileBuffer(
                  info.message.extendedTextMessage.contextInfo.quotedMessage
                    .audioMessage,
                  "audio"
                );
                let mime = (quoted.info || quoted).mimetype || "";
                let m = mime.split("/")[1];
                fs.writeFileSync(
                  "./database/assets/" + sender + "." + m,
                  music
                );
                let base64 = fs.readFileSync(
                  "./database/assets/" + sender + "." + m,
                  { encoding: "base64" }
                );
                try {
                  let hasil = await arcloud(base64);
                  data = await fetchJson(
                    `https://miwa-apis.online/api/ytsrc?q=${hasil[0].titulo}&apikey=` +
                      API_KEY_MIWA
                  );
                } catch (e) {
                  reply("❌️ _*Música não encontrada!*_ ❌️");
                }
                capShz = `▢ *Música:* ${data.resultado[0].title}\n▢ *Duração:* ${data.resultado[0].timestamp} | ${data.resultado[0].seconds} segundos.`;
                shzi = await getBuffer(data.resultado[0].image);
                miwa.sendMessage(
                  from,
                  { image: shzi, caption: capShz },
                  { quoted: info }
                );
                // Enviar aúdio da música do Shazam através do YouTube - [ ytdownloader.js ]
                resultAudio = await fetchJson(
                  `http://sabapis.tech/yt/mp3?link=${data.resultado[0].url}&apikey=` +
                    API_KEY_MIWA
                );
                audioShz = await getBuffer(resultAudio.dl_link);
                miwa.sendMessage(from, {
                  audio: audioShz,
                  mimetype: "audio/mpeg",
                });
              }
              break;

            case "spotify":
              if (!q) return reply(`Use: ${prefix + command} nome da música`);
              try {
                ABC = await fetchJson(
                  `https://miwa-apis.online/api/spotifysearch?query=${encodeURI(
                    q
                  )}&apikey=` + API_KEY_BLACK
                );
                i = ABC.resultado.tracksArray[0];
                link = await fetchJson(
                  `https://miwa-apis.online/api/dl/spotify?url=${i.url}&apikey=` +
                    API_KEY_BLACK
                );
                txt = `ㅤㅤㅤㅤ🎧 𝐒𝐏𝐎𝐓𝐈𝐅𝐘 🎧

❪🎵𝙼ú𝚜𝚒𝚌𝚊ฺ࣭࣪͘ꕸ▸ ${i.title}
❪⏱️𝙳𝚞𝚛𝚊çã𝚘ฺ࣭࣪͘ꕸ▸ ${link.resultado.duration}
❪👥𝙰𝚛𝚝𝚒𝚜𝚝𝚊(𝚜)ฺ࣭࣪͘ꕸ▸ ${i.artists.map((v) => `${v.name}`).join(", ")}
⏤͟͟͞͞ ꦿ𝙻𝚒𝚗𝚔৴▸ ${i.url}
----------------------------------------------
𝙱𝚢 ${NomeDoBot}`;
                sendUrlText(
                  from,
                  txt,
                  `Ouça agora ${i.title} em seu aplicativo Spotify 🔥`,
                  `Music • Duração: ${link.resultado.duration}`,
                  i.thumb,
                  i.url,
                  info
                );
                sendAudio(from, link.resultado.url, "audio/mpeg", info);
              } catch (e) {
                return reply("Erro");
              }
              break;

            case "soundcloud":
            case "scdl":
              if (!q)
                return reply(
                  `Tá faltando aí! Cadê o link da música no SoundCloud hein? 😴`
                );
              reply(mess.wait());
              try {
                zan = await fetchJson(
                  `https://miwa-apis.online/api/soundcloud?url=${q}&apikey=` +
                    API_KEY_MIWA
                );
                tinyUrl = await axios.get(
                  `https://tinyurl.com/api-create.php?url=${zan.resultado.link_dl}`
                );
                txt = `🎶 *Música:* ${zan.resultado.titulo}\n📤 *Total de Downloads:* ${zan.resultado.total_downloads}\n\n`;
                txt += `Caso não seja enviado o áudio, faça o download por meio do link: ${tinyUrl.data}`;
                miwa.sendMessage(
                  from,
                  { image: { url: zan.resultado.capa }, caption: txt },
                  { quoted: selo }
                );
                miwa.sendMessage(from, {
                  audio: { url: zan.resultado.link_dl },
                  mimetype: "audio/mpeg",
                  contextInfo: {
                    externalAdReply: {
                      title: `Música: ${zan.resultado.titulo}`,
                      body: `Total de Downloads: ${zan.resultado.total_downloads}`,
                      mediaType: 2,
                      thumbnail: await (
                        await fetch(zan.resultado.capa)
                      ).buffer(),
                      mediaUrl: `${zan.resultado.link_dl}`,
                      sourceUrl: `${zan.resultado.link_dl}`,
                    },
                  },
                  quoted: selo,
                });
              } catch (e) {
                if (String(e).includes("invalid json response body at")) {
                  console.log(
                    "A api caiu ou não foi possivel executar esta ação., espere retornar"
                  );
                } else {
                }
              }
              break;

            case "tiktok4":
            case "t4":
            case "ttk4":
            case "ttkmp4":
            case "tiktokvideo4":
              try {
                if (!q.includes("tiktok"))
                  return reply(`${prefix + command} link do Tiktok`);
                ABC = await fetchJson(
                  `https://miwa-apis.online/download/tiktok6?url=${q}&apikey=` +
                    API_KEY_MIWA
                );
                i = ABC.resultado;
                if (i.type == `video`) {
                  reagir(from, "🎥");
                  reply(`❪𝙴𝚗𝚟𝚒𝚊𝚗𝚍𝚘 𝚂𝚎𝚞 𝚅í𝚍𝚎𝚘ฺ࣭࣪͘ꕸ▸`);
                  sendVideo(
                    from,
                    i.video.playAddr[0],
                    `〘 @${i.username} 〙`,
                    info
                  );
                } else {
                  reagir(from, "📸");
                  reply(`▧⃯⃟𝙰𝚐𝚞𝚊𝚛𝚍𝚎, 𝙶𝚎𝚛𝚊𝚗𝚍𝚘 𝙸𝚖𝚊𝚐𝚎𝚖ฺ͘.•🛸 ݈݇─`);
                  for (image of i.noWatermark) {
                    await sleep(1200);
                    sendImage(from, image);
                  }
                  await sleep(1000);
                  sendAudio(from, i.music.playUrl[0], `audio/mpeg`, info);
                }
              } catch (e) {
                console.log(e);
                return reply(downoff);
              }
              break;

            case "tiktok2":
            case "tiktok_video2":
            case "tiktokvideo2":
              try {
                if (!q)
                  return reply(
                    "Tá faltando algo aí! Cadê o link do vídeo no tiktok hein? 😴"
                  );
                reply(mess.wait());
                ABC = await fetchJson(
                  `https://miwa-apis.online/download/tiktok2?url=${q}&apikey=` +
                    API_KEY_MIWA
                );
                i = ABC.resultado;
                legenda = "❯❯ MIWA - DOWNLOADS ❮❮\n\n";
                legenda += `*Legenda:* ${i.description}`;
                videoByTiktok = await getBuffer(i.url);
                miwa
                  .sendMessage(
                    from,
                    { video: videoByTiktok, caption: `${legenda}` },
                    { quoted: info }
                  )
                  .catch((e) => {});
              } catch (e) {
                console.log(e);
                reply("Ocorreu um Erro ao Executar a Função, Erro: " + e);
              }
              break;

            case "tiktok_audio":
            case "tiktokaudio":
              if (!q.includes("tiktok"))
                return reply("Por favor, adicione um link do tiktok");
              if (!q.includes("tiktok.com"))
                return reply("Realizando Download, Aguarde");
              reagir(from, "🙂");
              try {
                reply("Realizando o download");
                ahhhhh = await fetchJson(
                  `https://miwa-apis.online/download/tiktok5?url=${q}&apikey=` +
                    API_KEY_MIWA
                );
                moryh = await getBuffer(ahhhhh.resultado.audio);
                miwa
                  .sendMessage(
                    from,
                    { audio: moryh, mimetype: "audio/mpeg" },
                    { quoted: info }
                  )
                  .catch((e) => {
                    console.error("Erro ao enviar mensagem com vídeo:", e);
                    return reply("Erro ao enviar vídeo.");
                  });
              } catch (e) {
                console.error("Erro ao processar requisição:", e);
                return reply(
                  "Ocorreu um erro ao tentar baixar o Áudio Do Tiktok."
                );
              }
              break;

            case "insta":
            case "insta_video":
            case "instagram":
            case "igdl":
              if (q.length < 5)
                return reply(
                  "Por favor, adicione um link do Instagram post/reel."
                );
              try {
                const { instagram } = require("betabotz-tools");
                const url = `${q};`;
                const results = await instagram(url);
                if (
                  results.result &&
                  results.result.length > 0 &&
                  results.result[0]._url
                ) {
                  const videoUrl = results.result[0]._url;
                  await miwa.sendMessage(
                    from,
                    { video: { url: videoUrl }, mimetype: "video/mp4" },
                    { quoted: info }
                  );
                } else {
                  return reply(
                    `Desculpe, ocorreu um erro. Por favor, tente novamente mais tarde.`
                  );
                }
              } catch (error) {
                console.error(error);
                return reply(
                  `Desculpe, ocorreu um erro. Por favor, tente novamente mais tarde.`
                );
              }
              break;

            case "editbranca":
              if (args.length < 1)
                return reply("Você precisa fornecer um nick.");

              try {
                const apiUrl = `https://tohka.tech/api/canvas/editbranca?nick=${encodeURIComponent(
                  q
                )}&img=https://i.pinimg.com/564x/96/70/98/967098685058d9b14f5b715fd43e88d1.jpg&apikey=ZVWBS`;
                const response = await fetch(apiUrl);
                const buffer = await response.buffer();

                // Envia a imagem gerada como resposta
                await miwa.sendMessage(
                  from,
                  { image: buffer },
                  { quoted: info }
                );
              } catch (error) {
                console.error("Erro ao processar a requisição:", error);
                reply("Ocorreu um erro ao processar sua solicitação.");
              }
              break;

            case "editroxa":
              if (args.length < 1)
                return reply("Você precisa fornecer um nick.");

              try {
                const apiUrl = `https://tohka.tech/api/canvas/editroxo?nick=${q}&img=https://telegra.ph/file/edd98b4aefa226c05e60d.jpg&apikey=ZVWBS`;
                const response = await fetch(apiUrl);
                const buffer = await response.buffer();

                // Envia a imagem gerada como resposta
                await miwa.sendMessage(
                  from,
                  { image: buffer },
                  { quoted: info }
                );
              } catch (error) {
                console.error("Erro ao processar a requisição:", error);
                reply("Ocorreu um erro ao processar sua solicitação.");
              }
              break;

            case "editvermelho":
            case "editvermelha":
              if (args.length < 1)
                return reply("Você precisa fornecer um nick.");

              try {
                const apiUrl = `https://tohka.tech/api/canvas/editvermelha?nick=${q}&img=https://telegra.ph/file/d3f32c55c57b738806acf.png&apikey=ZVWBS`;
                const response = await fetch(apiUrl);
                const buffer = await response.buffer();

                // Envia a imagem gerada como resposta
                await miwa.sendMessage(
                  from,
                  { image: buffer },
                  { quoted: info }
                );
              } catch (error) {
                console.error("Erro ao processar a requisição:", error);
                reply("Ocorreu um erro ao processar sua solicitação.");
              }
              break;

            case "audioeco":
              if (
                (isMedia &&
                  !info.message.imageMessage &&
                  !info.message.videoMessage) ||
                isQuotedAudio
              ) {
                reply(`Espera aí, adicionando eco ao áudio...`);
                muk = isQuotedAudio
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .audioMessage
                  : info.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec(
                  `ffmpeg -i ${gem} -filter_complex "aecho=0.8:0.88:60:0.4" ${ran}`,
                  (err, stderr, stdout) => {
                    DLT_FL(gem);
                    if (err)
                      return reply(
                        "Ocorreu um erro ao adicionar o *efeito de eco* no áudio."
                      );
                    hah = fs.readFileSync(ran);
                    miwa.sendMessage(
                      from,
                      { audio: hah, mimetype: "audio/mpeg", ptt: true },
                      { quoted: info }
                    );
                    DLT_FL(ran);
                  }
                );
              } else {
                reply("Marque o áudio..");
              }
              break;

            case "comprar-key":
              reply(`*Opa amigo, quer comprar sua key mais não sabe aonde comprar?*

_*Vem com a Akiyama que te mostramos*_

•====================================•

*⚠️VALOR DOS REQUEST:⚠️*
*1K de Request = 1R$*
*5K de Request = 5R$*
*10K de Request = 10R$*
*15K de Request = 15R$*
*20K de Request = 20R$*
*100K de Request = 50R$*

*⚡️CASO QUEIRA TRANSFORMAR SUA KEY EM VIP, SERÁ COBRADO 15R$⚡️*

*+ Pack de Cases original da Equipe Akiyama*

•====================================•

*CASO TENHA SE INTERESSADO E QUEIRA COMPRAR UMA KEY, CHAME NO NÚMERO ABAIXO:*
https://wa.me/${
                nmrdn.split("@")[0]
              }?text=Ol%C3%A1,%20gostaria%20de%20comprar%20uma%20Apikey

*SITE OFICIAL:*
miwa-apis.online

*GRUPO OFICIAL DE SUPORTE:*
https://www.flamengo.com.br/`);
              break;

            case "twitter":
            case "twtdl":
            case "twitter_video":
              if (!q.includes("x.com"))
                return reply(
                  `Faltando o link válido do twitter para download do video ou foto.`
                );
              reagir(from, "😸");
              try {
                reply(`Realizando Download`);
                ABC = await fetchJson(
                  `https://miwa-apis.online/api/dl/twitter2?url=${q}&apikey=` +
                    API_KEY_MORY
                );
                for (let i = 0; i < ABC.resultado.media.length; i++) {
                  await sleep(1000); // Pausa de 1 segundo(s).
                  mytype = ABC.resultado.media[i];
                  if (ABC.resultado.type == "video") {
                    miwa.sendMessage(
                      from,
                      { video: { url: mytype.url } },
                      { quoted: info }
                    );
                  } else {
                    miwa.sendMessage(
                      from,
                      { image: { url: mytype.url } },
                      { quoted: info }
                    );
                  }
                }
              } catch (e) {
                console.log(e);
                reply(`Erro`);
              }
              break;

            case "tiktok_imagem":
            case "tiktok_img":
              if (args.length < 1)
                return reply(
                  `Falta algo! O que você deseja realizar o download? 🤔`
                );
              reply(mess.wait());
              usur = args.join(" ");
              res = await fetchJson(
                `https://miwa-apis.online/download/tikphotovid?url=${q}&apikey=` +
                  API_KEY_MIWA
              );
              msgSemQuoted(
                `*Esta publicação no tiktok em forma de galeria contém: ${res.resultado.photo.length} fotos*, em segundos enviarei, só aguardar!`
              );
              for (let i = 0; i < res.resultado.photo.length; i++) {
                photosTk = await getBuffer(res.resultado.photo[i].url_download);
                miwa.sendMessage(from, { image: photosTk });
              }
              break;

            case "certificado2":
              if (args.length < 1) return reply(`cade o texto`);
              teks = body.slice(1);
              if (teks.length > 30)
                return reply("O texto é longo, até 30 caracteres");
              reply(`espera ai, vou mandar rapaz`);
              const certificadocusitw = `https://553555.sirv.com/Images/IMG-20240808-WA0701.jpg?text.0.text=ryuu&text.0.position.x=-17%25&text.0.position.y=-22%25&text.0.size=15&text.0.color=000000&text.0.font.family=Russo%20One&text.0.font.weight=700&text.0.outline.opacity=37&text.1.text=${q}&text.1.position.gravity=center&text.1.position.y=-7%25&text.1.size=18&text.1.color=000000&text.1.font.family=VT323`;
              miwa.sendMessage(
                from,
                {
                  image: {
                    url: certificadocusitw,
                    mimetype: "image/jpeg",
                    caption: "Aqui está a imagem!",
                    height: "1204",
                    width: "850",
                  },
                },
                { quoted: info }
              );
              break;

            case "certificado":
              /*
exemplo de uso: 
/certificado de fudelidade/nunebas/nunebas fudeo com o giulian

*/
              const [tokyo_1, tokyo_2, tokyo_3] = q.split("/");
              if (!tokyo_1)
                return reply('digite o tipo do certificado antes da "/"');
              if (!tokyo_2)
                return reply(
                  'digite o nome que vai ficar no certificado logo após a "/"'
                );
              if (!tokyo_3)
                return reply(
                  'digite uma descrição para o certificado logo após a "/"'
                );
              urlimg = `https://tanonimot.sirv.com/IMG-20240808-WA0206.jpg?text.0.text=${tokyo_1}&text.0.position.x=-35%25&text.0.position.y=-65%25&text.0.size=30&text.0.color=c8b70a&text.1.text=${tokyo_2}&text.1.position.x=-35%25&text.1.position.y=-50%25&text.1.size=30&text.1.color=000000&text.1.font.family=Volkhov&text.2.text=${tokyo_3}&text.2.position.x=-30%25&text.2.position.y=-40%25&text.2.size=40&text.2.color=000000`;
              miwa.sendMessage(
                from,
                { image: { url: urlimg } },
                { quoted: info }
              );
              break;

            // DOWNLOADS
            case "down_audio":
            case "face_audio":
            case "insta_audio":
            case "twitter_audio":
              try {
                qd = args.join(" ");
                if (!qd) return;
                if (qd.includes("facebook"))
                  return reply("Só baixo no formato fb.watch");
                reply(mess.wait());
                miwa
                  .sendMessage(
                    from,
                    {
                      audio: {
                        url:
                          `https://miwa-apis.online/api/download?url=${qd}&apikey=` +
                          API_KEY_MIWA,
                      },
                      mimetype: "audio/mpeg",
                    },
                    { quoted: info }
                  )
                  .catch((e) => {
                    console.log(e);
                    reply("ERROR!!");
                  });
              } catch (e) {
                if (String(e).includes("invalid json response body at")) {
                  console.log(e);
                } else {
                  reply("ERROR!!️");
                }
              }
              break;

            case "down_video":
            case "face_video":
              try {
                var qd = args.join(" ");
                if (!qd) return;
                if (qd.includes("facebook"))
                  return reply("Só baixo no formato fb.watch");
                reply(mess.wait());
                miwa
                  .sendMessage(
                    from,
                    {
                      video: {
                        url:
                          `https://miwa-apis.online/api/download?url=${qd}&apikey=` +
                          API_KEY_MIWA,
                      },
                      mimetype: "video/mp4",
                    },
                    { quoted: info }
                  )
                  .catch((e) => {
                    console.log(e);
                    reply("ERROR!!");
                  });
              } catch (e) {
                if (String(e).includes("invalid json response body at")) {
                  console.log(e);
                } else {
                  reply("ERROR!!️");
                }
              }
              break;

            case "mediafire":
              try {
                //By: Licth San
                if (!q.includes("mediafire.com"))
                  return reply("Cadê o Link de Download????");
                const res = await axios.get(q, { timeout: 50000 });
                const $ = cheerio.load(res.data);
                const link = $("a#downloadButton").attr("href");
                if (!link) return reply("Ei Verifique se Esse Link e Válido.");
                const tamanho = $("a#downloadButton")
                  .text()
                  .replace("Download", "")
                  .replace("(", "")
                  .replace(")", "")
                  .replace("\n", "")
                  .replace("\n", "")
                  .replace("                         ", "");
                const seplit = link.split("/");
                const nome = seplit[5];
                let tipo = nome.split(".");
                tipo = tipo[1];
                reply(`❯❯  MIWA BOT - DOWNLOAD   ❮❮\n
*Nome:* ${nome}\n*Tamanho:* ${tamanho}`);
                await miwa.sendMessage(from, {
                  document: { url: link },
                  mimetype: "application/" + tipo,
                  fileName: nome,
                });
              } catch (e) {
                //By: Licth San
                console.error("Erro ao Realizar o Download:", e);
                return reply(
                  "Problema Ao Realizar o Seu Download, Tenta depois"
                );
              }
              break;

            case "letra":
            case "lyrics":
            case "letramusic":
              try {
                if (!q)
                  return reply(
                    `É o nome da música? Exemplo: ${
                      prefix + command
                    } the perfect girl`
                  );
                letrakk = await fetchJson(
                  `http://br3.bronxyshost.com:4091/api/letramusic?apikey=${API_KEY_MIWA}&query=${q}`
                );
                letra = `${letrakk.resultado.letraDaMusica}`;
                miwa.sendMessage(from, {
                  image: { url: `${letrakk.resultado.imagemMusic}` },
                  caption: letra,
                });
              } catch (e) {
                if (String(e).includes("corpo de resposta json inválido em")) {
                  console.log(e);
                } else {
                  console.log(e);
                  reply(
                    "Música não encontrada ou a api caiu! Tente novamente com outra música!"
                  );
                }
              }
              break;

            case "gitclone":
              {
                let regex1 =
                  /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i;
                if (!q)
                  return reply(
                    `Exemplo: ${prefix}gitclone https://github.com/YajiirDev/avatar`
                  );
                if (!args[0])
                  reply(
                    `Exemplo: ${prefix}gitclone https://github.com/YajiirDev/avatar`
                  );
                reply(mess.wait());
                if (!regex1.test(args[0])) return reply("Aguarde...");
                let [, user, repo] = args[0].match(regex1) || [];
                repo = repo.replace(/.git$/, "");
                let url = `https://api.github.com/repos/${user}/${repo}/zipball`;
                let filename = (await fetch(url, { method: "HEAD" })).headers
                  .get("content-disposition")
                  .match(/attachment; filename=(.*)/)[1];
                miwa
                  .sendMessage(
                    from,
                    {
                      document: { url: url },
                      fileName: filename + ".zip",
                      mimetype: "application/zip",
                    },
                    { quoted: selo }
                  )
                  .catch((err) =>
                    reply(
                      "❌️ Erro ao executar o download do arquivo solicitado..."
                    )
                  );
              }
              break;

            case "play_video":
            case "ytmp4":
              try {
                if (!q)
                  return reply(
                    `${
                      prefix + command
                    } Link ou nome do que você deseja baixar no YouTube.`
                  );
                reply("⏳ Baixando sua música, espere!");
                miwa
                  .sendMessage(
                    from,
                    {
                      video: {
                        url:
                          `https://miwa-apis.online/api/dl/ytvideo?url=${q}&apikey=` +
                          API_KEY_MIWA,
                      },
                      mimetype: "video/mp4",
                    },
                    { quoted: info }
                  )
                  .catch((e) => {
                    return reply("ERROR!!");
                  });
              } catch (e) {
                return reply("ERROR!!");
              }
              break;

            case "play_audio":
            case "ytmp3":
              try {
                if (!q)
                  return reply(
                    `${
                      prefix + command
                    } Link ou nome do que você deseja baixar no YouTube.`
                  );
                reply("⏳ Baixando sua música, espere!");
                miwa
                  .sendMessage(
                    from,
                    {
                      audio: {
                        url:
                          `https://miwa-apis.online/api/dl/ytaudio2?url=${q}&apikey=` +
                          API_KEY_MIWA,
                      },
                      mimetype: "audio/mpeg",
                    },
                    { quoted: info }
                  )
                  .catch((e) => {
                    return reply("ERROR!!");
                  });
              } catch (e) {
                return reply("ERROR!!");
              }
              break;

            case "tuna":
            case "tunamp3":
              if (!q) return reply(` *Exemplo:* ${prefix + command} Lula`);
              reply(`Aguarde...`);
              tuna = await fetchJson(
                `https://miwa-apis.online/api/tuna?query=${q}&apikey=` +
                  API_KEY_MIWA
              );
              teks = pickRandom(tuna.resultado);
              miwa
                .sendMessage(
                  from,
                  { audio: { url: teks }, mimetype: "audio/mpeg" },
                  { quoted: info }
                )
                .catch((e) => {
                  return reply(
                    `Desculpe, ocorreu um erro. Por favor, tente novamente mais tarde.`
                  );
                });
              break;

            case "playmeme":
            case "audiomeme":
              if (!q) return reply(` *Exemplo:* ${prefix + command} Lula`);
              reply(`Aguarde...`);
              bla = await fetchJson(
                `https://miwa-apis.online/api/tuna?query=${q}&apikey=` +
                  API_KEY_MIWA
              );
              teks = pickRandom(bla.resultado);
              miwa
                .sendMessage(
                  from,
                  { audio: { url: teks }, mimetype: "audio/mpeg" },
                  { quoted: info }
                )
                .catch((e) => {
                  return reply(
                    `Desculpe, ocorreu um erro. Por favor, tente novamente mais tarde.`
                  );
                });
              break;

            case "bc":
            case "bcgroup":
            case "transmitir":
            case "transmissão":
              {
                if (
                  !SoDono &&
                  !isnit &&
                  !issupre &&
                  !ischyt &&
                  !info.key.fromMe
                )
                  return reply(mess.onlyOwner());
                if (!q)
                  return reply(
                    `Texto onde? Exemplo : ${
                      prefix + command
                    } Hasta la vista baby`
                  );
                let getGroups = await miwa.groupFetchAllParticipating();
                let groups = Object.entries(getGroups)
                  .slice(0)
                  .map((entry) => entry[1]);
                let anu = groups.map((v) => v.id);
                for (i = 0; i < anu.length; i++) {
                  await sleep(1500);
                  let txt = `「 TRANSMISSÃO DO BOT 」\n\n ${q}`;
                  miwa.sendMessage(anu[i], { text: txt });
                }
                reply(`Enviado com sucesso...`);
              }
              break;

            case "celular":
              try {
                if (!q)
                  return reply(
                    `Qual celular você deseja pesquisar as informações sobre?`
                  );
                ABC = await fetchJson(
                  `https://miwa-apis.online/api/info_celular?celular=${q}&apikey=` +
                    API_KEY_MIWA
                );
                var {
                  AmericanasSearch,
                } = require("./arquivos/funcoes/scraper/pesquisas.js");
                AmericanasSearch(q).then(async ({ resultado: res }) => {
                  teks = `📍 *Smartphone:* ${ABC.resultado.nomeCelular}\nℹ️ *Informação básica:* ${ABC.resultado.informações}\n\n⚙️ *Informações Técnicas:*\n\n${ABC.resultado.resumoExtra}`;
                  miwa.sendMessage(from, {
                    image: { url: res[0].imagem },
                    caption: teks,
                  });
                });
              } catch (e) {
                console.log(e);
                reply(`ERROR!!`);
              }
              break;

            case "tiktok":
            case "tiktok_video":
            case "tiktokvideo":
              try {
                reply(
                  `Não precisa gritar, já ouvi e tô enviando o seu pedido!`
                );
                require("./arquivos/funcoes/scraper/tiktok.js")
                  .tikmate(q)
                  .then((data) => {
                    miwa.sendMessage(
                      from,
                      {
                        video: { url: data.video.noWatermark },
                        caption: `_*Aqui está o seu vídeo do TikTok:*_\n*Pedido por:* _${pushname}_\n*Baixado por:* _${NomeDoBot}_`,
                      },
                      { quoted: info }
                    );
                  });
              } catch {
                reply(
                  `Desculpe, ocorreu um erro. Por favor, tente novamente mais tarde.`
                );
              }
              break;

            case "join":
            case "entrar":
              if (!SoDono) return reply(mess.onlyOwner());
              string = args.join(" ");
              if (!string)
                return reply("Insira um link de convite ao lado do comando.");
              if (
                string.includes("chat.whatsapp.com/") ||
                reply("Ops, verifique o link que você inseriu.")
              ) {
                link = string.split("app.com/")[1];
                try {
                  miwa.groupAcceptInvite(`${link}`);
                } catch (erro) {
                  if (String(erro).includes("resource-limit")) {
                    reply("O grupo já está com o alcance de 257 membros.");
                  }
                  if (String(erro).includes("not-authorized")) {
                    reply(
                      "Não foi possível entrar no grupo.\nMotivo: Banimento."
                    );
                  }
                }
              }
              break;

            case "antiimg":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("Hmmmm");
              if (Number(args[0]) === 1) {
                if (isAntiImg)
                  return reply("O recurso de anti imagem já está ativado.");
                dataGp[0].antiimg = true;
                setGp(dataGp);
                reply(
                  "✔️ Ativou com sucesso o recurso de anti imagem neste grupo.️"
                );
              } else if (Number(args[0]) === 0) {
                if (!isAntiImg)
                  return reply("O recurso de anti imagem já está desativado.");
                dataGp[0].antiimg = false;
                setGp(dataGp);
                reply(
                  "✔️ Desativou com sucesso o recurso de anti imagem neste grupo."
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "antivideo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("Hmmmm");
              if (Number(args[0]) === 1) {
                if (isAntiVid)
                  return reply("O recurso de anti vídeo já está ativado.");
                dataGp[0].antivideo = true;
                setGp(dataGp);
                reply(
                  "✔️ Ativou com sucesso o recurso de anti video neste grupo."
                );
              } else if (Number(args[0]) === 0) {
                if (!isAntiVid)
                  return reply("O recurso de anti vídeo já está desativado.");
                dataGp[0].antivideo = false;
                setGp(dataGp);
                reply(
                  "✔️ Desativou com sucesso o recurso de anti video neste grupo."
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "antiaudio":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("Hmmmm");
              if (Number(args[0]) === 1) {
                if (isAntiAudio)
                  return reply("O recurso de anti áudio já está ativado.");
                dataGp[0].antiaudio = true;
                setGp(dataGp);
                reply(
                  "✔️ Ativou com sucesso o recurso de anti audio neste grupo."
                );
              } else if (Number(args[0]) === 0) {
                if (!isAntiAudio)
                  return reply("O recurso de anti áudio já está desativado.");
                dataGp[0].antiaudio = false;
                setGp(dataGp);
                reply(
                  "✔️ Desativou com sucesso o recurso de anti audio neste grupo."
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "antisticker":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("Hmmmm");
              if (Number(args[0]) === 1) {
                if (isAntiSticker)
                  return reply("O recurso de anti sticker já está ativado.");
                dataGp[0].antisticker = true;
                setGp(dataGp);
                reply(
                  "✔️ Ativou com sucesso o recurso de anti sticker neste grupo."
                );
              } else if (Number(args[0]) === 0) {
                if (!isAntiSticker)
                  return reply("O recurso de anti sticker já está desativado.");
                dataGp[0].antisticker = false;
                setGp(dataGp);
                reply(
                  "✔️ Desativou com sucesso o recurso de anti sticker neste grupo."
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "antidocumento":
            case "antidoc":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (Antidoc)
                  return reply("O recurso de anti documento já está ativado.");
                dataGp[0].antidoc = true;
                setGp(dataGp);
                reply(
                  "✔️ Ativou com sucesso o recurso de anti documento neste grupo."
                );
              } else if (Number(args[0]) === 0) {
                if (!Antidoc)
                  return reply(
                    "O recurso de anti documento já está desativado."
                  );
                dataGp[0].antidoc = false;
                setGp(dataGp);
                reply(
                  "✔️ Desativou com sucesso o recurso de anti documento neste grupo."
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "antictt":
            case "anticontato":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (isAntiCtt)
                  return reply("O recurso de anti contato já está ativado.");
                dataGp[0].antictt = true;
                setGp(dataGp);
                reply(
                  "✔️ Ativou com sucesso o recurso de anti contato neste grupo."
                );
              } else if (Number(args[0]) === 0) {
                if (!isAntiCtt)
                  return reply("O recurso de anti contato já está desativado.");
                dataGp[0].antictt = false;
                setGp(dataGp);
                reply(
                  "️✔️ Desativou com sucesso o recurso de anticontato neste grupo.️"
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "antiloc":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              try {
                if (args.length < 1)
                  return reply("1 pra ativar, 0 pra desligar");
                if (Number(args[0]) === 1) {
                  if (Antiloc)
                    return reply("O recurso de anti loc já está ativado.");
                  dataGp[0].antiloc = true;
                  setGp(dataGp);
                  reply(
                    "✔️ Ativou com sucesso o recurso de anti loc neste grupo."
                  );
                } else if (Number(args[0]) === 0) {
                  if (!Antiloc)
                    return reply("O recurso de anti loc já está desativado.");
                  dataGp[0].antiloc = false;
                  setGp(dataGp);
                  reply(
                    "✔️ Desativou com sucesso o recurso de anti loc neste grupo."
                  );
                } else {
                  reply("1 para ativar, 0 para desativar");
                }
              } catch {
                reply("Deu erro, tente novamente :/");
              }
              break;

            case "antilinkgp":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (isAntilinkgp)
                  return reply(
                    "O recurso de antilink de grupo já está ativado."
                  );
                dataGp[0].antilinkgp = true;
                setGp(dataGp);
                reply("✔️ Ativou com sucesso o recurso de antilink de grupo.");
              } else if (Number(args[0]) === 0) {
                if (!isAntilinkgp)
                  return reply(
                    "O recurso de antilink de grupo já está desativado."
                  );
                dataGp[0].antilinkgp = false;
                setGp(dataGp);
                reply(
                  "✔️ Desativou com sucesso o recurso de antilink de grupo."
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "antilinkhard":
            case "antilink":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (isAntiLinkHard)
                  return reply(
                    "O recurso de antilink hardcore já está ativado."
                  );
                dataGp[0].antilinkhard = true;
                setGp(dataGp);
                reply(
                  "✔️ Ativou com sucesso o recurso de antilink hardcore neste grupo."
                );
              } else if (Number(args[0]) === 0) {
                if (!isAntiLinkHard)
                  return reply(
                    "O recurso de antilink hardcore já está desativado."
                  );
                dataGp[0].antilinkhard = false;
                setGp(dataGp);
                reply(
                  "✔️ Desativou com sucesso o recurso de antilink harcore neste grupo.️"
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "x9":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (isx9) return reply("O recurso de x9 já está ativado.");
                dataGp[0].x9 = true;
                setGp(dataGp);
                reply(
                  "✔️ Ativou com sucesso o recurso de x9 neste grupo, irei notificar quando alguém for rebaixado ou promovido a adm 😏.."
                );
              } else if (Number(args[0]) === 0) {
                if (!isx9) return reply("O recurso de x9 já está desativado.");
                dataGp[0].x9 = false;
                setGp(dataGp);
                reply(
                  "✔️ Desativou com sucesso o recurso de x9 neste grupo, não irei mais notificar promoção de adm nem rebaixamento.. ️"
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "visualizarmsg":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!isVisualizar) {
                nescessario.visualizarmsg = true;
                setNes(nescessario);
                reply(
                  "✔️ Ativou com sucesso o recurso de visualizar todas as mensagens enviada em grupos e privado."
                );
              } else if (isVisualizar) {
                nescessario.visualizarmsg = false;
                setNes(nescessario);
                reply(
                  "✔️ Desativou com sucesso o recurso de visualizar todas as mensagens enviada em grupos e privado."
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "x9visuunica":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (isX9VisuUnica)
                  return reply(
                    "O recurso de revelar visu única já está ativado."
                  );
                dataGp[0].visuUnica = true;
                setGp(dataGp);
                reply(
                  "✔️ Ativou com sucesso o recurso de revelar visu única neste grupo."
                );
              } else if (Number(args[0]) === 0) {
                if (!isX9VisuUnica)
                  return reply(
                    "O recurso de revelar visu única já está desativado."
                  );
                dataGp[0].visuUnica = false;
                setGp(dataGp);
                reply(
                  "✔️ Desativou com sucesso o recurso de revelar visu única neste grupo."
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "so_adm":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (So_Adm) return reply("Ja esta ativo");
                dataGp[0].soadm = true;
                setGp(dataGp);
                reply(
                  " - Ativou com sucesso o recurso de só adm utilizar comandos neste grupo 📝"
                );
              } else if (Number(args[0]) === 0) {
                if (!So_Adm) return reply("Ja esta Desativado");
                dataGp[0].soadm = false;
                setGp(dataGp);
                reply(
                  "‼️ Desativou o recurso de Só ADM utiliar comandos neste grupo ✔️"
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "odelete":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!SoDono) return reply(mess.onlyOwner());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (IS_DELETE)
                  return reply("O recurso de delete já está ativado.");
                nescessario.Odelete = true;
                setNes(nescessario);
                reply("✔️ Ativou com sucesso o recurso de delete nos grupos.");
              } else if (Number(args[0]) === 0) {
                if (IS_DELETE)
                  return reply("O recurso de delete já está desativado.");
                nescessario.Odelete = false;
                setNes(nescessario);
                reply(
                  "️✔️ Desativou com sucesso o recurso de delete nos grupos.️"
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "antifake":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (isAntifake)
                  return reply("O recurso de antifake já está ativado.");
                dataGp[0].antifake = true;
                setGp(dataGp);
                reply(
                  "✔️ Ativou com sucesso o recurso de antifake neste grupo."
                );
              } else if (Number(args[0]) === 0) {
                if (isAntifake)
                  return reply("O recurso de antifake já está desativado.");
                dataGp[0].antifake = false;
                setGp(dataGp);
                reply(
                  "✔️ Desativou com sucesso o recurso de antifake neste grupo.️"
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "prefixos":
              if (!isGroup) return reply(mess.onlyGroup());
              if (dataGp[0].prefixos.length < 1)
                return reply(
                  "Não contem nenhum prefixo a + adicionado neste grupo."
                );
              bla = `Lista de prefixos para uso do bot, no Grupo: ${groupName}\n\n`;
              for (i of dataGp[0].prefixos) {
                bla += `Prefixo: ${i}\n\n`;
              }
              reply(bla);
              break;

            case "buscar_sticker":
            case "buscar_stk":
            case "buscasticker":
              if (args.length < 1)
                return reply(`Falta algo! O que você deseja buscar? 🤔`);
              reply(
                `Aguarde... Estou procurando um pacote de acordo com a sua pesquisa!`
              );
              usur = args.join(" ");
              res = await fetchJson(
                `https://zangaapis.herokuapp.com/api/pesquisa/sticker?texto=${q}&apikey=miwa-Apikey-Premium`
              );
              msgSemQuoted(
                `💬 *Sucesso, encontrei!* Estou enviando ${res.resultado.sticker_url.length} stickers do pacote nomeado abaixo:\n• *Nome:* ${res.resultado.title}`
              );
              for (let i = 0; i < res.resultado.sticker_url.length; i++) {
                bala = await getBuffer(res.resultado.sticker_url[i]);
                fs.writeFileSync("./database/assets/sticker_url.webp", bala);
                site = fs.readFileSync("./database/assets/sticker_url.webp");
                bass64 = `data:image/jpeg;base64,${site.toString("base64")}`;
                mantap = await convertSticker(
                  bass64,
                  `@miwaConteudos`,
                  `${NomeDoBot}`
                );
                imageBuffer = new Buffer.from(mantap, "base64");
                miwa.sendMessage(from, { sticker: imageBuffer });
              }
              break;

            case "fig":
            case "figurinhas":
              if (!q)
                return reply("Insira a qnd de figu que deja que eu envie");
              if (!Number(args[0]) || Number(q.trim()) > 10)
                return reply(
                  "Digite a quantidade de figurinhas que deseja que eu envie.. não pode mais de 5.."
                );
              reply(mess.wait());
              async function figuss() {
                var rnd = Math.floor(Math.random() * 8051);
                miwa.sendMessage(from, {
                  sticker: {
                    url: `https://raw.githubusercontent.com/badDevelopper/Testfigu/main/fig (${rnd}).webp`,
                  },
                });
              }
              for (i = 0; i < q; i++) {
                await sleep(680);
                figuss();
              }
              break;


              case 'figemoji':
                case 'figroblox':
                case 'figmeme':
                case 'figanime':
                case 'figcoreana':
                case 'figraiva': 
                case 'figengracada':  
                case 'figdesenho':
                case 'fig':      
                   if (!q) return reply("Insira a qnd de figu que deja que eu envie")
                   if (!Number(args[0]) || Number(q.trim()) > 10) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. não pode mais de 5..")
                      const owner = 'luskizera'; //Teu nome no gitHub
                      const repo = 'figus2'; //Nome do teu repo
                      async function figugit() {
                      fetch(`https://api.github.com/repos/${owner}/${repo}/contents/${command}`).then(response => response.json()).then(data => {     
                      const randomIndex = Math.floor(Math.random() * data.length);
                      //console.log(data);
                     miwa.sendMessage(from, { sticker: { url:`https://raw.githubusercontent.com/${owner}/${repo}/main/${command}/${data[randomIndex].name}` } }) // Antes do sendMessage, colocar o operador do bot
                   })}
                   for (i = 0; i < q; i++) {
                      await sleep(1880) // N PODE SER INFERIOR A 1000 POIS DA ERRO
                      figugit()
                   }
                   break

            case "figrandom":
            case "figaleatoria":
              reply(mess.wait());
              bla = await getBuffer(
                `http://api.nezsab-apis.xyz/figu?apikey=` + API_KEY_MIWA
              );
              miwa.sendMessage(from, { sticker: bla });
              break;

            case "add_prefixo":
            case "setprefix":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isMultiP)
                return reply(
                  `Para usar este comando, você deve ativar o comando, multiprefix\nExemplo: ${prefix}multiprefixo 1`
                );
              if (ANT_LTR_MD_EMJ(q))
                return reply("Não pode letra modificada, nem emoji..");
              if (!q.trim())
                return reply(
                  "Determine o novo prefixo, não pode espaço vazio..."
                );
              if (q.trim() > 1)
                return reply(
                  `Calma, o prefixo só pode ser um\nExemplo: ${
                    prefix + command
                  } _\nAe o bot vai passar á responder _ como prefixo do bot..`
                );
              if (dataGp[0].prefixos.indexOf(q.trim()) >= 0)
                return reply(
                  `Esse prefixo já se encontra incluso, procure ver na lista dos prefixos\nExemplo: ${prefix}prefixos`
                );
              dataGp[0].prefixos.push(q.trim());
              setGp(dataGp);
              reply(
                `Prefixo ${q.trim()} Adicionado com sucesso na lista de prefixos para uso do bot, neste grupo...`
              );
              break;

            case "tirar_prefixo":
            case "delprefix":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isMultiP)
                return reply(
                  `Para usar este comando, você deve ativar o comando, multiprefix\nExemplo: ${prefix}multiprefixo 1`
                );
              if (ANT_LTR_MD_EMJ(q))
                return reply("Não pode letra modificada, nem emoji..");
              if (!q.trim())
                return reply(
                  "Determine o prefixo que deseja tirar, não pode espaço vazio..."
                );
              if (q.trim() > 1)
                return reply(
                  `Calma, o prefixo só pode ser tirado um por vez\nExemplo: ${
                    prefix + command
                  } _\nAe o bot não vai responder mais com _`
                );
              if (dataGp[0].prefixos.indexOf(q.trim()) < 0)
                return reply(
                  `Esse prefixo não está incluso, procure ver na lista dos prefixos\nExemplo: ${prefix}prefixos`
                );
              if (dataGp[0].prefixos.length == 1)
                return reply(
                  "Adicione um prefixo para pode tirar este, tem que ter pelo menos 1 prefixo já incluso dentro do sistema para tirar outro."
                );
              dataGp[0].prefixos.splice(
                dataGp[0].prefixos.indexOf(q.trim()),
                1
              );
              setGp(dataGp);
              reply(
                `Prefixo ${q.trim()} tirado com sucesso da lista de prefixos de uso deste grupo..`
              );
              break;

            case "multiprefixo":
            case "mprefix":
            case "multiprefix":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins && !SoDono) return reply(mess.onlyAdmins());
              if (!isMultiP) {
                dataGp[0].multiprefix = true;
                setGp(dataGp);
                reply(
                  "🌀 Ativou com sucesso o recurso de multi prefixos neste grupo"
                );
              }
              if (isMultiP) {
                dataGp[0].multiprefix = false;
                setGp(dataGp);
                reply(
                  "✔️ Desativou com sucesso o recurso de multi prefixos neste grupo"
                );
              }
              break;

            case "ephemeral":
            case "eph":
            case "msgtemp":
              {
                if (!isGroup) return reply(mess.onlyGroup());
                if (!isBotGroupAdmins)
                  return reply(
                    `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                  );
                if (!q)
                  return reply(`Insira os valores de ativação/desativação`);
                if (args[0] === "1") {
                  reply(`⏲️ As mensagens temporárias ativada com sucesso. ✅️`);
                  await miwa.sendMessage(from, {
                    disappearingMessagesInChat: WA_DEFAULT_EPHEMERAL,
                  });
                } else if (args[0] === "0") {
                  reply(
                    `⏲️ As mensagens temporárias desativada com sucesso. ‼️`
                  );
                  await miwa.sendMessage(from, {
                    disappearingMessagesInChat: false,
                  });
                }
              }
              break;

            case "changegroup":
            case "config_gp":
            case "config-group":
              {
                if (!isGroup) return reply(mess.onlyGroup());
                if (!isBotGroupAdmins)
                  return reply(
                    `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                  );
                if (!q)
                  return reply(
                    `Insira all / adms para escolher quem pode atualizar os dados do grupo. A decisão é sua, adm! `
                  );
                if (args[0] === "adms") {
                  reply(
                    `🔐 Sucesso! - Agora somente os adm poderá editar os dados do grupo.`
                  );
                  await miwa.groupSettingUpdate(from, "locked");
                } else if (args[0] === "all") {
                  reply(
                    `🔓 Sucesso! - Agora todos os participantes pode alterar os dados do grupo.`
                  );
                  await miwa.groupSettingUpdate(from, "unlocked");
                }
              }
              break;

            case "rmphotogp":
            case "rmfotogroup":
              {
                if (!isGroup) return reply(mess.onlyGroup());
                if (!isBotGroupAdmins)
                  return reply(
                    `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                  );
                reply(`A foto do grupo foi removida com sucesso.`);
                await miwa.removeProfilePicture(from);
              }
              break;

            case "antinotas":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("Hmmmm");
              if (Number(args[0]) === 1) {
                if (isAntiNotas) return reply("Já Esta ativo");
                dataGp[0].antinotas = true;
                setGp(dataGp);
                reply(
                  "Ativou com sucesso o recurso de anti notas neste grupo✔️"
                );
              } else if (Number(args[0]) === 0) {
                if (!isAntiNotas) return reply("Ja esta Desativado.");
                dataGp[0].antinotas = false;
                setGp(dataGp);
                reply(
                  "Desativou com sucesso o recurso de anti notas neste grupo✔️"
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "anticatalogo":
            case "anticatalg":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (isAnticatalogo) return reply("Ja esta ativo");
                dataGp[0].anticatalogo = true;
                setGp(dataGp);
                reply(
                  "🌀 Ativou com sucesso o recurso de anticatalogo neste grupo 📝"
                );
              } else if (Number(args[0]) === 0) {
                if (!isAnticatalogo) return reply("Ja esta Desativado");
                dataGp[0].anticatalogo = false;
                setGp(dataGp);
                reply(
                  "‼️ Desativou com sucesso o recurso de anticatalogo neste grupo✔️"
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "fakeban":
            case "b4n":
            case "bam":
              setTimeout(() => {
                reagir(from, "🫡");
              }, 300);
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              miwa.sendMessage(
                from,
                {
                  text: `*O alvo ↴*
@${menc_os2.split("@")[0]} *foi removido com sucesso...* 🫡`,
                  mentions: [menc_os2],
                },
                { quoted: info }
              );
              setTimeout(() => {
                miwa.sendMessage(from, {
                  text: `@${
                    menc_os2.split("@")[0]
                  } caiu na pegadinha do malandro 😂`,
                  mentions: [menc_os2],
                });
              }, 120000);
              break; // By: Ryuu

            case "welkome": //By: MisheruModz
            case "welcome": //By: MisheruModz
            case "bemvindo": //By: MisheruModz
            case "welkom": //By: MisheruModz
              if (!isGroup) return reply("Só em Grupo");
              if (!isGroupAdmins && !isCreator) return reply("Só adm ou dono");
              if (q.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                //By: MisheruModz
                if (isWelcome) return reply("Ja esta ativo");
                welcome.push(from);
                fs.writeFileSync(
                  "./arquivos/welkon/welkon.json",
                  JSON.stringify(welcome)
                );
                reply(
                  `Ativou com sucesso o recurso de ${command} neste grupo `
                );
              } else if (Number(args[0]) === 0) {
                //By: MisheruModz
                if (!isWelcome) return reply("Ja esta Desativado");
                const ainMisheruzinho = from;
                let ManoMisheru = welcome.indexOf(ainMisheruzinho);
                while (ManoMisheru >= 0) {
                  //By: MisheruModz
                  welcome.splice(ManoMisheru, 1);
                  ManoMisheru = welcome.indexOf(ainMisheruzinho);
                }
                fs.writeFileSync(
                  "./arquivos/welkon/welkon.json",
                  JSON.stringify(welcome)
                );
                reply(
                  "‼️ Desativou com sucesso o recurso de bem-vindo neste grupo ✔️"
                );
              } else {
                //By: MisheruModz
                reply("1 para ativar, 0 para desativar");
              } //Eu MisheruModz demorei pra arrumar isso então pfvr deixe os créditos
              break;

            case "bemvindo2":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!SoDono) return reply(mess.onlyOwner());
              if (args.length < 1)
                return reply(
                  `Digite da forma correta:\nComando: ${
                    prefix + command
                  } 1 para ativar `
                );
              if (Number(args[0]) === 1) {
                if (isWelkom2)
                  return reply("❎O recurso já está ativado no grupo❎");
                dataGp[0].wellcome[1].bemvindo2 = true;
                setGp(dataGp);
                reply("✅O recurso foi ativado✅");
              } else if (Number(args[0]) === 0) {
                if (!isWelkom2)
                  return reply("❎O recurso não está ativado no grupo❎");
                dataGp[0].wellcome[1].bemvindo2 = false;
                setGp(dataGp);
                reply("❌O recurso foi desativado❌");
              } else {
                reply(
                  `Digite da forma correta:\nComando: ${
                    prefix + command
                  } 1, para ativar e 0 para desativar`
                );
              }
              break;

            case "legendabv":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply("*Escreva a mensagem de boas-vindas*");
              teks = body.slice(11);
              if (isWelkom) {
                dataGp[0].wellcome[0].legendabv = teks;
                setGp(dataGp);
                reply("*Mensagem de boas vindas definida com sucesso!*");
              } else {
                reply(`Ative o ${prefix}bemvindo 1`);
              }
              break;

            case "legendasaiu":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply("*Escreva a mensagem de saída*");
              teks = body.slice(13);
              if (isWelkom) {
                dataGp[0].wellcome[0].legendasaiu = teks;
                setGp(dataGp);
                reply("*Mensagem de saída definida com sucesso!*");
              } else {
                reply(`Ative o ${prefix}bemvindo 1`);
              }
              break;

            case "legendabv2":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply("*Escreva a mensagem de boas-vindas*");
              teks = body.slice(12);
              if (isWelkom2) {
                dataGp[0].wellcome[1].legendabv = teks;
                setGp(dataGp);
                reply("*Mensagem de boas vindas2 definida com sucesso!*");
              } else {
                reply(`Ative o ${prefix}bemvindo2 1`);
              }
              break;

            case "legendasaiu2":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply("*Escreva a mensagem de saída*");
              teks = body.slice(14);
              if (isWelkom2) {
                dataGp[0].wellcome[1].legendasaiu = teks;
                setGp(dataGp);
                reply("*Mensagem de saída2 definida com sucesso!*");
              } else {
                reply(`Ative o ${prefix}bemvindo2 1`);
              }
              break;

            case "legenda_estrangeiro":
            case "legenda_estrangeiros":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply("*Escreva a mensagem de remoção de estrangeiros*");
              if (isAntifake) {
                dataGp[0].legenda_estrangeiro = q;
                setGp(dataGp);
                reply(
                  "*Mensagem de remoção de estrangeiros definida com sucesso!*"
                );
              } else {
                reply(`Ative o antifake primeiro com ${prefix}antifake 1`);
              }
              break;

            case "legenda_video":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply("*Escreva a mensagem de remoção de estrangeiros*");
              dataGp[0].legenda_video = q;
              setGp(dataGp);
              reply("*Mensagem de remoção de video definida com sucesso!*");
              break;

            case "legenda_imagem":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply("*Escreva a mensagem de remoção de estrangeiros*");
              dataGp[0].legenda_imagem = q;
              setGp(dataGp);
              reply("*Mensagem de remoção de imagem definida com sucesso!*");
              break;

            case "legenda_documento":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply("*Escreva a mensagem de remoção de estrangeiros*");
              dataGp[0].legenda_documento = q;
              setGp(dataGp);
              reply("*Mensagem de remoção de Documento definida com sucesso!*");
              break;

            case "addautorm":
            case "addautoban":
            case "listanegra":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins && !SoDono)
                return reply("Precisa ser Dono ou Adm");
              if (!mrc_ou_numero)
                return reply(
                  "Marque a mensagem do usuário com o comando ou utilize o comando com o número do usuário que deseja adicionar na lista negra.."
                );
              if (dataGp[0].listanegra.includes(mrc_ou_numero))
                return reply("*Esse Número ja esta incluso*");
              dataGp[0].listanegra.push(mrc_ou_numero);
              setGp(dataGp);
              reply(`*Número adicionado a lista de autoban*`);
              break;

            case "autobang":
            case "listanegrag":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!mrc_ou_numero)
                return reply(
                  "Marque a mensagem do usuário com o comando ou utilize o comando com o número do usuário que deseja adicionar na lista negra Global.."
                );
              if (listanegraG.includes(mrc_ou_numero))
                return reply("*Esse Número ja esta incluso*");
              listanegraG.push(mrc_ou_numero);
              fs.writeFileSync(
                "./settings/nescessario.json",
                JSON.stringify(nescessario, null, "\t")
              );
              reply(`*Número adicionado a lista de autoban*`);
              break;

            case "tirardalistag":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!mrc_ou_numero)
                return reply(
                  "Marque a mensagem do usuário com o comando ou utilize o comando com o número do usuário que deseja tirar da lista negra.."
                );
              if (!listanegraG.includes(mrc_ou_numero))
                return reply("*Esse Número não esta incluso*");
              var i = listanegraG.indexOf(mrc_ou_numero);
              listanegraG.splice(i, 1);
              fs.writeFileSync(
                "./settings/nescessario.json",
                JSON.stringify(nescessario, null, "\t")
              );
              reply(`*Número foi removido da lista negra*`);
              break;

            case "delremover":
            case "delautorm":
            case "delautoban":
            case "tirardalista":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins && !SoDono) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (!mrc_ou_numero)
                return reply(
                  "Marque a mensagem do usuário com o comando ou utilize o comando com o número do usuário que deseja tirar da lista negra.."
                );
              if (!dataGp[0].listanegra.includes(mrc_ou_numero))
                return reply("*Esse Número não esta incluso*");
              var i = dataGp[0].listanegra.indexOf(mrc_ou_numero);
              dataGp[0].listanegra.splice(i, 1);
              setGp(dataGp);
              reply(`*Número foi removido da lista de autoban*`);
              break;

            case "listban":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (dataGp[0].listanegra.length < 1)
                return reply("*Nenhum Número não foi adicionado*");
              teks = "*Números que vou moer na porrada se voltar 😡:*\n";
              for (i = 0; i < dataGp[0].listanegra.length; ++i) {
                teks += `➤ *${dataGp[0].listanegra[i].split("@")[0]}*\n`;
              }
              teks += "*Esses ai vou descer meu martelo do ban 🥵*";
              reply(teks);
              break;

            case "vervid":
              if (!q) return reply(`Por favor, forneça um link. `);
              try {
                miwa.sendMessage(from, {
                  video: { url: q },
                  mentions: [sender],
                });
              } catch (e) {
                reply(`Não consegui carregar o link...`);
              }
              break;

            case "verimg2":
              if (!q) return reply(`Por favor, forneça o link da foto.`);
              const imageUrl = q.trim();
              miwa.sendMessage(
                from,
                { image: { url: imageUrl }, caption: "Aqui está a foto:" },
                { quoted: info }
              );
              break;

            case "verimg":
              if (!q) return reply(`Por favor, forneça o link da foto.`);
              const imageUrl2 = q.trim();
              miwa.sendMessage(
                from,
                { image: { url: imageUrl2 }, caption: "Aqui está a foto:" },
                { quoted: info }
              );
              break;

            case "mute":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply("O bot precisa ser adm pra executar essa ação.");
              if (
                info.message.extendedTextMessage === undefined ||
                info.message.extendedTextMessage === null
              )
                return reply("*Marque o número que deseja desmutar*");
              mentioned =
                info.message.extendedTextMessage.contextInfo.mentionedJid;
              if (isMuted) {
                var ind = GroupsMutedActived.indexOf(from);
                for (let _ of mentioned) {
                  teks = `Usuário mutado: @${
                    _.split("@")[0]
                  } - Ação do adm: [ ${pushname} ]`;
                  muted[ind].numbers.push(_);
                }
                fs.writeFileSync(
                  "./database/usuarios/muted.json",
                  JSON.stringify(muted, null, 2)
                );
                teks += "\nCaso você dar um piu, você vai ser banido do grupo.";
                mentions(teks, mentioned, true);
              } else {
                const data = {
                  jid: from,
                  numbers: mentioned,
                };
                muted.push(data);
                fs.writeFileSync(
                  "./database/usuarios/muted.json",
                  JSON.stringify(muted, null, 2) + "\n"
                );
                for (let _ of mentioned) {
                  teks = `Usuário mutado: @${
                    _.split("@")[0]
                  } - Ação do adm: [ ${pushname} ]`;
                }
                teks += "\nCaso você dar um piu, você vai ser banido do grupo.";
                mentions(teks, mentioned, true);
              }
              break;

            case "baileys":
              blv = JSON.parse(
                fs.readFileSync(
                  `./node_modules/@whiskeysockets/baileys/package.json`
                )
              );
              sendButton(
                from,
                {
                  text: ` ${tempo} ${pushname}..`,
                  footer: `Baileys Version - ${blv.version}`,
                },
                miwa,
                sender,
                [{ type: `copy_url`, text: blv.name, url: blv.homepage }],
                info
              );
              break;

            case "botversion":
              botv = JSON.parse(fs.readFileSync(`./package.json`)).version;
              sendButton(
                from,
                {
                  text: `🎲 Versão atual do bot - ${botv}`,
                  footer: `ROBERTIN`,
                },
                miwa,
                sender,
                [
                  {
                    type: `copy_url`,
                    text: NomeDoBot,
                    url: `https://miwa-apis.online`,
                  },
                ],
                info
              );
              break;

            case "desmute":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply("O Bot Precisa ser ADM pra executar essa ação.");
              if (
                info.message.extendedTextMessage === undefined ||
                info.message.extendedTextMessage === null
              )
                return reply("*Marque o número que deseja desmutar*");
              mentioned =
                info.message.extendedTextMessage.contextInfo.mentionedJid;
              var ind = GroupsMutedActived.indexOf(from);
              if (isMuted) {
                for (let _ of mentioned) {
                  if (muted[ind].numbers.indexOf(_) >= 0) {
                    var rmind = muted[ind].numbers.indexOf(_);
                    muted[ind].numbers.splice(rmind, 1);
                  }
                }
                fs.writeFileSync(
                  "./database/usuarios/muted.json",
                  JSON.stringify(muted, null, 2) + "\n"
                );
                for (let _ of mentioned) {
                  teks = `Usuário desmutado: @${
                    _.split("@")[0]
                  } - Ação do adm: [ ${pushname} ]`;
                }
                teks += "\nAgr você pode falar a vontade no grupo!";
                mentions(teks, mentioned, true);
              } else {
                const data = {
                  jid: from,
                  numbers: [],
                };
                muted.push(data);
                fs.writeFileSync(
                  "./database/usuarios/muted.json",
                  JSON.stringify(muted, null, 2) + "\n"
                );
                for (let _ of mentioned) {
                  teks = `Usuário desmutado: @${
                    _.split("@")[0]
                  } - Ação do adm: [ ${pushname} ]`;
                }
                teks += "\nAgr você pode falar a vontade no grupo!";
                mentions(teks, mentioned, true);
              }
              break;

            case "roletarussa":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              jds = [];
              A2 = groupMembers;
              B2 = groupMembers;
              TAMBOR = [
                "na perna.",
                "na cabeça.",
                "no pescoço.",
                "no peito.",
                "no olho.",
                "no estômago.",
                "na boca.",
                "na perna.",
                "na testa.",
                "no braço.",
              ];
              C2 = A2[Math.floor(Math.random() * A2.length)];
              if (C2 === sender || C2 === botNumber + "@s.whatsapp.net") {
                return reply(
                  `*Escolhi* @${
                    C2.id.split("@")[0]
                  } mas infelizmente correu de covardia...*`
                );
              }
              tpa = TAMBOR[Math.floor(Math.random() * TAMBOR.length)];
              reply(
                `*A escolha é minha! 1 membro irá morrer, que os jogos comecem...* `
              );
              setTimeout(() => {
                D1 = `*Que pena... você não sobreviveu ao meu jogo* @${
                  C2.id.split("@")[0]
                }, *hora de enterrar o cadáver, infelizmente morreu com tiro* *${tpa}*`;
                mentions(D1, jds, true);
              }, 5000);
              jds.push(C2.id);
              setTimeout(() => {
                jds.push(C2.id);
                miwa.groupParticipantsUpdate(from, [C2.id], "remove");
              }, 6000);
              break;

            case "criarimg":
            case "criar-img":
            case "imgcr":
              try {
                if (!q) return reply("O que você deseja criar amiguinho?");
                reply(
                  "Criando uma imagem a partir de seu questionamento, aguarde..."
                );
                miwa
                  .sendMessage(
                    from,
                    {
                      image: {
                        url: `https://miwa-apis.online/api/open-ai_img?TOKEN_GPT=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&q=${q}`,
                      },
                    },
                    { quoted: info }
                  )
                  .catch(() => {
                    return reply(
                      "🤓❌ *Ops amiguinho?!* Não e possível obter um resultado específico até a key da OpenAI seja definida...\n• Entre em contato com o dono, caso este erro ocorra novamente!"
                    );
                  });
              } catch {
                reply(
                  "🤓❌ *Ops amiguinho?!* Não e possível obter um resultado específico até a key da OpenAI seja definida...\n• Entre em contato com o dono, caso este erro ocorra novamente!"
                );
              }
              break;

            case "ai":
            case "ia": {
              if (!q) {
                return reply("Fala o que você quer, por favor.");
              }

              // Enviar uma reação de carregamento
              await miwa.sendMessage(from, {
                react: { text: `🤖`, key: info.key },
              });

              // Enviar mensagem de carregamento
              const loadingMessage = await miwa.sendMessage(from, {
                text: "Estou pensando... 🤔",
                quoted: info,
              });

              try {
                ia = await fetchJson(
                  `https://megumiapis.cloud/ias/gpt?q=${q}&apitoken=ryuu`
                );

                if (!ia || !ia.resultado) {
                  throw new Error("Nenhum resultado encontrado.");
                }

                // Responder com o resultado da IA e selo verificado
                const verifiedMessage = {
                  text: `${ia.resultado}`,
                  footer: "Verificado ✅",
                  contextInfo: {
                    externalAdReply: {
                      title: "Miwa-Bot",
                      body: "Resposta da IA",
                      mediaType: 1,
                      renderLargerThumbnail: true,
                      showAdAttribution: false,
                      thumbnail: await getBuffer(
                        `https://i.imgur.com/Fc8qvp1.jpeg`
                      ),
                      sourceUrl: `https://www.flamengo.com.br/`,
                    },
                  },
                };
                await miwa.sendMessage(from, verifiedMessage, {
                  quoted: loadingMessage,
                });
              } catch (e) {
                console.error(e);
                await miwa.sendMessage(from, {
                  text: "Ocorreu um erro ao tentar obter a resposta da IA.",
                  quoted: loadingMessage,
                });
              }

              // Enviar uma reação de conclusão
              await miwa.sendMessage(from, {
                react: { text: `✅`, key: info.key },
              });

              break;
            }

            case "hd":
              try {
                if (isMedia || isQuotedImage) {
                  post = isQuotedImage
                    ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                        .message.extendedTextMessage.contextInfo.message
                        .imageMessage
                    : info.message.imageMessage;
                  imagem = await downloadContentFromMessage(post, "image");
                  base64 = Buffer.from([]);
                  for await (const send of imagem) {
                    base64 = Buffer.concat([base64, send]);
                  }
                  reply(
                    `Alterando a qualidade da foto para *HD*, aguarde um pouco!`
                  );
                  const link = await uploader.imgur(base64);
                  const { remini } = require("betabotz-tools");
                  const results = await remini(link);
                  if (results && results.image_data) {
                    const imageUrl = results.image_data;
                    await miwa.sendMessage(
                      from,
                      { image: { url: imageUrl } },
                      { quoted: info }
                    );
                  } else {
                    return reply(
                      "(Sem resposta do módulo para melhorar a imagem)"
                    );
                  }
                } else {
                  reply("Selecione uma imagem para melhorar a qualidade.");
                }
              } catch (e) {
                console.error(e);
                return reply(
                  "(Erro interno do servidor. Por favor, tente novamente mais tarde.)"
                );
              }
              break;

            case "zombie":
              try {
                if (isMedia || isQuotedImage) {
                  post = isQuotedImage
                    ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                        .message.extendedTextMessage.contextInfo.message
                        .imageMessage
                    : info.message.imageMessage;
                  imagem = await downloadContentFromMessage(post, "image");
                  base64 = Buffer.from([]);
                  for await (const send of imagem) {
                    base64 = Buffer.concat([base64, send]);
                  }
                  reply(`Transformando, aguarde! Não vai demorar muito...️`);
                  const link = await uploader.imgur(base64);
                  const { tozombie } = require("betabotz-tools");
                  const results = await tozombie(link);
                  if (results && results.image_data) {
                    const imageUrl = results.image_data;
                    await miwa.sendMessage(
                      from,
                      { image: { url: imageUrl } },
                      { quoted: info }
                    );
                  } else {
                    return reply(
                      "(Sem resposta do módulo para transformar a imagem em zumbi)"
                    );
                  }
                } else {
                  reply("Selecione uma imagem para transformar em zumbi.");
                }
              } catch (e) {
                console.error(e);
                return reply(
                  "(Erro interno do servidor. Por favor, tente novamente mais tarde.)"
                );
              }
              break;

            case "animeia":
              try {
                if (isMedia || isQuotedImage) {
                  post = isQuotedImage
                    ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                        .message.extendedTextMessage.contextInfo.message
                        .imageMessage
                    : info.message.imageMessage;
                  imagem = await downloadContentFromMessage(post, "image");
                  base64 = Buffer.from([]);
                  for await (const send of imagem) {
                    base64 = Buffer.concat([base64, send]);
                  }
                  reply(
                    "*[ ! ] Criando seu avatar, aguarde! Não vai demorar muito...️*"
                  );

                  const link = await uploader.imgur(base64);
                  const { toanime } = require("betabotz-tools");
                  const results = await toanime(link); // Use o link da imagem aqui.

                  if (results && results.image_data) {
                    // Se houver um resultado no objeto results, envie a imagem transformada em personagem de anime
                    const imageUrl = results.image_data;

                    await miwa.sendMessage(
                      from,
                      { image: { url: imageUrl } },
                      { quoted: info }
                    );
                  } else {
                    return reply(
                      "(Sem resposta do módulo para transformar a imagem em personagem de anime)"
                    );
                  }
                } else {
                  reply(
                    "Selecione uma imagem para transformar em um personagem de anime."
                  );
                }
              } catch (e) {
                console.error(e);
                return reply(
                  "(Erro interno do servidor. Por favor, tente novamente mais tarde.)"
                );
              }
              break;

            case "gemini":
              if (!q)
                return reply(
                  `Faça uma pergunta para que o Gemini possa ajudar, você também pode mencionar uma imagem com o comando e fazer uma pergunta ao gemini sobre a imagem.\n\n*• Exemplo:* ${
                    prefix + command
                  } Olá tudo bem?`
                );
              try {
                const { GoogleGenerativeAI } = require("@google/generative-ai");
                const genAI = new GoogleGenerativeAI(
                  "AIzaSyAA9rJnbWVd0MRzhAiK7GTSxPrl4-cuA0E"
                );
                const modelText = genAI.getGenerativeModel({
                  model: "gemini-pro",
                });
                const modelImage = genAI.getGenerativeModel({
                  model: "gemini-pro-vision",
                });
                let imageData;
                let textResponse;
                const prompt = q;
                if (isQuotedImage || isMedia) {
                  let post;
                  if (isQuotedImage) {
                    post = isQuotedImage
                      ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                          .message.extendedTextMessage.contextInfo.message
                          .imageMessage
                      : info.message.imageMessage;
                  } else if (isMedia) {
                    post = info.message.imageMessage;
                  }
                  const imagem = await downloadContentFromMessage(
                    post,
                    "image"
                  );
                  if (!imagem || imagem.length === 0) {
                    return reply(
                      "_Erro ao processar a imagem. Por favor, tente novamente._"
                    );
                  }
                  let base64 = Buffer.from([]);
                  for await (const send of imagem) {
                    base64 = Buffer.concat([base64, send]);
                  }
                  imageData = {
                    inlineData: {
                      data: base64.toString("base64"),
                      mimeType: "image/png",
                    },
                  };
                  const imageName = `gemini_${Date.now()}.png`;
                  fs.writeFileSync(`./src/${imageName}`, base64);
                  fs.unlinkSync(`./src/${imageName}`);
                  const result = await modelImage.generateContent([
                    prompt,
                    imageData,
                  ]);
                  textResponse = result.response.text();
                  reply(textResponse);
                } else {
                  const { response } = await modelText.generateContent(
                    `${encodeURIComponent(q)}`
                  );
                  textResponse = response.text();
                  reply(textResponse);
                }
              } catch (e) {
                console.error(e);
                return reply(`erro`);
              }
              break;

            case "gpt3":
            case "chatgpt3":
              try {
                if (!q)
                  return reply(
                    `*Faça uma pergunta!*\n\nExemplo: ${
                      prefix + command
                    } mande uma receita de bolo`
                  );
                const { openai } = require("betabotz-tools");
                const traduzirgpt = require("translate-google");
                const results = await openai(q);
                if (results && results.result) {
                  const respostaIngles = results.result;
                  const respostaPortugues = await traduzirgpt(respostaIngles, {
                    to: "pt",
                  });
                  reply(respostaPortugues);
                } else {
                  return reply("(Sem resposta da OpenAI)");
                }
              } catch (e) {
                console.log(e);
                return reply(
                  "(Erro interno do servidor. Por favor, tente novamente mais tarde.)"
                );
              }
              break;

              case "gpt":
                case "chatgpt":
                  if (!q) return reply("onde está a pergunta para Miwa?");
                  reply("aguarde enquanto Miwa envia-lhe uma resposta...");
                
                  try {
                    const textoParaAPI = `Por favor, responda em português: ${q}`;
                    const response = await fetch(
                      `https://api.cafirexos.com/api/chatgpt?text=Por%20favor,%20responda%20em%20português:%20${encodeURIComponent(q)}`
                    );
                    const data = await response.json();
                
                    if (data && data.resultado) {
                      const respostaIndonesio = data.resultado; // Armazena a resposta em indonésio
                      const traduzirgpt = require("translate-google");
                
                      // Realiza a tradução para português
                      const respostaPortugues = await traduzirgpt(respostaIndonesio, { to: "pt" });
                
                      const selo = {
                        text: respostaPortugues, // Usa a resposta traduzida
                        contextInfo: {
                          externalAdReply: {
                            title: "Miwa-Bot",
                            description: "ChatGPT Response",
                            mediaType: 1,
                            renderLargerThumbnail: true,
                            showAdAttribution: false,
                            thumbnail: await getBuffer(`https://i.imgur.com/Fc8qvp1.jpeg`),
                            jpegThumbnail: await getBuffer(`https://i.imgur.com/Fc8qvp1.jpeg`),
                            sourceUrl: `https://www.flamengo.com.br/`,
                          },
                        },
                      };
                      await miwa.sendMessage(from, selo, { quoted: info });
                    } else {
                      reply("Erro ao processar resposta");
                      console.error("Error processing response:", data);
                    }
                  } catch (error) {
                    console.error(error);
                    reply("Miwa não consegue conectar a API");
                  }
                  break;
                                
            case "pergunta":
            case "bot":
            case "gpt":
              try {
                if (!q)
                  return reply(
                    `Ops, você não fez a sua pergunta. Utiliza esse comando com uma pergunta\n❓️ *Exemplo:* ${prefix}${command} o que é a água`
                  );
                miwa.sendMessage(from, {
                  react: { text: `🔍`, key: info.key },
                });
                anu1 = await fetchJson(
                  `https://miwa-apis.online/api/open-ai_txt?TOKEN_GPT=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&q=${q}`
                );
                msgSemQuoted(`${anu1.resultado}`);
              } catch (e) {
                if (String(e).includes("invalid json response body at")) {
                  console.log(e);
                  reply(
                    "🤓❌ *Ops amiguinho?!* Não e possível obter um resultado específico até a key da OpenAI seja definida...\n• Entre em contato com o dono, caso este erro ocorra novamente!"
                  );
                } else {
                  reply(
                    "🤓❌ *Ops amiguinho?!* Não e possível obter um resultado específico até a key da OpenAI seja definida...\n• Entre em contato com o dono, caso este erro ocorra novamente!"
                  );
                }
              }
              break;

            case "gptvoz":
              if (!q) return reply(`Ex: ${prefix}gpt Olá`);
              nznk = await fetch(
                `https://miwa-apis.online/api/open-ai_txt?TOKEN_GPT=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&q=${q}`
              ).then((response) => response.json());
              const gpts = require("./arquivos/funcoes/gtts")("pt");
              ranm = getRandom(".mp3");
              rano = getRandom(".ogg");
              gpts.save(ranm, `${nznk.resultado}`, function () {
                exec(
                  `ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`,
                  (err) => {
                    miwa.sendMessage(
                      from,
                      {
                        audio: fs.readFileSync(ranm),
                        ptt: true,
                        mimetype: "audio/mpeg",
                      },
                      { quoted: info }
                    );
                    DLT_FL(ranm);
                    DLT_FL(rano);
                  }
                );
              });
              break;

            case "corretor":
              if (!q)
                return reply(
                  `Ops, você não digitou o texto o qual deseja corrigir. Utiliza esse comando com alguma palavra ou texto!\n❓️ *Exemplo:* ${prefix}${command} Eu te mamo`
                );
              try {
                reply(
                  `Verificando os erros ortográficos em seu texto ou palavra... *Aguarde!*`
                );
                anu1 = await fetchJson(
                  `https://miwa-apis.online/api/open-ai_txt?TOKEN_GPT=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&q=Corrija gramaticalmente uma frase para o português brasileiro tradicional: ${q}`
                );
                msgSemQuoted(
                  `📖 *Texto corrigido:* ${anu1.resultado[0].TextoCorrigido}`
                );
              } catch (e) {
                if (String(e).includes("invalid json response body at")) {
                  console.log(e);
                } else {
                  reply(
                    "🤓❌ *Ops amiguinho?!* Não e possível obter um resultado específico até a key da OpenAI seja definida...\n• Entre em contato com o dono, caso este erro ocorra novamente!"
                  );
                }
              }
              break;

            case "nasa":
              try {
                if (!q) return reply(`Exemplo: ${prefix}${command} 05-07-2003`);
                dataSab = await fetchJson(
                  `https://miwa-apis.online/api/nasaphoto?data=${q}&apikey=` +
                    API_KEY_MIWA
                );
                resultExp = await fetchJson(
                  `https://miwa-apis.online/api/info/translate?texto=${dataSab.nasa.explanation}&ling=pt&apikey=` +
                    API_KEY_MIWA
                );
                miwa.sendMessage(from, {
                  image: { url: dataSab.nasa.hdurl },
                  caption: mess.result_APOD(dataSab, resultExp),
                });
              } catch (e) {
                console.log(
                  "A api caiu ou não foi possivel executar esta ação., espere retornar"
                );
                reply(`❌️ Erro identificado no servidor! ❌️`);
              }
              break;

/*             case "gerargrupos": //By: Aqua Bot
            case "gerargrupo": //By: Aqua Bot
            case "gerargp": //By: Aqua Bot
              if (!q) return reply("Ei, qual tipo de grupo?");
              reply(`🔎 _procurando grupos_ 🔍`);
              swp = await fetchJson(
                `https://tohka.tech/api/pesquisa/gpwhatsapp?nome=${q}&apikey=nduok4MPQR`
              );
              teks = `═══════ ❯❯ *Miwa - Bot - GRUPOS* ❮❮\n\n`;
              for (let i of swp) {
                teks += "▧⃯⃟NOME『" + i.nome + "』\n";
                teks += "▧⃯⃟DESCRIÇÃO→ " + i.descrição + "\n";
                teks += "▧⃯⃟LINK→ " + i.link + "\n\n";
              }
              teks += `☆ヅ━━━━━━━Miwa - Bot━━━━━━━━ヅ☆`;
              reply(teks);
              break;

            case "cases":
              if (!SoDono)
                return reply("Você não é dono para utilizar este comando...");
              try {
                const listCases = () => {
                  const fileContent = fs.readFileSync("index.js").toString();
                  const caseNames = fileContent.match(/case\s+'(.+?)'/g);
                  if (caseNames) {
                    return caseNames
                      .map(
                        (caseName, index) =>
                          `${index + 1}. ${caseName.match(/'(.+?)'/)[1]}`
                      )
                      .join("\n");
                  } else {
                    reply("nenhuma case encontrada.");
                  }
                };
                miwa.sendMessage(from, { text: listCases() }, { quoted: info });
              } catch (e) {
                console.log(e);
                reply("ocorreu um erro ao obter as cases.");
              }
              break;
 */
            case "simi":
              if (!isGroup) return reply(mess.onlyGroup());
              try {
                datasimi = await fetchJson(
                  `https://api.simsimi.vn/v1/simtalk`,
                  {
                    method: "POST",
                    headers: {
                      "content-type": "application/x-www-form-urlencoded",
                    },
                    body: "text=" + q + "&lc=pt",
                  }
                );
                return reply(datasimi.message);
              } catch (e) {
                return reply("Resposta não encontrada..");
              }
              break;

            case "simih":
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (isSimi) return reply("O modo simi está ativo");
                dataGp[0].simi1 = true;
                setGp(dataGp);
                reply("Ativado com sucesso o modo simi neste grupo 😗..");
              } else if (Number(args[0]) === 0) {
                if (!isSimi) return reply("Já está Desativado.");
                dataGp[0].simi1 = false;
                setGp(dataGp);
                reply("Desativado modo simi com sucesso neste grupo 😡️");
              } else {
                reply("1 para ativar, 0 para desativar, lerdao vc em KKKKK");
              }
              break;

            case "simih2":
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (isSimi2) return reply("O modo Simi está ativo");
                dataGp[0].simi2 = true;
                setGp(dataGp);
                reply("Ativado com sucesso o modo simi neste grupo 😗..");
              } else if (Number(args[0]) === 0) {
                if (!isSimi2) return reply("Já está Desativado.");
                dataGp[0].simi2 = false;
                setGp(dataGp);
                reply("Desativado modo simi com sucesso neste grupo 😡️");
              } else {
                reply("1 para ativar, 0 para desativar, lerdao vc em KKKKK");
              }
              break;

            case "autofigu":
            case "autosticker":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (isAutofigu) return reply("Ja esta ativo");
                dataGp[0].autosticker = true;
                setGp(dataGp);
                reply(
                  "✔️ Ativou com sucesso o recurso de auto figurinhas neste grupo."
                );
              } else if (Number(args[0]) === 0) {
                if (!isAutofigu) return reply("Ja esta Desativado");
                dataGp[0].autosticker = false;
                setGp(dataGp);
                reply(
                  "✔️ Desativou com sucesso o recurso de auto figurinhas neste grupo.️"
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "autorepo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (isAutorepo) return reply("Ja esta ativo");
                dataGp[0].autoresposta = true;
                setGp(dataGp);
                reply(
                  "🌀 Ativou com sucesso o recurso de auto resposta neste grupo. 📝"
                );
              } else if (Number(args[0]) === 0) {
                if (!isAutorepo) return reply("Ja esta Desativado");
                dataGp[0].autoresposta = false;
                setGp(dataGp);
                reply(
                  "‼️ Desativou com sucesso o recurso de auto resposta neste grupo.️ 📝"
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "quizpokemon": {
              // ideia: samuel
              // criador: ryuu Akiyamax

              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);

              const pokemonData = require("./ryuu/pokemon.json");
              const randomPokemon =
                pokemonData[Math.floor(Math.random() * pokemonData.length)];
              const correctAnswer = randomPokemon.name;

              const allAnswers = [
                "Pikachu",
                "Jigglypuff",
                "Meowth",
                "Bulbasaur",
                "Charmander",
                "Squirtle",
                "Caterpie",
                "Pidgey",
                "Rattata",
                "Ekans",
                "Sandshrew",
                "Nidoran♀",
                "Nidoran♂",
                "Vulpix",
                "Zubat",
                "Oddish",
                "Paras",
                "Venonat",
                "Diglett",
                "Meowth",
                "Psyduck",
                "Mankey",
                "Growlithe",
                "Poliwag",
                "Abra",
                "Machop",
                "Bellsprout",
                "Tentacool",
                "Geodude",
                "Ponyta",
                "Slowpoke",
                "Magnemite",
                "Doduo",
                "Seel",
                "Grimer",
                "Shellder",
                "Gastly",
                "Onix",
                "Drowzee",
                "Krabby",
              ];
              const filteredAnswers = allAnswers.filter(
                (answer) => answer !== correctAnswer
              );
              const randomAnswers = filteredAnswers
                .sort(() => Math.random() - 0.5)
                .slice(0, 2);
              randomAnswers.push(correctAnswer);
              randomAnswers.sort(() => Math.random() - 0.5);

              await btncomfoto(
                from,
                "Quiz: Quem é esse Pokémon?",
                `Quem é este Pokémon?`,
                "",
                "",
                { url: randomPokemon.photo },
                "image",
                info,
                {},
                randomAnswers.map((answer, index) => ({
                  name: "quick_reply",
                  buttonParamsJson: JSON.stringify({
                    display_text: `Resposta: ${answer}`,
                    id: `${prefix}${
                      answer === correctAnswer
                        ? "certopokemon"
                        : "erradopokemon"
                    }`,
                  }),
                }))
              );
              break;
            }

            case "certopokemon": {
              // ideia: samuel
              // criador: ryuu Akiyamax

              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              await reply("Parabéns! Você acertou o Pokémon.");
              await btncomfoto(
                from,
                "Jogar novamente?",
                `Você gostaria de tentar outro quiz de Pokémon?`,
                "",
                "",
                { url: frankyxfoto2 },
                "image",
                info,
                {},
                [
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Sim",
                      id: `${prefix}quizpokemon`,
                    }),
                  },
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Não",
                      id: `${prefix}naoquero`,
                    }),
                  },
                ]
              );
              break;
            }

            case "erradopokemon": {
              // ideia: samuel
              // criador: ryuu Akiyamax

              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              await reply("Que pena! Você errou o Pokémon.");
              await btncomfoto(
                from,
                "Jogar novamente?",
                `Você gostaria de tentar outro quiz de Pokémon?`,
                "",
                "",
                { url: frankyxfoto2 },
                "image",
                info,
                {},
                [
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Sim",
                      id: `${prefix}quizpokemon`,
                    }),
                  },
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Não",
                      id: `${prefix}naoquero`,
                    }),
                  },
                ]
              );
              break;
            }

            case "doulingo": {
              // ideia: ryuu
              // criador: ryuu Akiyamax

              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);

              const doulingoData = require("./ryuu/doulingo.json");
              const randomQuestion =
                doulingoData[Math.floor(Math.random() * doulingoData.length)];
              const correctAnswer = randomQuestion.resposta_certa;

              const allAnswers = [
                "Oi",
                "Tudo bem",
                "Obrigado",
                "Adeus",
                "Bom dia",
                "Boa noite",
                "Por favor",
                "Desculpe",
                "Olá",
                "Como vai?",
                "Valeu",
                "Até logo",
                "Boa tarde",
                "Até mais",
                "Com licença",
                "Perdão",
                "Oi, como está?",
                "Muito obrigado",
                "Nos vemos",
                "Tenha um bom dia",
                "Durma bem",
                "De nada",
                "Com certeza",
                "Desculpe-me",
                "Oi, tudo certo?",
                "Agradeço",
                "Tchau",
                "Tenha um ótimo dia",
                "Bom fim de semana",
                "Desculpe, não posso ajudar",
                "Fico feliz em ajudar",
                "Por nada",
                "Oi, tudo bem com você?",
                "Obrigadão",
                "Te vejo mais tarde",
                "Tenha um bom descanso",
                "Desculpa qualquer coisa",
                "Estamos juntos",
                "Conte comigo",
                "Me avise se precisar",
                "Oi, tudo tranquilo?",
                "Muito grato",
                "Nos encontramos depois",
                "Bom trabalho",
                "Boa sorte",
                "Desculpe por isso",
                "Não tem de quê",
                "Fique bem",
                "Oi, tudo em ordem?",
                "Muito agradecido",
                "Até amanhã",
                "Tenha um excelente dia",
                "Durma tranquilo",
                "Não se preocupe",
                "Sempre à disposição",
                "Vou estar por aqui",
                "Olá, como você está?",
                "Agradeço muito",
                "Até breve",
                "Tenha uma ótima noite",
                "Sinta-se à vontade",
                "Estou aqui para ajudar",
                "Fique à vontade",
                "Agradeço pelo seu contato",
                "Oi, como posso ajudar?",
                "Muito obrigado pela sua ajuda",
                "Até logo mais",
                "Tenha um ótimo fim de semana",
                "Fico à disposição",
                "Perdão pelo transtorno",
                "Conte comigo sempre",
                "Obrigado pela compreensão",
                "Oi, espero que esteja bem",
                "Muito grato por isso",
                "Nos vemos em breve",
                "Tenha um bom trabalho",
                "Boa sorte para você",
                "Desculpe pelo incômodo",
                "Estou aqui para o que precisar",
                "Obrigado pelo apoio",
                "Olá, tudo bem com você?",
                "Muito obrigado pela paciência",
                "Até a próxima",
                "Tenha um ótimo descanso",
                "Desculpe, não entendi",
                "Fico feliz em poder ajudar",
                "Por favor, me avise se precisar",
                "Agradeço a sua ajuda",
                "Oi, estou à disposição",
                "Muito grato pela atenção",
                "Nos encontramos em breve",
                "Tenha um ótimo dia de trabalho",
                "Desejo uma ótima noite",
                "Desculpe, foi um engano",
                "Estou sempre aqui para ajudar",
                "Obrigado por estar aqui",
                "Olá, como posso assisti-lo?",
                "Muito obrigado pelo suporte",
                "Até logo então",
                "Tenha um excelente final de semana",
                "Desculpe, não era minha intenção",
                "Estou feliz em poder ajudar",
                "Se precisar de algo, me avise",
                "Agradeço por entender",
                "Oi, tudo certo por aí?",
                "Muito grato pela compreensão",
                "Até mais ver",
                "Desejo um bom descanso",
                "Desculpe, não foi intencional",
                "Estou aqui para qualquer coisa",
                "Obrigado pelo retorno",
                "Sempre à disposição para ajudar",
                "Olá, tudo em ordem com você?",
                "Muito obrigado pela cooperação",
                "Nos vemos em breve então",
                "Tenha um ótimo dia para você",
                "Boa sorte em suas tarefas",
                "Desculpe, não posso ajudar agora",
                "Fico à disposição para o que precisar",
                "Obrigado pelo seu tempo",
                "Oi, estou por aqui",
                "Muito grato pela paciência",
                "Até logo, então",
                "Desejo um ótimo trabalho",
                "Boa sorte em tudo",
                "Desculpe, não posso ajudar nesse momento",
                "Estou à disposição para qualquer dúvida",
                "Obrigado pela compreensão e paciência",
                "Olá, tudo bem com tudo?",
                "Muito obrigado pela ajuda",
                "Até a próxima vez",
                "Tenha um excelente dia para você",
                "Desculpe qualquer mal-entendido",
                "Fico feliz em estar aqui para ajudar",
                "Por favor, não hesite em me chamar",
                "Agradeço imensamente",
                "Oi, tudo tranquilo por aí?",
                "Muito grato pela sua colaboração",
                "Nos encontramos em breve",
                "Desejo um ótimo descanso para você",
                "Desculpe por qualquer inconveniente",
                "Estou aqui para ajudar com qualquer coisa",
                "Obrigado por estar por aqui",
                "Sempre que precisar, estarei aqui",
                "Olá, tudo bem com todos?",
                "Muito obrigado pelo apoio",
                "Até logo e até mais",
                "Tenha um ótimo fim de semana para você",
                "Desculpe, não posso ajudar agora",
                "Fico à disposição para o que precisar",
                "Agradeço muito pelo seu tempo",
                "Obrigado pela sua ajuda e paciência",
                "Oi, como posso ser útil?",
                "Muito grato pela compreensão e apoio",
                "Até breve então",
                "Desejo um ótimo dia para você",
                "Boa sorte em tudo que fizer",
                "Desculpe se causei algum problema",
                "Estou sempre à disposição",
                "Obrigado pela sua disponibilidade",
                "Olá, tudo certo por aí?",
                "Muito obrigado pelo seu suporte",
                "Até logo e até mais",
                "Desejo um excelente final de semana",
                "Desculpe se houve algum mal-entendido",
                "Fico feliz em ajudar sempre que precisar",
                "Agradeço pela sua compreensão",
                "Estou aqui para qualquer necessidade",
              ];
              const filteredAnswers = allAnswers.filter(
                (answer) => answer !== correctAnswer
              );
              const randomAnswers = filteredAnswers
                .sort(() => Math.random() - 0.5)
                .slice(0, 2);
              randomAnswers.push(correctAnswer);
              randomAnswers.sort(() => Math.random() - 0.5);

              await btncomfoto(
                from,
                "Doulingo Quiz: Qual é a resposta correta?",
                `Qual é a resposta certa para "${randomQuestion.ingles}"?`,
                "",
                "",
                { url: `https://telegra.ph/file/8b3a18c452ce92dd2f996.jpg` },
                "image",
                info,
                {},
                randomAnswers.map((answer, index) => ({
                  name: "quick_reply",
                  buttonParamsJson: JSON.stringify({
                    display_text: `Resposta: ${answer}`,
                    id: `${prefix}${
                      answer === correctAnswer ? "doulingocertares" : "vcw33ou"
                    }`,
                  }),
                }))
              );
              break;
            }

            case "doulingocertares": {
              // ideia: ryuu
              // criador: ryuu Akiyamax

              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              await reply("Parabéns! Você acertou a resposta.");
              await btncomfoto(
                from,
                "Jogar novamente?",
                `Você gostaria de tentar outra pergunta?`,
                "",
                "",
                { url: frankyxfoto2 }, // Substitua pela URL da imagem que você quer usar
                "image",
                info,
                {},
                [
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Sim",
                      id: `${prefix}doulingo`,
                    }),
                  },
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Não",
                      id: `${prefix}naoquero`,
                    }),
                  },
                ]
              );
              break;
            }

            case "vcw33ou": {
              // ideia: ryuu
              // criador: ryuu Akiyamax

              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              await reply("Que pena! Você errou a resposta.");
              await btncomfoto(
                from,
                "Jogar novamente?",
                `Você gostaria de tentar outra pergunta?`,
                "",
                "",
                { url: frankyxfoto2 }, // Substitua pela URL da imagem que você quer usar
                "image",
                info,
                {},
                [
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Sim",
                      id: `${prefix}doulingo`,
                    }),
                  },
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Não",
                      id: `${prefix}naoquero`,
                    }),
                  },
                ]
              );
              break;
            }

            case "gerarrg":
              {
                const randomRG = () => {
                  const numbers = "0123456789";
                  let rg = "";
                  for (let i = 0; i < 9; i++) {
                    rg += numbers.charAt(
                      Math.floor(Math.random() * numbers.length)
                    );
                  }
                  return rg;
                };

                const rg = randomRG();
                const name = `${ryuunome()}`; // Using the provided name variable

                const info = `
        ════════✪══✪═══════
        📄 *Gerador de RG* 📄
        ════════✪══✪═══════
        👤 *Nome*: ${name}
        🆔 *RG*: ${rg}
        ════════✪══✪═══════
        🔄 *Gerado com sucesso!*
        ════════✪══✪═══════
    `;

                reply(info);
              }
              break;

            case "geraremail":
              {
                const randomName = () => {
                  const names = [
                    "Carlos",
                    "Fernanda",
                    "Mariana",
                    "Pedro",
                    "João",
                    "Paula",
                    "Lucas",
                    "Ana",
                    "Gabriel",
                    "Camila",
                    "Rafael",
                    "Juliana",
                    "Mateus",
                    "Sofia",
                    "Guilherme",
                    "Larissa",
                    "Felipe",
                    "Isabela",
                    "Rodrigo",
                    "Bianca",
                    "Vinícius",
                    "Alice",
                    "Daniel",
                    "Luiza",
                    "Leonardo",
                    "Beatriz",
                    "Henrique",
                    "Clara",
                    "Ricardo",
                    "Eduarda",
                    "Thiago",
                    "Livia",
                    "André",
                    "Laura",
                    "Bruno",
                    "Marina",
                    "José",
                    "Helena",
                    "Marcelo",
                    "Patricia",
                  ];
                  return names[Math.floor(Math.random() * names.length)];
                };

                const randomDomain = () => {
                  const domains = [
                    "example.com",
                    "email.com",
                    "domain.com",
                    "webmail.com",
                    "mail.com",
                    "inbox.com",
                    "test.com",
                    "random.com",
                    "site.com",
                    "online.com",
                    "internet.com",
                    "web.com",
                    "myemail.com",
                    "mailbox.com",
                    "provider.com",
                    "service.com",
                    "host.com",
                    "server.com",
                    "custom.com",
                    "domain.net",
                  ];
                  return domains[Math.floor(Math.random() * domains.length)];
                };

                const randomUsername = () => {
                  const adjectives = [
                    "cool",
                    "awesome",
                    "fast",
                    "brave",
                    "fancy",
                    "wise",
                    "smart",
                    "creative",
                    "happy",
                    "kind",
                  ];
                  const nouns = [
                    "lion",
                    "tiger",
                    "bear",
                    "fox",
                    "eagle",
                    "wolf",
                    "panda",
                    "shark",
                    "whale",
                    "dolphin",
                  ];
                  let username = "";
                  for (let i = 0; i < 3; i++) {
                    username += `${
                      adjectives[Math.floor(Math.random() * adjectives.length)]
                    }${nouns[Math.floor(Math.random() * nouns.length)]}`;
                    if (i < 2) username += ".";
                  }
                  return username;
                };

                const randomPassword = () => {
                  const chars =
                    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+";
                  let password = "";
                  for (let i = 0; i < 12; i++) {
                    password += chars.charAt(
                      Math.floor(Math.random() * chars.length)
                    );
                  }
                  return password;
                };

                const randomIP = () => {
                  return `${Math.floor(Math.random() * 256)}.${Math.floor(
                    Math.random() * 256
                  )}.${Math.floor(Math.random() * 256)}.${Math.floor(
                    Math.random() * 256
                  )}`;
                };

                const name = randomName();
                const username = randomUsername();
                const domain = randomDomain();
                const email = `${username}@${domain}`;
                const password = randomPassword();
                const ip = randomIP();

                const info = `
        ════════✪══✪═══════
        📧 *Gerador de Email* 📧
        ════════✪══✪═══════
        👤 *Nome*: ${name}
        📧 *Email*: ${email}
        🔑 *Senha*: ${password}
        🌐 *IP*: ${ip}
        ════════✪══✪═══════
        🔄 *Gerado com sucesso!*
        ════════✪══✪═══════
    `;

                reply(info);
              }
              break;

            case "gerarcpf":
              {
                function gerarCPF() {
                  const rand = () => Math.floor(Math.random() * 9);
                  let cpf = [];
                  for (let i = 0; i < 9; i++) {
                    cpf.push(rand());
                  }
                  cpf.push(digitoVerificador(cpf));
                  cpf.push(digitoVerificador(cpf));
                  return cpf.join("");
                }

                function digitoVerificador(cpf) {
                  const reducer = (sum, current, index) =>
                    sum + current * (cpf.length + 1 - index);
                  const remainder = cpf.reduce(reducer, 0) % 11;
                  return remainder < 2 ? 0 : 11 - remainder;
                }

                const cpf = gerarCPF();
                const formatCPF = (cpf) =>
                  `${cpf.slice(0, 3)}.${cpf.slice(3, 6)}.${cpf.slice(
                    6,
                    9
                  )}-${cpf.slice(9, 11)}`;
                const randomAge = () => Math.floor(Math.random() * 82) + 18;
                const randomName = () => {
                  const names = [
                    "Carlos",
                    "Fernanda",
                    "Mariana",
                    "Pedro",
                    "João",
                    "Paula",
                    "Lucas",
                    "Ana",
                    "Gabriel",
                    "Camila",
                    "Rafael",
                    "Juliana",
                    "Mateus",
                    "Sofia",
                    "Guilherme",
                    "Larissa",
                    "Felipe",
                    "Isabela",
                    "Rodrigo",
                    "Bianca",
                    "Vinícius",
                    "Alice",
                    "Daniel",
                    "Luiza",
                    "Leonardo",
                    "Beatriz",
                    "Henrique",
                    "Clara",
                    "Ricardo",
                    "Eduarda",
                  ];
                  return names[Math.floor(Math.random() * names.length)];
                };
                const randomCity = () => {
                  const cities = [
                    "São Paulo",
                    "Rio de Janeiro",
                    "Belo Horizonte",
                    "Porto Alegre",
                    "Curitiba",
                    "Recife",
                    "Salvador",
                    "Brasília",
                    "Fortaleza",
                    "Manaus",
                    "Belém",
                    "Goiânia",
                    "Campinas",
                    "São Luís",
                    "Natal",
                    "Maceió",
                    "João Pessoa",
                    "Aracaju",
                    "Cuiabá",
                    "Campo Grande",
                    "Florianópolis",
                    "Vitória",
                    "Macapá",
                    "Boa Vista",
                    "Palmas",
                    "Teresina",
                    "Porto Velho",
                    "Rio Branco",
                    "Sorocaba",
                    "Niterói",
                  ];
                  return cities[Math.floor(Math.random() * cities.length)];
                };
                const randomState = () => {
                  const states = [
                    "SP",
                    "RJ",
                    "MG",
                    "RS",
                    "PR",
                    "PE",
                    "BA",
                    "DF",
                    "CE",
                    "AM",
                    "PA",
                    "GO",
                    "MA",
                    "RN",
                    "AL",
                    "PB",
                    "SE",
                    "MT",
                    "MS",
                    "SC",
                    "ES",
                    "AP",
                    "RR",
                    "TO",
                    "PI",
                    "RO",
                    "AC",
                    "RJ",
                    "SP",
                    "MG",
                  ];
                  return states[Math.floor(Math.random() * states.length)];
                };

                const info = `
        ════════✪══✪═══════
        🎉 *Gerador de CPF* 🎉
        ════════✪══✪═══════
        📄 *CPF*: ${formatCPF(cpf)}
        👤 *Nome*: ${randomName()}
        📅 *Idade*: ${randomAge()} anos
        🌆 *Cidade*: ${randomCity()}
        🏙️ *Estado*: ${randomState()}
        ════════✪══✪═══════
        🔄 *Gerado com sucesso!*
        ════════✪══✪═══════
    `;

                reply(info);
              }
              break;

            case "autotiktok":
              if (!isGroup)
                return reply(
                  "Olá Usuário, o recurso Auto-Tiktok só pode ser utilizado em ```GRUPO``` "
                );
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply(
                  `Use 1 para ativar, 0 para desativar o recurso Auto-Tiktok.`
                );

              if (Number(args[0]) === 0) {
                if (!dataGp[0].autotiktok)
                  return reply(
                    `O modo Auto-Tiktok já está desativado neste grupo!`
                  );
                dataGp[0].autotiktok = false;
                setGp(dataGp);
                reply(
                  `_*✖ Desativou com sucesso o Auto-Tiktok neste grupo, agora o bot não irá enviar mais vídeos.*_`
                );
              } else if (Number(args[0]) === 1) {
                if (dataGp[0].autotiktok)
                  return reply(
                    `O modo Auto-Tiktok já está ativado neste grupo!`
                  );
                dataGp[0].autotiktok = true;
                setGp(dataGp);
                reply(
                  `_*✔ Ativou com sucesso o Auto-Tiktok neste grupo, agora o bot irá fazer links de vídeos enviados virarem vídeo.*_`
                );
              } else {
                reply(
                  `Use 1 para ativar, 0 para desativar o recurso Auto-Insta.`
                );
              }
              break;

            case "autototext":
              if (!isGroup)
                return reply(
                  "Olá Usuário, o recurso Auto-Transcrever só pode ser utilizado em ```GRUPO``` "
                );
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply(
                  `Use 1 para ativar, 0 para desativar o recurso Auto-Transcrever.`
                );

              if (Number(args[0]) === 0) {
                if (!dataGp[0].autototext)
                  return reply(
                    `O modo Auto-Transcrever já está desativado neste grupo!`
                  );
                dataGp[0].autototext = false;
                setGp(dataGp);
                reply(
                  `_*✖ Desativou com sucesso o Auto-Transcrever neste grupo, agora o bot não irá transcrever os áudios enviados.*_`
                );
              } else if (Number(args[0]) === 1) {
                if (dataGp[0].autototext)
                  return reply(
                    `O modo Auto-Transcrever já está ativado neste grupo!`
                  );
                dataGp[0].autototext = true;
                setGp(dataGp);
                reply(
                  `_*✔ Ativou com sucesso o Auto-Transcrever neste grupo, agora o bot irá transcrever todos os áudios enviados.*_`
                );
              } else {
                reply(
                  `Use 1 para ativar, 0 para desativar o recurso Auto-Transcrever.`
                );
              }
              break;

            case "autogpt":
              if (!isGroup)
                return reply(
                  "Olá Usuário, o recurso Auto-GPT só pode ser utilizado em ```GRUPO``` "
                );
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply(
                  `Use 1 para ativar, 0 para desativar o recurso Auto-Gpt-Audio.`
                );

              if (Number(args[0]) === 0) {
                if (!dataGp[0].autogpt)
                  return reply(
                    `O modo Auto-Gpt-Audio já está desativado neste grupo!`
                  );
                dataGp[0].autogpt = false;
                setGp(dataGp);
                reply(
                  `_*✖ Desativou com sucesso o Auto-Gpt-Audio neste grupo, agora o bot não irá responder os áudios enviados.*_`
                );
              } else if (Number(args[0]) === 1) {
                if (dataGp[0].autogpt)
                  return reply(
                    `O modo Auto-Gpt-Audio já está ativado neste grupo!`
                  );
                dataGp[0].autogpt = true;
                setGp(dataGp);
                reply(
                  `_*✔ Ativou com sucesso o Auto-Gpt-Audio neste grupo, agora o bot irá responder todos os áudios enviados.*_`
                );
              } else {
                reply(
                  `Use 1 para ativar, 0 para desativar o recurso Auto-Gpt-Audio.`
                );
              }
              break;

            case "totext":
              try {
                if (!isQuotedAudio)
                  return reply(
                    `*_Por favor, mencione um áudio para realizar a transcrição do áudio._*`
                  );
                if (
                  info.message.extendedTextMessage.contextInfo.quotedMessage
                    .audioMessage.fileLength > 2100000
                )
                  return reply(
                    `*_Só realizo a transcrição de áudio de até "2MB", envie um arquivo menor._*`
                  );
                let getBufferAudio = await getFileBuffer(
                  info.message.extendedTextMessage.contextInfo.quotedMessage
                    .audioMessage,
                  "audio"
                );
                reply(`*_Transcrevendo o áudio. Por favor, aguarde._*`);
                fs.writeFileSync(
                  `./arquivos/src/totext-${sender}.mp3`,
                  getBufferAudio
                );
                let client = new AssemblyAI({
                  apiKey: "2bdbb9a9046a4a938677122e7cf2dbd2",
                });
                const dataTxt = await client.transcripts.create({
                  audio_url: `./arquivos/src/totext-${sender}.mp3`,
                  language_code: "pt",
                });
                if (dataTxt.words.length == 0)
                  return reply(
                    `*_Não foi possível transcrever seu áudio. Por favor, tente com outro._*`
                  );
                miwa.sendMessage(
                  from,
                  { text: `> ${dataTxt.text}` },
                  { quoted: info }
                );
                fs.unlinkSync(`./arquivos/src/totext-${sender}.mp3`);
              } catch (e) {
                console.log(e);
              }
              break;

            case "modobrincadeira":
            case "modobrincadeiras":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (isModobn) return reply("O modo brincadeira já está ativo");
                dataGp[0].jogos = true;
                setGp(dataGp);
                reply(
                  "🎯 Ativou com sucesso o recurso de Modo brincadeira neste grupo. 🪀"
                );
              } else if (Number(args[0]) === 0) {
                if (!isModobn)
                  return reply("O modobrincadeira já está desativado.");
                dataGp[0].jogos = false;
                setGp(dataGp);
                reply(
                  "🎯 Desativou com sucesso o recurso de Modo brincadeira neste grupo. 🪀"
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "patente":
            case "level":
              if (!isGroup) return reply(mess.onlyGroup());
              resul = `${tempo}, usuário: @${
                sender.split("@")[0]
              }, aqui está suas informações de patente e level para saber como está atualmente:\n\n📍 Patente: ${patente} | 🏆 Level: ${level_up}`;
              miwa.sendMessage(
                from,
                { text: resul, mentions: [sender] },
                { quoted: info }
              );
              break;

            case "leveling":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply("Ative pressione 1, Desativar pressione 0");
              if (Number(args[0]) === 1) {
                if (isLevelingOn)
                  return reply("*O recurso de nível já estava ativo antes*");
                dataGp[0].level = true;
                setGp(dataGp);
                reply(`O recurso level foi ativado com sucesso.`);
              } else if (Number(args[0]) === 0) {
                if (!isLevelingOn)
                  return reply(
                    `O recurso de level já está Desativado neste grupo.`
                  );
                dataGp[0].level = false;
                setGp(dataGp);
                reply(`O recurso level foi desativado com sucesso.`);
              } else {
                reply("Adicionar parâmetro 1 ou 0 ");
              }
              break;

            case "modonsfw":
            case "nsfw":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (args.length < 1)
                return reply(
                  `Digite ${prefix}Modonsfw 1 para ativar e ${prefix}Modonsfw 0 para desativar`
                );
              if (Number(args[0]) === 1) {
                if (isNsfw) return reply("O modo nsfw já está ativo.");
                dataGp[0].nsfw = true;
                setGp(dataGp);
                reply(
                  `✓ Ativado com sucesso o modo nsfw +18 no grupo: *${groupMetadata.subject}*`
                );
              } else if (Number(args[0]) === 0) {
                if (!isNsfw) return reply("O modo nsfw já está desativado.");
                dataGp[0].nsfw = false;
                setGp(dataGp);
                reply(
                  `✓ Modo Nsfw +18 desativado com sucesso no grupo: *${groupMetadata.subject}*`
                );
              } else {
                reply("1 para ativar, 0 para desligar");
              }
              break;

            case "antipalavrão":
            case "antipalavrao":
            case "antipalavra":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1)
                return reply(`[❗] 1 / 0, Exemplo ${prefix + command} 1`);
              if (Number(args[0]) === 1) {
                if (isPalavrao) return reply("Ja esta ativo.");
                dataGp[0].antipalavrao.active = true;
                setGp(dataGp);
                reply(
                  "🌀 Ativou com sucesso o recurso de anti palavras hardcore neste grupo 📝"
                );
              } else if (Number(args[0]) === 0) {
                if (!isPalavrao) return reply("Ja esta Desativado");
                dataGp[0].antipalavrao.active = false;
                setGp(dataGp);
                reply(
                  "‼️ Desativou com sucesso o recurso de anti palavra harcore neste grupo. 📝️"
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "addpalavra":
              if (!SoDono && !isnit && !issupre && !ischyt && !info.key.fromMe)
                return reply(mess.onlyOwner());
              if (!isPalavrao) return reply("Anti palavrão desativado!");
              if (args.length < 1)
                return reply(
                  `Use assim : ${prefix + command} [palavrão]. exemplo ${
                    prefix + command
                  } puta`
                );
              texto = args
                .join(" ")
                .toLowerCase()
                .normalize("NFD")
                .replace(/[\u0300-\u036f]/g, "");
              if (isPalavras.includes(texto)) return reply("Já foi adicionada");
              dataGp[0].antipalavrao.palavras.push(texto);
              setGp(dataGp);
              reply("Palavrão adicionado com sucesso!");
              break;

            case "delpalavra":
              if (!SoDono && !isnit && !issupre && !ischyt && !info.key.fromMe)
                return reply(mess.onlyOwner());
              if (!isPalavrao) return reply("Anti palavrão desativado!");
              if (args.length < 1)
                return reply(
                  `Use assim: ${prefix + command} [palavrão]. Exemplo: ${
                    prefix + command
                  } Rapariga`
                );
              texto = args
                .join(" ")
                .toLowerCase()
                .normalize("NFD")
                .replace(/[\u0300-\u036f]/g, "");
              if (!isPalavras.includes(texto)) return reply("Já foi removida");
              var i = dataGp[0].antipalavrao.palavras.indexOf(texto);
              dataGp[0].antipalavrao.palavras.splice(i, 1);
              setGp(dataGp);
              reply("Palavrão removido da lista com sucesso!");
              break;

            case "listapalavrão":
            case "listapalavra":
            case "listpalavra":
              if (!isPalavrao) return reply("Anti palavrão desativado!");
              let lbw = `Esta é a lista de palavrão\nTotal: ${isPalavras.length}\n`;
              for (let i of isPalavras) {
                lbw += `➸ ${i}\n`;
              }
              await reply(lbw);
              break;

            case "limitecaracteres":
            case "limiteflood":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (args.length < 1)
                return reply(`Digite ${prefix + command} 1 para ativar`);
              if (Number(args[0]) === 1) {
                if (isAntiFlood)
                  return reply(
                    `🌀 O recurso limite de caracteres já está ativo no grupo.`
                  );
                dataGp[0].limitec.active = true;
                setGp(dataGp);
                reply(
                  `✔️ O recurso limite de caracteres foi ativado nesse grupo 📝`
                );
              } else if (Number(args[0]) === 0) {
                if (!isAntiFlood)
                  return reply(
                    "✔️ O recurso limite de caracteres não está ativado no grupo 📝"
                  );
                dataGp[0].limitec.active = false;
                setGp(dataGp);
                reply(
                  "O recurso limite de caracteres foi desativado nesse grupo ✔️"
                );
              } else {
                reply(
                  `Digite ${
                    prefix + command
                  } 1 para ativar, 0 para desativar o recurso`
                );
              }
              break;

            case "limitec_global":
            case "limitec":
              if (!SoDono && !isnit && !ischyt) return reply(mess.onlyOwner());
              if (!isAntiFlood)
                return reply(
                  `Ative este recurso primeiro ${prefix}limiteflood 1`
                );
              if (!q)
                return reply(`Cade a quantidade? Ex: ${prefix + command} 5000`);
              if (isNaN(q) == true) return reply("Digite apenas números");
              if (command == "limitec") {
                dataGp[0].limitec.quantidade = q;
                setGp(dataGp);
                reply(`Foi alterado o limite de caracteres para: ${q}`);
              } else {
                var data = { limitefl: q };
                fs.writeFileSync(
                  "./database/usuarios/flood.json",
                  JSON.stringify(data, null, "\t")
                );
                reply(`Foi adicionado um limite global de caracteres de: ${q}`);
              }
              break;

            case "status":
              if (!isGroup) return reply(mess.onlyGroup());
              if (
                !isGroupAdmins &&
                !SoDono &&
                !isnit &&
                !issupre &&
                !ischyt &&
                !info.key.fromMe
              )
                return reply(mess.onlyAdmins()); // │➱ Anti Spam: ${isAntiSpam ?  '✓ - Função ativa.' : '✕ - Não ativada.'}
              reply(`Status de funcionalidades ativaveis para proteger o grupo / se divertir com seus participantes. 
As funcionalidades de *Anti Privado Block - Anti Ligação*, são ativações que somente o dono, pode executar, _então caso esteja ativa você não poderá executar comandos no privado ou fazer ligações ao número do bot._

➱ Anti Ligação: ${isAnticall ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti PV Block: ${isAntiPv ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti Imagem: ${isAntiImg ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti Vídeo: ${isAntiVid ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti Áudio: ${isAntiAudio ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti Sticker: ${isAntiSticker ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti Documento: ${Antidoc ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti Contato ${isAntiCtt ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti Localização: ${Antiloc ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti Link Grupo: ${isAntilinkgp ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti Link Hard: ${isAntiLinkHard ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti Fake: ${isAntifake ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti Notas: ${isAntiNotas ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti Catalogo: ${isAnticatalogo ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Anti Palavrão: ${isPalavrao ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Limite Caracteres: ${isAntiFlood ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Bem Vindo 1: ${isWelkom ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Bem Vindo 2: ${isWelkom2 ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Simi 1: ${isSimi ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Simi 2: ${isSimi2 ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Auto Sticker: ${isAutofigu ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Auto Resposta: ${isAutorepo ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Auto Gpt: ${isGptAudio ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Auto ToText: ${isTotext ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Auto Insta: ${isAutoInsta ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Modo Brincadeira: ${isModobn ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Level ${isLevelingOn ? "✓ - Função ativa." : "✕ - Não ativada."}
➱ Modo Nsfw: ${isNsfw ? "✓ - Função ativa." : "✕ - Não ativada."}`);
              break;

            case "reiniciar":
              if (!SoDono) return reply(mess.onlyOwner());
              setTimeout(async () => {
                reply("Reiniciando..");
                setTimeout(async () => {
                  process.exit();
                }, 1200);
              }, 1000);
              break;

            case "novoqr":
              if (!SoDono) return reply(mess.onlyOwner());
              reply(
                "Será apagado o qrcode, e irá gerar um novo, fique atento no terminal para ler novamente.."
              );
              setTimeout(() => {
                fs.rmdirSync(folderUserAuth, { recursive: true });
              }, 1500);
              break;

            //==========(Sticker-Stickers)===========\\

            case "emoji":
            case "semoji":
              if (!q) return reply(`*Exemplo:* ${prefix}emoji ☹️/whatsapp`);
              emot = q.split("/")[0];
              jemot = q.split("/")[1];
              if (jemot == "apple") {
                idemot = 0;
              } else if (jemot == "google") {
                idemot = 1;
              } else if (jemot == "samsung") {
                idemot = 2;
              } else if (jemot == "microsoft") {
                idemot = 3;
              } else if (jemot == "whatsapp") {
                idemot = 4;
              } else if (jemot == "twitter") {
                idemot = 5;
              } else if (jemot == "facebook") {
                idemot = 6;
              } else if (jemot == "joypixels") {
                idemot = 7;
              } else if (jemot == "openmoji") {
                idemot = 8;
              } else if (jemot == "emojidex") {
                idemot = 9;
              } else if (jemot == "lg") {
                idemot = 10;
              } else if (jemot == "htc") {
                idemot = 11;
              } else if (!jemot) {
                idemot = 4;
              } else {
                return reply(`Exemplo: ${prefix}emoji ☹️/whatsapp`);
              }
              reply(mess.wait());
              if (idemot == undefined) return;
              emoji
                .get(emot)
                .then((emoji) => {
                  sendStickerFromUrl(from, emoji.images[idemot].url);
                })
                .catch((e) => {
                  reply(
                    "Emoji não encontrado.. Tente com outro emoji para ver está funcionando.."
                  );
                });
              break;

            case "adicionarmusica":
            case "adicionarmúsica":
            case "addmusica":
            case "addmúsica":
            case "addsong": //criador: ryuu, bot: Akiyamax
            case "adds":
              if (!q) return reply("Por favor, forneça o nome da música.");
              const addSongMsg = addSongToPlaylist(sender, q);
              reply(addSongMsg);
              break;

            case "removermusica":
            case "removermúsica":
            case "removemusica":
            case "removemúsica":
            case "removesong":
            case "tirarmusica":
            case "rems": //criador: ryuu, bot: Akiyamax
              if (!q) return reply("Por favor, forneça o nome da música.");
              const removeSongMsg = removeSongFromPlaylist(sender, q);
              reply(removeSongMsg);
              break;

            case "limparplaylist":
            case "clearplaylist":
            case "clear": //criador: ryuu, bot: Akiyamax
              const clearPlaylistMsg = clearUserPlaylist(sender);
              reply(clearPlaylistMsg);
              break;

            case "verplaylist": // Criador: ryuu, bot: AkiyamaX
              const allSongs = loadUserPlaylist(sender);
              if (allSongs.length === 0) {
                return reply("Sua playlist está vazia.");
              }

              const playPlaylistMsg = allSongs
                .map((song, index) => `${index + 1}. ${song.name}`)
                .join("\n");

              const rows = allSongs.map((song, index) => ({
                header: "🎵 Música",
                title: `${index + 1}. ${song.name}`,
                description: `Clique para tocar`,
                id: `${prefix}play ${song.name}`,
              }));

              await miwa
                .sendMessage(
                  from,
                  {
                    interactiveMessage: {
                      body: {
                        text: `Aqui estão as músicas:\n\n${playPlaylistMsg}`,
                      },
                      nativeFlowMessage: {
                        buttons: [
                          {
                            name: "single_select",
                            buttonParamsJson: JSON.stringify({
                              title: "Lista de Músicas",
                              sections: [
                                {
                                  title: "🎵 Músicas",
                                  rows: rows,
                                },
                              ],
                            }),
                          },
                        ],
                        messageParamsJson: "",
                      },
                    },
                  },
                  {}
                )
                .then((r) => console.log(r));
              break;

            case "baixarplaylist":
              if (!menc_os2 || menc_os2.length === 0)
                return reply(
                  "Por favor, mencione o usuário cuja playlist deseja baixar."
                );
              console.log(`Baixando playlist para o usuário: ${menc_os2}`); // Log para depuração
              const targetPlaylist = loadUserPlaylist(menc_os2);
              console.log(
                `Playlist do usuário: ${JSON.stringify(targetPlaylist)}`
              ); // Log para depuração
              if (targetPlaylist.length === 0) {
                return reply("A playlist do usuário está vazia.");
              }

              const currentPlaylist = loadUserPlaylist(sender);
              const updatedPlaylist = [...currentPlaylist, ...targetPlaylist];
              saveUserPlaylist(sender, updatedPlaylist);
              reply("A playlist foi baixada com sucesso.");
              break;

            case "compartilharplaylist":
            case "shareplaylist":
              if (!menc_os2 || menc_os2.length === 0)
                return reply(
                  "Por favor, mencione o usuário com quem deseja compartilhar a playlist."
                );

              const sharePlaylistMsg = shareUserPlaylist(sender, menc_os2);
              reply(sharePlaylistMsg);
              break;

            case "emoji-mix":
            case "emojimix":
              txt = q.replace(" +", "+").replace("+ ", "+").replace(" + ", "+");
              var [emj1, emj2] = txt.split("+");
              if (!q.includes("+"))
                return reply(
                  `Olá, está faltando o +\nExemplo: ${prefix + command} 😪+🤣`
                );
              try {
                reply(mess.wait());
                sendStickerFromUrl(
                  from,
                  `https://miwa-apis.online/api/emojimix?emoji1=${encodeURI(
                    emj1
                  )}&emoji2=${encodeURI(emj2)}&apikey=` + API_KEY_MIWA
                );
              } catch (e) {
                if (String(e).includes(API_KEY_MIWA)) {
                  console.log(
                    "A api caiu ou não foi possivel executar esta ação., espere retornar"
                  );
                } else {
                  reply(
                    "Ops não foi possivel fazer esse mix de emoji ou pode ter ocorrido algum problema no sistema.."
                  );
                }
              }
              break;

            case "figfundo":
            case "figvideo":
            case "figusemfundo":
            case "sfundo":
              if (
                ((isMedia && !info.message.videoMessage) || isQuotedImage) &&
                !q.length <= 1
              ) {
                rafa = isQuotedImage
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .imageMessage
                  : info.message.imageMessage;
                reply(mess.wait());
                buff = await getFileBuffer(rafa, "image");
                bas64 = `data:image/jpeg;base64,${buff.toString("base64")}`;
                anu = args.join(" ").split("|");
                satu = anu[0] !== "" ? anu[0] : `Usuário: ${pushname}`;
                sd = `📍Criado por: ${NomeDoBot}`;
                dua = typeof anu[1] !== "undefined" ? anu[1] : `${sd}`;
                var mantap = await convertSticker(bas64, `${dua}`, `${satu}`);
                var sti = new Buffer.from(mantap, "base64");
                miwa.sendMessage(from, { sticker: sti }, { quoted: info });
              } else {
                return reply(`So imagem mn -_-`);
              }
              break;

            case "rbale2":
              if (!isQuotedSticker) return reply("Marque uma figurinha...");
              encmediats = await getFileBuffer(
                info.message.extendedTextMessage.contextInfo.quotedMessage
                  .stickerMessage,
                "sticker"
              );
              reply(mess.wait());
              bas64 = `data:image/jpeg;base64,${encmediats.toString("base64")}`;
              var mantap = await convertSticker(
                bas64,
                `📍Criado por: ${NomeDoBot}`,
                `Usuário: ${pushname}`
              );
              var sti = new Buffer.from(mantap, "base64");
              miwa
                .sendMessage(from, { sticker: sti }, { quoted: info })
                .catch((err) => {
                  reply(`❎ Erro, tenta mais tarde`);
                });
              break;

            case "rename2":
            case "roubar":
              if (!isQuotedSticker) return reply("Marque uma figurinha...");
              encmediats = await getFileBuffer(
                info.message.extendedTextMessage.contextInfo.quotedMessage
                  .stickerMessage,
                "sticker"
              );
              var kls = q;
              var pack = kls.split("/")[0];
              var author2 = kls.split("/")[1];
              if (!q) return reply("*E o autor e o nome do pacote?*");
              if (!pack)
                return reply(
                  `*por favor escreve o formato certo: ${
                    prefix + command
                  } sad/bla*`
                );
              if (!author2)
                return reply(
                  `*por favor escreve o formato certo: ${
                    prefix + command
                  } sad/dms*`
                );
              reply(`aguarde`);
              bas64 = `data:image/jpeg;base64,${encmediats.toString("base64")}`;
              var mantap = await convertSticker(bas64, `${author2}`, `${pack}`);
              var sti = new Buffer.from(mantap, "base64");
              miwa
                .sendMessage(from, { sticker: sti }, { quoted: selo })
                .catch((err) => {
                  reply(mess.error());
                });
              break;

            case "rename":
              const { Sticker } = require("./arquivos/sticker/sticker.js");
              if (!isQuotedSticker)
                return await reply(
                  `Responda um *STICKER* com *${prefix + command}* pack/autor`
                );
              try {
                let [pack, autor] = q.split("/");
                if (!pack || !autor)
                  return await reply(
                    `Responda um *STICKER* com *${prefix + command}* pack/autor`
                  );
                zzbuffer = await getFileBuffer(
                  info.message.extendedTextMessage.contextInfo.quotedMessage
                    .stickerMessage,
                  "sticker"
                );
                const _sticker = new Sticker();
                _sticker.addFile(zzbuffer);
                _sticker.options.metadata = {
                  pack: pack,
                  author: autor,
                  emojis: ["ðŸ¤ ", "ðŸ¥¶", "ðŸ˜»"],
                };
                resultadoSt = await _sticker.start();
                await miwa.sendMessage(
                  from,
                  { sticker: fs.readFileSync(`./arquivos/sticker/saves`) },
                  { quoted: info }
                );
                await fs.unlinkSync(`./arquivos/sticker/saves`);
              } catch (e) {
                console.log(e);
                await reply(`erro`);
              }
              break;

            case "fstiker":
            case "fsticker":
            case "f":
              var RSM =
                info.message?.extendedTextMessage?.contextInfo?.quotedMessage;
              var boij =
                RSM?.imageMessage ||
                info.message?.imageMessage ||
                RSM?.viewOnceMessageV2?.message?.imageMessage ||
                info.message?.viewOnceMessageV2?.message?.imageMessage ||
                info.message?.viewOnceMessage?.message?.imageMessage ||
                RSM?.viewOnceMessage?.message?.imageMessage;
              var boij2 =
                RSM?.videoMessage ||
                info.message?.videoMessage ||
                RSM?.viewOnceMessageV2?.message?.videoMessage ||
                info.message?.viewOnceMessageV2?.message?.videoMessage ||
                info.message?.viewOnceMessage?.message?.videoMessage ||
                RSM?.viewOnceMessage?.message?.videoMessage;
              if (boij) {
                var pack = `robertin`;
                var author2 = `${pushname}`;
                reply(mess.wait());
                owgi = await getFileBuffer(boij, "image");
                let encmediaa = await sendImageAsSticker(
                  miwa,
                  from,
                  owgi,
                  info,
                  { packname: pack, author: author2 }
                );
                await DLT_FL(encmediaa);
              } else if (boij2 && boij2?.seconds < 11) {
                var pack = `robertin`;
                var author2 = `${pushname}`;
                reply(mess.wait());
                owgi = await getFileBuffer(boij2, "video");
                let encmedia = await sendVideoAsSticker(
                  miwa,
                  from,
                  owgi,
                  info,
                  { packname: pack, author: author2 }
                );
                await DLT_FL(encmedia);
              } else {
                reply(
                  `Enviar imagem / vídeo / gif com legenda \n${prefix}sticker (duração do adesivo de vídeo de 1 a 10 segundos)`
                );
              }
              break;

            case "figu":
              if (fs.existsSync(DF_TJ))
                return reply(
                  "Aguarde um momento, e realize o pedido novamente, não seja tão rápido..."
                );
              var DF_TJ = "./database/data/CVF.json";
              fs.writeFileSync(
                DF_TJ,
                JSON.stringify([
                  isQuotedImage
                    ? info.message.extendedTextMessage.contextInfo.quotedMessage
                        .imageMessage
                    : info.message.imageMessage || isQuotedVideo
                    ? info.message.extendedTextMessage.contextInfo.quotedMessage
                        .videoMessage
                    : info.message.videoMessage,
                ])
              );
              var PUXJ = JSON.parse(fs.readFileSync(DF_TJ));
              var DFN = PUXJ[0];
              DFN.sticker = { url: DFN.url };
              await delay(1200);
              DLT_FL(DF_TJ);
              miwa.sendMessage(from, DFN);
              break;

            case "st":
            case "stk":
            case "sticker":
            case "s":
              var RSM =
                info.message?.extendedTextMessage?.contextInfo?.quotedMessage;
              var boij2 =
                RSM?.imageMessage ||
                info.message?.imageMessage ||
                RSM?.viewOnceMessageV2?.message?.imageMessage ||
                info.message?.viewOnceMessageV2?.message?.imageMessage ||
                info.message?.viewOnceMessage?.message?.imageMessage ||
                RSM?.viewOnceMessage?.message?.imageMessage;
              var boij =
                RSM?.videoMessage ||
                info.message?.videoMessage ||
                RSM?.viewOnceMessageV2?.message?.videoMessage ||
                info.message?.viewOnceMessageV2?.message?.videoMessage ||
                info.message?.viewOnceMessage?.message?.videoMessage ||
                RSM?.viewOnceMessage?.message?.videoMessage;
              if (boij2) {
                var pack = `robertin`;
                var author2 = `${pushname}`;
                owgi = await getFileBuffer(boij2, "image");
                let encmediaa = await sendImageAsSticker2(
                  miwa,
                  from,
                  owgi,
                  info,
                  { packname: pack, author: author2 }
                );
                await DLT_FL(encmediaa);
              } else if (boij && boij.seconds < 11) {
                var pack = `robertin`;
                var author2 = `${pushname}`;
                owgi = await getFileBuffer(boij, "video");
                let encmedia = await sendVideoAsSticker2(
                  miwa,
                  from,
                  owgi,
                  info,
                  { packname: pack, author: author2 }
                );
                await DLT_FL(encmedia);
              } else {
                return reply(
                  `Marque uma imagem, ou um vídeo de ate 9.9 segundos, ou uma visualização única, para fazer figurinha, com o comando ${
                    prefix + command
                  }`
                );
              }
              break;

            case "rbale":
              var [r1, r2] = q.split("/");
              if (!r1)
                return reply(`Digite seu pack/author

${prefix + command} ${pushname}/author`);
              if (!r2)
                return reply(
                  `Ponha uma barra (/) após seu nome de escolhido para ser o pack, e em seguida, escreva a mensagem à ser enviada para o author`
                );
              if (Number(r1.length) > 12)
                return reply(
                  `_"${r1}"_ é seu Author ? Use o author pode ter no máximo 12 caracteres...`
                );
              var RSM =
                info.message?.extendedTextMessage?.contextInfo?.quotedMessage;
              var boij2 =
                RSM?.imageMessage ||
                info.message?.imageMessage ||
                RSM?.viewOnceMessageV2?.message?.imageMessage ||
                info.message?.viewOnceMessageV2?.message?.imageMessage ||
                info.message?.viewOnceMessage?.message?.imageMessage ||
                RSM?.viewOnceMessage?.message?.imageMessage;
              var boij =
                RSM?.videoMessage ||
                info.message?.videoMessage ||
                RSM?.viewOnceMessageV2?.message?.videoMessage ||
                info.message?.viewOnceMessageV2?.message?.videoMessage ||
                info.message?.viewOnceMessage?.message?.videoMessage ||
                RSM?.viewOnceMessage?.message?.videoMessage;
              if (boij2) {
                var pack = `${r1}`;
                var author2 = `${r2}`;
                owgi = await getFileBuffer(boij2, "image");
                let encmediaa = await sendImageAsSticker2(
                  miwa,
                  from,
                  owgi,
                  info,
                  { packname: pack, author: author2 }
                );
                await DLT_FL(encmediaa);
              } else if (boij && boij.seconds < 11) {
                var pack = `${r1}`;
                var author2 = `${r2}`;
                owgi = await getFileBuffer(boij, "video");
                let encmedia = await sendVideoAsSticker2(
                  miwa,
                  from,
                  owgi,
                  info,
                  { packname: pack, author: author2 }
                );
                await DLT_FL(encmedia);
              } else {
                return reply(
                  `Marque uma imagem, ou um vídeo de ate 9.9 segundos, ou uma visualização única, para fazer figurinha, com o comando ${
                    prefix + command
                  }`
                );
              }
              break;

            case "tomp3":
            case "viraraudio":
              setTimeout(() => {
                reagir(from, "✅");
              }, 300);
              if ((isMedia && !info.message.imageMessage) || isQuotedVideo) {
                post = isQuotedImage
                  ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                      .message.extendedTextMessage.contextInfo.message
                      .imageMessage
                  : info.message.videoMessage;
                reply(`⛤⃗͜⃟ꦿ⸼𝙶𝙴𝚁𝙰𝙽𝙳𝙾 𝙰𝚄𝙳𝙸𝙾⛤⃗͜ᬏ᭄`);
                encmedia = isQuotedVideo
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .videoMessage
                  : info.message.videoMessage;
                rane = getRandom("." + (await getExtension(encmedia.mimetype)));
                buffimg = await getFileBuffer(encmedia, "video");
                fs.writeFileSync(rane, buffimg);
                media = rane;
                ran = getRandom(".mp4");
                exec(`ffmpeg -i ${media} ${ran}`, (err) => {
                  DLT_FL(media);
                  if (err)
                    return reply("❌ Falha ao converter vídeo para mp3 ❌");
                  buffer = fs.readFileSync(ran);
                  miwa.sendMessage(
                    from,
                    { audio: buffer, mimetype: "audio/mp4" },
                    { quoted: info }
                  );
                  DLT_FL(ran);
                });
              } else {
                reply("Marque o vídeo para transformar em áudio por favor..");
              }
              break;

            case "toimg":
              if (!isQuotedSticker)
                return reply("❌ adesivo de resposta um ❌");
              try {
                reply(mess.wait());
                buff = await getFileBuffer(
                  info.message.extendedTextMessage.contextInfo.quotedMessage
                    .stickerMessage,
                  "sticker"
                );
                miwa
                  .sendMessage(from, { image: buff }, { quoted: info })
                  .catch((e) => {
                    console.log(e);
                    reply("ERRO!!");
                  });
              } catch {
                reply("Erro..");
              }
              break;

            //=============(LOGOS)=============\\

            //==========(PLAQUINHAS-LOGOS)===========\

            case "placaloli":
              reply("Aguarde...");
              lod = await fetchJson(
                `https://nekobot.xyz/api/imagegen?type=kannagen&text=${q}`
              );
              sendStickerFromUrl(from, lod.message, retornar.successo);
              break;

            case "apibot":
              reagir(from, "✅");
              api = await fetchJson(
                `https://miwa-apis.online/api/keyerrada?apikey=` + API_KEY_MIWA
              );
              api2 = `${tempo} ${pushname}

✔️ Você Tem『 ${api.limite_de_request} 』Downloads Disponíveis...`;
              reply(api2);
              break;

            //================(RPG)==================\\

            case "modorpg":
            case "modomiwa":
            case "miwac":
            case "miwarp":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!q)
                return reply(
                  `Você está usando o comando de forma errada, verifique:\n• Ex: *${
                    prefix + command
                  } 1/0* _(1 para ativar, 0 para desativar)_`
                );
              if (Number(args[0]) === 1) {
                if (
                  JSON.stringify(autorpg).includes(from) &&
                  autorpg[autorpg.map((i) => i.id).indexOf(from)].rpg == true
                )
                  return reply(
                    "Sistema *#MiwaCity* - O sistema já está ativado aqui no grupo."
                  );
                if (!JSON.stringify(autorpg).includes(from)) {
                  autorpg.push({ id: from, rpg: true });
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/autorpg.json",
                    JSON.stringify(autorpg)
                  );
                } else {
                  autorpg[autorpg.map((i) => i.id).indexOf(from)].rpg = true;
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/autorpg.json",
                    JSON.stringify(autorpg)
                  );
                }
                reply(
                  "Sistema *#MiwaCity* - Foi efetuado a ativação no grupo com sucesso..."
                );
              } else if (Number(args[0]) === 0) {
                if (
                  JSON.stringify(autorpg).includes(from) &&
                  autorpg[autorpg.map((i) => i.id).indexOf(from)].rpg == false
                )
                  return reply(
                    "Sistema *#MiwaCity* - O sistema não está ativado aqui no grupo."
                  );
                if (!JSON.stringify(autorpg).includes(from)) {
                  autorpg.push({ id: from, rpg: false });
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/autorpg.json",
                    JSON.stringify(autorpg)
                  );
                } else {
                  autorpg[autorpg.map((i) => i.id).indexOf(from)].rpg = false;
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/autorpg.json",
                    JSON.stringify(autorpg)
                  );
                }
                reply(
                  "Sistema *#MiwaCity* - Foi desabilitado com sucesso no grupo."
                );
              }
              break;

            case "rgbe":
              if (!isGroup) return mess.onlyGroup();
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}modorpg 1*.`
                );
              if (JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `Seu registro foi encontrado em meu banco de dados! Use *${prefix}meube* e consulte seu registro/dados`
                );
              if (!q)
                return reply(
                  `Digite seu nome após o comando, para seu registro ser feito com êxito.`
                );
              if (q.includes("@"))
                return reply(
                  `O registro foi cancelado na *Base da Ets*! Foi detectado um *@* no campo, retire-o e realize o registro novamente.`
                );
              bancos = [
                "Inter",
                "NuBank",
                "PagBank️",
                "Bradesco",
                "Next",
                "Caixa",
                "Santander️",
                "Banco do Brasil",
                "PicPay",
                "PayPal",
                "Itaú",
              ];
              bank = bancos[Math.floor(Math.random() * bancos.length)];
              horarg = moment.tz("America/Sao_Paulo").format("HH:mm");
              hora10 = moment.tz("America/Sao_Paulo").format("HH");
              datarg = moment.tz("America/Sao_Paulo").format("DD/MM");
              dia10 = moment.tz("America/Sao_Paulo").format("DD");
              m10 = moment.tz("America/Sao_Paulo").format("MM");
              miwarpg.push({
                id: sender,
                gpid: from,
                hrg: horarg,
                drg: datarg,
                nome: q,
                namebank: bank,
                money: 0,
                pixD: 5,
                pixL: 100,
                limiteC: 15,
                horaC: hora10,
                diaC: dia10,
                mC: m10,
                limiteTh: 3,
                hrT: hora10,
                limiteTd: 24,
                diaT: dia10,
                mT: m10,
                bcbet: true,
              });
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `Registro efetuado e concluído com êxito! Seja bem vindo(a) à *Base da Ets*, ${q}`
              );
              setTimeout(() => {
                miwa.sendMessage(from, {
                  text: `Agora você pode trabalhar e ganhar muito dinheiro jogando e apostando em nossos jogos. Para consultar seu saldo atual, use: *${prefix}minhacarteira*`,
                });
              }, 1100);
              break;

            case "dados_mc":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(`ID do usuário não encontrado ou inexistente...`);
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              reply(
                `• ID do usuário: ${miwarpg[AB].id}\n• ID do grupo: ${miwarpg[AB].gpid}\n• Hora de registro: ${miwarpg[AB].hrg}\n• Data de registro: ${miwarpg[AB].drg}\n• Nome de usuário: ${miwarpg[AB].nome}\n• Nome do banco: ${miwarpg[AB].namebank}\n• Dinheiro: ${miwarpg[AB].money}\n• Quantidade de pix diário: ${miwarpg[AB].pixD}\n• Limite de pix: ${miwarpg[AB].pixL}\n• Limite do cassino: ${miwarpg[AB].limiteC}\n• Hora do cassino: ${miwarpg[AB].horaC}\n• Dia do cassino: ${miwarpg[AB].diaC}\n• Mês do cassino: ${miwarpg[AB].mC}\n• Limite de trabalho por hora: ${miwarpg[AB].limiteTh}\n• Hora do trabalho: ${miwarpg[AB].hrT}\n• Limite de trabalho diário: ${miwarpg[AB].limiteTd}\n• Dia de trabalho: ${miwarpg[AB].diaT}\n• Mês de trabalho: ${miwarpg[AB].mT}`
              );
              break;

            case "sairmeity":
            case "sairmiwac":
            case "sairme":
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(`ID do usuário não encontrado ou inexistente...`);
              if (Number(args[0]) === 1) {
                if (JSON.stringify(cavalosrpg).includes(sender)) {
                  AC = cavalosrpg.map((i) => i.id).indexOf(sender);
                  cavalosrpg.splice(AC, 1);
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/cavalosrpg.json",
                    JSON.stringify(cavalosrpg)
                  );
                }
                if (JSON.stringify(galosrpg).includes(sender)) {
                  AD = galosrpg.map((i) => i.id).indexOf(sender);
                  galosrpg.splice(AC, 1);
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/galosrpg.json",
                    JSON.stringify(galosrpg)
                  );
                }
                if (JSON.stringify(roubosrpg).includes(sender)) {
                  AE = roubosrpg.map((i) => i.id).indexOf(sender);
                  roubosrpg.splice(AE, 1);
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/roubosrpg.json",
                    JSON.stringify(roubosrpg)
                  );
                }
                AB = miwarpg.map((i) => i.id).indexOf(sender);
                miwarpg.splice(AB, 1);
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/roubosrpg.json",
                  JSON.stringify(miwarpg)
                );
                reply(
                  `Seu registro na *Base da Ets* foi deletado com sucesso... Volte sempre!`
                );
              } else {
                reply(
                  `Ao sair da *Base da Ets*, você concorda em apagar o seu registro completamente, isto é, todo o seu histórico de jogo.\n• Caso você esteja de acordo com isso, use: *${
                    prefix + command
                  } 1*`
                );
              }
              break;

            case "delmc":
            case "delmiwac":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!q)
                return reply(
                  `Digite o número do usuário que deseja remover da *Base da Ets*.`
                );
              qp = q + `@s.whatsapp.net`;
              AB = miwarpg.map((i) => i.id).indexOf(qp);
              if (AB < 0)
                return reply(
                  `O ID do usuário não foi localizado, *certifique-se se ele já tem registro.*`
                );
              if (JSON.stringify(cavalosrpg).includes(qp)) {
                AC = cavalosrpg.map((i) => i.id).indexOf(qp);
                cavalosrpg.splice(AC, 1);
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/cavalosrpg.json",
                  JSON.stringify(cavalosrpg)
                );
              }
              if (JSON.stringify(galosrpg).includes(qp)) {
                AD = galosrpg.map((i) => i.id).indexOf(qp);
                galosrpg.splice(AC, 1);
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/galosrpg.json",
                  JSON.stringify(galosrpg)
                );
              }
              miwarpg.splice(AB, 1);
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `O usuário acaba de ser removido da **Base da Ets**, por mandato da soberania.`
              );
              break;

            case "rpglistgp":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              membros = `Lista de participantes do *grupo* que estão registrados no *RPG *Base da Ets**:\n–\n`;
              rpglistgp = 0;
              for (i = 0; i < groupMembers.length; i++) {
                if (JSON.stringify(miwarpg).includes(groupMembers[i].id)) {
                  membros += `Membro ID ${i + 1}. ❪▧⃯⃟ฺ࣭࣪͘ꕸ▸ @${
                    groupMembers[i].id.split("@")[0]
                  }\n`;
                  rpglistgp += 1;
                }
              }
              membros += `–\n• Quantidade: *${rpglistgp} participante(s).*`;
              mention(membros);
              break;

            case "meumiwac":
            case "meube":
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              dindin = Number(miwarpg[AB].money).toFixed(2);
              if (dindin < 10) {
                var bctxt = `0${dindin}`;
              } else {
                var bctxt = dindin;
              }
              myid = miwarpg[AB].id.split("@")[0].slice(5);
              if (JSON.stringify(cavalosrpg).includes(sender)) {
                AC = cavalosrpg.map((a) => a.id).indexOf(sender);
                percentualcavalo =
                  (Number(cavalosrpg[AC].countVc) /
                    Number(
                      Number(cavalosrpg[AC].countVc) +
                        Number(cavalosrpg[AC].countDc)
                    )) *
                  100;
                if (Number(percentualcavalo) > 0) {
                  porcemnmr = percentualcavalo;
                } else {
                  porcemnmr = 0;
                }
                runcav = `• Quantidade de Cavalos que você possuí atualmente: *${
                  cavalosrpg[AC].cavalos.length
                }*\n• Quantidade de Vitórias: *${
                  cavalosrpg[AC].countVc
                }*\n• Porcentagem de Ganhos: *${Number(porcemnmr).toFixed(
                  1
                )}%*\n• Dinheiro investido: *R$ ${Number(
                  Number(cavalosrpg[AC].capitalVc) +
                    Number(cavalosrpg[AC].capitalDc)
                ).toFixed(2)}*\n• Dinheiro lucrado: (R$): *R$ ${Number(
                  cavalosrpg[AC].capitalVc
                ).toFixed(2)}*`;
              } else {
                runcav = `️Você atualmente não está registrado na *corrida de cavalos*.`;
              }
              if (JSON.stringify(galosrpg).includes(sender)) {
                AE = galosrpg.map((b) => b.id).indexOf(sender);
                percentualgalos =
                  (Number(galosrpg[AE].countVg) /
                    Number(
                      Number(galosrpg[AE].countVg) +
                        Number(galosrpg[AE].countDg)
                    )) *
                  100;
                if (Number(percentualgalos) > 0) {
                  porcegalos = percentualgalos;
                } else {
                  porcegalos = 0;
                }
                brigadegalo = `• Quantidade de Galos que você possuí atualmente: *${
                  galosrpg[AE].galos.length
                }*\n• Quantidade de Vitórias: *${
                  galosrpg[AE].countVg
                }*\n• Porcentagem de Ganhos: ${Number(porcegalos).toFixed(
                  1
                )}%\n• Dinheiro investido: *R$ ${Number(
                  galosrpg[AE].dinVg
                ).toFixed(2)}*\n• Dinheiro lucrado: (R$): ${Number(
                  galosrpg[AE].luckVg
                ).toFixed(2)}`;
              } else {
                brigadegalo = `Você atualmente não está registrado na *briga de galos*...`;
              }
              if (JSON.stringify(roubosrpg).includes(sender)) {
                SC = roubosrpg.map((b) => b.id).indexOf(sender);
                if (roubosrpg[SC].segurança > 20) {
                  tlvz = roubosrpg[SC].segurança;
                  tlvz -= 20;
                  tlvz /= 20;
                  segurança = `Lv. ${tlvz}`;
                } else {
                  segurança = `*Você não possui nenhum level de segurança.*`;
                }
              } else {
                segurança = `*Você não possui nenhum level de segurança.*`;
              }
              txt = `Olá *${
                miwarpg[AB].nome
              }*, tudo bem? Aqui está a sua solicitação:\n–\n• User ID: *R${
                miwarpg[AB].id.split(myid)[0]
              }GP${myid}BC*\n• Saldo disponível: *R$ ${bctxt}*\n•️ Proteção: ${segurança}\n–\n• [🐴] *Corrida de Cavalo(s):*\n${runcav}\n–\n• [🐓] *Briga de Galo(s):*\n${brigadegalo}`;
              reply(txt);
              break;

              case "minhacarteira":
                case "carteira":
                case "meubanco":
                case "saldo":
                  if (!isMiwaCityOFF) return reply(`Olá, o modo RPG não esta a`);
                  if (!JSON.stringify(miwarpg).includes(sender))
                    return reply(
                      `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                    );
                  AB = miwarpg.map((i) => i.id).indexOf(sender);
                  let dindin = Number(miwarpg[AB].money).toFixed(2);
                  if (dindin < 10) {
                    var bctxt = `0${dindin}`;
                  } else {
                    var bctxt = dindin;
                  }
                  caixa = [];
                  for (i = 0; i < miwarpg.length; i++) {
                    caixa.push({ idnmr: miwarpg[i].id, nmr: i + 1 });
                  }
                  enc = caixa.map((b) => b.idnmr).indexOf(sender);
                  if (Number(caixa[enc].nmr) < 100) {
                    if (Number(caixa[enc].nmr) < 10) {
                      page = `00` + caixa[enc].nmr;
                    } else {
                      page = `0` + caixa[enc].nmr;
                    }
                  } else {
                    page = caixa[enc].nmr;
                  }
                  myid = miwarpg[AB].id.split("@")[0].slice(5);
                  bctxt = `Olá *${
                    miwarpg[AB].nome
                  }*, tudo bem? Aqui está a sua solicitação:\n—\n• [💵] *Informações Bancárias*\n• Seu banco atual: *${
                    miwarpg[AB].namebank
                  }*\n• Você está atualmente com *R$ ${bctxt}* em sua carteira para uso.\n–\n• [🧾] *Informações de Registro*\n• Seu ID: *R${
                    miwarpg[AB].id.split(myid)[0]
                  }GP${myid}BC*\n• Você realizou o registro na _*Base da Ets*_ às *${
                    miwarpg[AB].hrg
                  } hora(s)* no dia *${
                    miwarpg[AB].drg
                  }*.\n–\n• [📖] *Livro de Registro*\n_Com base em meu livro de registros_, você foi registrado na página: *${page}*`;
                  reply(bctxt);
                  break;

            case "rankmiwac":
            case "rankbe":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              setTimeout(() => {
                reagir(from, "🤑");
              }, 300);
              matheuzinho = miwarpg.map((i) => i);
              rank = matheuzinho.sort((a, b) => (a.money < b.money ? 0 : -1));
              if (miwarpg.length > 5) {
                var totalR = 5;
              } else {
                var totalR = miwarpg.length;
              }
              txt = `🌟🧾 *Rank *Base da Ets*:*\n–\n`;
              for (i = 0; i < totalR; i++) {
                if (i != null) {
                  txt += `${i + 1}º Lugar - Usuário: *${rank[i].nome}*
• Saldo do Usuário: R$ ${Number(rank[i].money).toFixed(2)}\n–\n`;
                }
              }
              reply(txt);
              break;

            case "buscarmc":
            case "buscarmc":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!JSON.stringify(miwarpg).includes(`${q}@s.whatsapp.net`))
                return reply(`ID não encontrado ou inexistente...`);
              AB = miwarpg.map((i) => i.id).indexOf(`${q}@s.whatsapp.net`);
              dindin = Number(miwarpg[AB].money).toFixed(2);
              if (dindin < 10) {
                var bctxt = `0${dindin}`;
              } else {
                var bctxt = dindin;
              }
              bcid = miwarpg[AB].id.split("@")[0];
              cort = bcid.slice(5);
              reply(
                `© **Base da Ets*:* | Carteira e informações do Usuário:\n–\n• Nome do Usuário: *${
                  miwarpg[AB].nome
                }*\n• Banco: *${
                  miwarpg[AB].namebank
                }*\n• Saldo disponível: *R$ ${bctxt}*\n—–\n• [🧾] *Informações de Registro:*\n• ID do Usuário: *R${
                  bcid.split(cort)[0]
                }GP${cort}BC*\n• Registrou-se às *${
                  miwarpg[AB].hrg
                }* hora(s) do dia *${miwarpg[AB].drg}*.`
              );
              break;

            case "addpix":
              if (!SoDono) return reply(mess.onlyOwner());
              var [nmr, pix] = q.split("/");
              if (!nmr) return reply(`Falta a chave pix`);
              if (!pix) return reply(`Falta o PIX`);
              AB = miwarpg.map((i) => i.id).indexOf(`${nmr}@s.whatsapp.net`);
              if (!JSON.stringify(miwarpg).includes(`${nmr}@s.whatsapp.net`))
                return reply(`Chave PIX não encontrada ou inexistente...`);
              if (!Number(pix)) return reply(`${pix} não é um número...`);
              MD = miwarpg[AB].money;
              addpix = Number(MD) + Number(pix);
              miwarpg[AB].money = addpix;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `R$ ${Number(pix).toFixed(2)} foram adicionados a conta ${
                  miwarpg[AB].nome
                }`
              );
              break;

            case "setpix":
              if (!SoDono) return reply(mess.onlyOwner());
              var [nmr, pix] = q.split("/");
              if (!nmr) return reply(`Falta a chave pix`);
              if (!pix) return reply(`Falta o PIX`);
              AB = miwarpg.map((i) => i.id).indexOf(`${nmr}@s.whatsapp.net`);
              if (!JSON.stringify(miwarpg).includes(`${nmr}@s.whatsapp.net`))
                return reply(`Chave PIX não encontrada ou inexistente...`);
              if (!Number(pix)) return reply(`${pix} não é um número...`);
              miwarpg[AB].money = pix;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `O saldo da conta ${miwarpg[AB].nome} foi setado em R$ ${Number(
                  pix
                ).toFixed(2)}`
              );
              break;

            case "delpix":
              if (!SoDono) return reply(mess.onlyOwner());
              var [nmr, pix] = q.split("/");
              if (!nmr) return reply(`Falta a chave pix`);
              if (!pix) return reply(`Falta o PIX`);
              AB = miwarpg.map((i) => i.id).indexOf(`${nmr}@s.whatsapp.net`);
              if (!JSON.stringify(miwarpg).includes(`${nmr}@s.whatsapp.net`))
                return reply(`Chave PIX não encontrada ou inexistente...`);
              if (!Number(pix)) return reply(`${pix} não é um número...`);
              MD = miwarpg[AB].money;
              addpix = Number(MD) - Number(pix);
              miwarpg[AB].money = addpix;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `R$ ${Number(pix).toFixed(2)} foram retirados da conta ${
                  miwarpg[AB].nome
                }`
              );
              break;

            case "zerarmc":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!q) return reply(`Falta a chave pix`);
              AB = miwarpg.map((i) => i.id).indexOf(`${q}@s.whatsapp.net`);
              if (!JSON.stringify(miwarpg).includes(`${q}@s.whatsapp.net`))
                return reply(`Chave PIX não encontrada ou inexistente...`);
              if (!Number(q)) return reply(`${q} não é um número...`);
              miwarpg[AB].money = 0;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `A conta ${miwarpg[AB].nome} foi zerada... Seu saldo agora é R$ 00.00`
              );
              break;

            case "gerargf":
              if (!SoDono) return reply(mess.onlyOwner());
              var [value, quant] = q.split("/");
              if (!value)
                return reply(
                  `Defina o valor que você desejar adicionar ao giftCard.`
                );
              if (!quant)
                return reply(
                  `Defina a quantidade de usuários que poderam usar o *código-resgate*.`
                );
              if (!Number(value)) return reply(`${value} não é número!`);
              if (!Number(quant)) return reply(`${quant} não é número!`);
              dategf = moment.tz("America/Sao_Paulo").format("DDMMYY");
              horagf = moment.tz("America/Sao_Paulo").format("HHmmss");
              codegf = `P${value}M${quant}BC${dategf + horagf}QC${Number(
                Number(Number(dategf) + Number(horagf)) / Number(quant)
              ).toFixed(0)}RPG`;
              coderpg.push({
                codeid: codegf,
                valor: value,
                quantmax: Number(quant).toFixed(0),
                usus: [],
              });
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/coderpg.json",
                JSON.stringify(coderpg)
              );
              reply(
                `Código de *R$ ${Number(value).toFixed(
                  2
                )}* gerado, válido para ${
                  Number(quant) <= 1
                    ? `um usuário apenas...`
                    : `os ${quant} primeiros...`
                }\n• Para resgatar o benefício, use o comando: *${prefix}resgatargf*`
              );
              setTimeout(() => {
                miwa.sendMessage(from, { text: codegf });
              }, 1000);
              break;

            case "delgf":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!q) return reply(`Digite o código que deseja remover do RPG`);
              AB = coderpg.map((i) => i.codeid).indexOf(q);
              if (AB < 0)
                return reply(`Código não encontrado ou inexistente...`);
              coderpg.splice(AB, 1);
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/coderpg.json",
                JSON.stringify(coderpg)
              );
              reply(
                `O código *${q}* foi desabilitado com sucesso, ou seja, o código a partir de agora está inválido.`
              );
              break;

            case "resgatargf":
            case "resgatar":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              AB = coderpg.map((i) => i.codeid).indexOf(q);
              BD = miwarpg.map((b) => b.id).indexOf(sender);
              if (!q)
                return reply(
                  `Você esqueceu de digitar o código junto ao comando! _Ex: ${
                    prefix + command
                  } ABCD1234_`
                );
              if (!JSON.stringify(coderpg).includes(q))
                return reply(`Error *500*: Código Inexistente! ✋🏼`);
              if (JSON.stringify(coderpg[AB].usus).includes(sender))
                return reply(
                  `Você já usou, ou seja, _o código só pode ser resgatado 1 vez por usuário._`
                );
              if (
                Number(coderpg[AB].usus.length) < Number(coderpg[AB].quantmax)
              ) {
                coderpg[AB].usus.push({ id: sender });
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/coderpg.json",
                  JSON.stringify(coderpg)
                );
                MD = miwarpg[BD].money;
                miwarpg[BD].money = Number(MD) + Number(coderpg[AB].valor);
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                reply(
                  `Estou verificando se o código é real, para atribuir o benefício a você!`
                );
                setTimeout(() => {
                  mention(
                    `✅️💰 *O código informado é válido!* Parabéns *@${
                      sender.split("@")[0]
                    }*, você acaba de resgatar o seu benefício.\n• Foi adicionado à sua carteira, um valor de: *R$ ${Number(
                      coderpg[AB].valor
                    ).toFixed(2)}*`
                  );
                }, 3000);
              } else {
                reply(
                  `Sinto muito!😿 O código informado está inválido.\n• Por favor, entre em contato com meu dono, caso seja um engano!`
                );
              }
              break;

            case "codelist":
            case "listacodigo":
            case "listacodigos":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (coderpg.length < 0)
                return reply(
                  `Sinto muito!😿 Não existe nenhum código disponível no momento.`
                );
              txt = `[Total: *${coderpg.length}*] - Códigos de resgate disponíveis.\n• Para resgatar o benefício, use o comando: *${prefix}resgatargf <code>*`;
              for (i = 0; i < coderpg.length; i++) {
                txt += `\n—\n*[${i + 1}]* » • Código: *${
                  coderpg[i].codeid
                }*\n• Valor do Gift Card: *R$ ${Number(
                  coderpg[i].valor
                ).toFixed(
                  2
                )}*\n• Número de usuário(s) que podem resgatar o mesmo: *${
                  Number(coderpg[i].quantmax) - Number(coderpg[i].usus.length)
                }*`;
              }
              reply(txt);
              break;

            case "fazerpix":
            case "transferir":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              datepix = moment.tz("America/Sao_Paulo").format("DD/MM/YY");
              dateid = moment.tz("America/Sao_Paulo").format("DDMMYY");
              horaid = moment.tz("America/Sao_Paulo").format("HHmmss");
              var [nmr, pix] = q.split("/");
              if (!nmr)
                return reply(
                  `Coloque a chave PIX (número do indivíduo) para fazer a transferência bancária...`
                );
              if (sender.includes(nmr))
                return reply(`Não é possível enviar um pix para você mesmo...`);
              if (!pix)
                return reply(`Coloque uma barra ( / ) após a chave, e defina o valor a ser enviado, ex:
${prefix + command} 559181695945/100`);
              if (Number(pix) < 0.01)
                return reply(
                  `Não é possível transferir menos que 1 centavo...`
                );
              if (!Number(pix)) return reply(`${pix} não é número... 😿`);
              if (!JSON.stringify(miwarpg).includes(`${nmr}@s.whatsapp.net`))
                return reply(`Chave PIX não encontrada ou inexistente...`);
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              BC = miwarpg.map((i) => i.id).indexOf(`${nmr}@s.whatsapp.net`);
              if (Number(pix) > Number(miwarpg[AB].money))
                return reply(
                  `Você não tem saldo suficiente para efetuar essa transferência...`
                );
              if (miwarpg[AB].namebank == "Inter") {
                tpb = 0.1;
              }
              if (miwarpg[AB].namebank == "NuBank") {
                tpb = 0.2;
              }
              if (miwarpg[AB].namebank == "PagBank") {
                tpb = 0.3;
              }
              if (miwarpg[AB].namebank == "Bradesco") {
                tpb = 0.4;
              }
              if (miwarpg[AB].namebank == "Itaú") {
                tpb = 0.5;
              }
              if (miwarpg[AB].namebank == "Next") {
                tpb = 0.6;
              }
              if (miwarpg[AB].namebank == "Caixa") {
                tpb = 0.7;
              }
              if (miwarpg[AB].namebank == "Santander️") {
                tpb = 0.8;
              }
              if (miwarpg[AB].namebank == "Banco do Brasil") {
                tpb = 0.9;
              }
              if (miwarpg[AB].namebank == "PicPay") {
                tpb = 1;
              }
              if (miwarpg[AB].namebank == "PayPal") {
                tpb = 1.1;
              }
              if (miwarpg[AB].namebank == miwarpg[BC].namebank) {
                taxabanco = 0;
              } else {
                taxabanco = tpb;
              }
              taxageral = (Number(pix) * Number(taxabanco)) / 100;
              addpix =
                Number(miwarpg[BC].money) +
                Number(Number(pix) - Number(taxageral));
              delpix = Number(miwarpg[AB].money) - Number(pix);
              miwarpg[BC].money = addpix;
              miwarpg[AB].money = delpix;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              myid = miwarpg[AB].id.split("@")[0].slice(5);
              suid = miwarpg[BC].id.split("@")[0].slice(5);
              imn = miwarpg[AB].nome.slice(1);
              isn = miwarpg[BC].nome.slice(1);
              mimn = miwarpg[AB].nome.split(imn)[0];
              misn = miwarpg[BC].nome.split(isn)[0];
              comprovante = `🧾 *Comprovante:*\n—\n• Pix: *R$ ${Number(
                Number(pix) - Number(taxageral)
              ).toFixed(2)}*\n• Código ID: *${
                mimn.toUpperCase() + myid + misn.toUpperCase() + suid
              }P${dateid}X${horaid}RPG*\n•️ Taxa do Banco: *${taxabanco}%*\n—–\n• A transferência foi realizada às *${hora120}* do dia: *${datepix}*\n——\n• *Envio:* *${
                miwarpg[AB].nome
              }*\n• Banco: *${miwarpg[AB].namebank}*\n• ID: *R${
                miwarpg[AB].id.split(myid)[0]
              }GP${myid}BC*\n——\n• Recebimento: *${
                miwarpg[BC].nome
              }*\n• Banco: *${miwarpg[BC].namebank}*\n• ID: *R${
                miwarpg[BC].id.split(suid)[0]
              }GP${suid}BC*`;
              if (JSON.stringify(miwarpg).includes(nmrdn)) {
                setTimeout(() => {
                  BD = miwarpg.map((d) => d.id).indexOf(nmrdn);
                  pixdono = miwarpg[BD].money;
                  miwarpg[BD].money = Number(pixdono) + Number(taxageral);
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/miwarpg.json",
                    JSON.stringify(miwarpg)
                  );
                }, 1000);
              }
              reply(comprovante);
              break;

            case "chavepix":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(miwarpg).includes(menc_os2))
                return miwa.sendMessage(
                  from,
                  {
                    text: `Usuário (a) @${
                      menc_os2.split("@")[0]
                    } não consta em nosso banco...`,
                    mentions: [menc_os2],
                  },
                  { quoted: info }
                );
              AB = miwarpg.map((i) => i.id).indexOf(sender_ou_n);
              reply(
                `Chave encontrada/localizada! 🌟🧾\n• Nome: *${
                  miwarpg[AB].nome
                }*\n• Chave: *${miwarpg[AB].id.split("@")[0]}*`
              );
              break;

            case "meupix":
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              reply(
                `Aqui está sua numeração da chave pix: *${
                  miwarpg[AB].id.split("@")[0]
                }*`
              );
              break;

            case "sopk":
              if (isGroup) return reply("Só caminha");
              break;
            case "trocarbanco":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!q)
                return reply(
                  `Escolha um número correspondente ao banco...\nEx: ${
                    prefix + command
                  } 2 _(Serão necessários R$ 2500.00 para realizar essa ação)_\n––\nBancos disponíveis:\n• Opção - Número: [1] => Inter\n• Opção - Número: [2] => NuBank\n• Opção - Número: [3] => PagBank\n• Opção - Número: [4] => Bradesco\n• Opção - Número: [5] => Itaú\n• Opção - Número: [6] => Next\n• Opção - Número: [7] =>Caixa\n• Opção - Número: [8] => Santander\n• Opção - Número: [9] => Banco do Brasil\n• Opção - Número: [10] => PicPay\n• Opção - Número: [11] => PayPal️`
                );
              if (Number(args[0]) === 1) {
                var bankDD = `Inter`;
              }
              if (Number(args[0]) === 2) {
                var bankDD = `NuBank`;
              }
              if (Number(args[0]) === 3) {
                var bankDD = `PagBank`;
              }
              if (Number(args[0]) === 4) {
                var bankDD = `Bradesco`;
              }
              if (Number(args[0]) === 5) {
                var bankDD = `Itaú`;
              }
              if (Number(args[0]) === 6) {
                var bankDD = `Next`;
              }
              if (Number(args[0]) === 7) {
                var bankDD = `Caixa`;
              }
              if (Number(args[0]) === 8) {
                var bankDD = `Santander️`;
              }
              if (Number(args[0]) === 9) {
                var bankDD = `Banco do Brasil`;
              }
              if (Number(args[0]) === 10) {
                var bankDD = `PicPay`;
              }
              if (Number(args[0]) === 11) {
                var bankDD = `PayPal️`;
              }
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              if (Number(miwarpg[AB].money) < 2500)
                return reply(
                  ` Você não tem saldo suficiente pra realizar esta ação... São necessários R$ 2500.00 para alterar seu banco`
                );
              MD = Number(miwarpg[AB].money) - Number(2500);
              miwarpg[AB].money = MD;
              miwarpg[AB].namebank = bankDD;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              miwa.sendMessage(from, {
                text: `Troca efetuada com sucesso *@${
                  sender.split("@")[0]
                }*, seu banco agora é o(a) ${bankDD}.`,
                mentions: [sender],
              });
              break;

            case "trocarnome":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!q)
                return reply(
                  `Digite o novo nome junto ao comando... Lembre-se que essa ação custará R$ 1200.00\nEx: ${
                    prefix + command
                  } matheuzinho`
                );
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              if (Number(miwarpg[AB].money) < 1200)
                return reply(
                  ` Você não tem saldo suficiente pra realizar esta ação... São necessários R$ 1200.00 para alterar seu nome`
                );
              MD = Number(miwarpg[AB].money) - Number(1200);
              miwarpg[AB].money = MD;
              miwarpg[AB].nome = q;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              miwa.sendMessage(from, {
                text: `Troca efetuada com sucesso @${
                  sender.split("@")[0]
                }, seu nome foi alterado para ${q}.`,
                mentions: [sender],
              });
              break;

            case "trabalhar":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              horaT = moment.tz("America/Sao_Paulo").format("HH");
              dataT = moment.tz("America/Sao_Paulo").format("DD");
              data2T = moment.tz("America/Sao_Paulo").format("MM");
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              if (
                Number(miwarpg[AB].limiteTh) === 0 &&
                Number(miwarpg[AB].limiteTd) > 0 &&
                Number(miwarpg[AB].hrT) === Number(horaT)
              )
                return reply(
                  `Você já trabalhou agora... Volte na próxima hora.`
                );
              //trabalho normal...
              if (
                Number(miwarpg[AB].limiteTh) > 0 &&
                Number(miwarpg[AB].hrT) === Number(horaT) &&
                Number(miwarpg[AB].diaT) === Number(dataT) &&
                Number(miwarpg[AB].mT) === Number(data2T)
              ) {
                TBALE = Math.floor(Math.random() * 50) + 40;
                TBLH = Number(miwarpg[AB].money) + Number(TBALE);
                HT = miwarpg[AB].limiteTh - 1;
                TD = miwarpg[AB].limiteTd - 1;
                miwarpg[AB].money = TBLH;
                miwarpg[AB].money = TBLH;
                miwarpg[AB].money = TBLH;
                miwarpg[AB].limiteTh = HT;
                miwarpg[AB].limiteTd = TD;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                reply(
                  `Parabéns ${
                    miwarpg[AB].nome
                  }, você trabalhou e ganhou *R$ ${Number(TBALE).toFixed(
                    2
                  )}* até depois!🫡`
                );
              }
              HTR = miwarpg[AB].hrT + 1;
              //passar para a próxima hora...
              if (
                Number(horaT) > Number(miwarpg[AB].hrT) &&
                Number(miwarpg[AB].limiteTd) > 0 &&
                Number(miwarpg[AB].diaT) === Number(dataT) &&
                Number(miwarpg[AB].mT) == Number(data2T)
              ) {
                miwarpg[AB].limiteTh = 3;
                miwarpg[AB].hrT = horaT;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                reply(
                  `Já tá pronto pra trabalhar dnv? Digite o comando novamente enquanto eu preparo suas coisas...`
                );
              }
              if (
                Number(miwarpg[AB].limiteTd) < 1 &&
                Number(miwarpg[AB].diaT) === Number(dataT)
              )
                return reply(
                  `Você já trabalhou muito por hoje... Volte amanhã!`
                );
              //passar para o outro dia...
              if (
                Number(dataT) > Number(miwarpg[AB].diaT) &&
                Number(miwarpg[AB].mT) == Number(data2T)
              ) {
                miwarpg[AB].limiteTh = 3;
                miwarpg[AB].limiteTd = 24;
                miwarpg[AB].hrT = horaT;
                miwarpg[AB].diaT = dataT;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                reply(`${tempo} usuário (a), está pronto para trabalhar?`);
              }
              //passar para o próximo mês...
              if (Number(data2T) > Number(miwarpg[AB].mT)) {
                miwarpg[AB].limiteTh = 3;
                miwarpg[AB].limiteTd = 24;
                miwarpg[AB].hrT = horaT;
                miwarpg[AB].diaT = dataT;
                miwarpg[AB].mT = data2T;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                reply(`${tempo} usuário (a), está pronto para iniciar o mês?`);
              }
              break;

            case "minado2":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!isModobn) return reply(mess.warningMB(prefix));
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (isPlayMines)
                return reply(
                  "Uma partida já foi iniciada, espere acabar para iniciar uma nova..."
                );
              if (args.length < 1)
                return reply("*Diga a dificuldade: easy, normal, hard*");
              teks = args[0].toLowerCase();
              if (teks == "easy") q_mines = 5;
              else if (teks == "normal") q_mines = 8;
              else if (teks == "hard") q_mines = 12;
              else return reply("Dificuldade inválida...");
              p_mines = await getMinesPositions(minecor, q_mines);
              atp = q_mines == 5 ? 3 : q_mines == 8 ? 5 : q_mines == 12 ? 8 : 5;
              ctw = minecor.filter(function (el) {
                return !p_mines.includes(el);
              });
              var minframes = JSON.parse(
                fs.readFileSync("./database/grupos/games/minesframe.json")
              );
              mines.push({
                id: from,
                jogador: sender,
                pos_mines: p_mines,
                qnt_mines: q_mines,
                selected_cord: [],
                cord_to_win: ctw,
                attempts: atp,
                tips_d: 0,
                hits: 0,
                minesp: minframes,
              });
              fs.writeFileSync(
                "./database/grupos/games/mines.json",
                JSON.stringify(mines, null, 2)
              );
              miwa.sendMessage(from, {
                image: { url: minado_bomb },
                caption: `💣 *Campo Minado:*\n\t• Não sabe como jogar? Use o comando: *${prefix}mineshelp*\n\t• Caso desejar encerrar ou resetar a partida, use: *${prefix}minareset*\n-\n• *Números:* 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣\n• *Coluna A:* 🟦 🟦 🟦 🟦 🟦\n• *Coluna B:* 🟦 🟦 🟦 🟦 🟦\n• *Coluna C:* 🟦 🟦 🟦 🟦 🟦\n• *Coluna D:* 🟦 🟦 🟦 🟦 🟦\n• *Coluna E:* 🟦 🟦 🟦 🟦 🟦\n—\n• Mina(s): *${q_mines}*\n• Dificuldade: *${teks}*\n• Tentativa(s): *${atp}*`,
              });
              break;

            case "mina2":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!isModobn) return reply(mess.warningMB(prefix));
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!isPlayMines)
                return reply(
                  "Nehuma partida foi iniciada no grupo atualmente!"
                );
              if (args.length < 1)
                return reply("Diga a dificuldade: easy, normal, hard");
              if (
                JSON.stringify(
                  mines[mines.map((i) => i.id).indexOf(from)]
                ).includes(sender)
              ) {
                teks = args[0].toLowerCase();
                play_i = minesId.indexOf(from);
                const RAN_VALOR = Math.floor(Math.random() * 10000);
                for (let obj of args) {
                  teks = obj.toLowerCase();
                  if (!minecor.includes(teks))
                    return reply("Escolha uma coordenada");
                  if (mines[play_i].selected_cord.includes(teks))
                    return reply("Coordenada já selecionada!");
                  if (mines[play_i].pos_mines.includes(teks)) {
                    mines[play_i].minesp[teks] = "💣";
                    mines[play_i].attempts -= 1;
                    mines[play_i].tips_d = 0;
                  } else {
                    mines[play_i].minesp[teks] = "⭐";
                    mines[play_i].hits += 1;
                    mines[play_i].tips_d += 1;
                  }
                  mines[play_i].selected_cord.push(teks);
                }
                e = mines[play_i].minesp;
                res_teks = `💣 *Campo Minado:*\n\t• Não sabe como jogar? Use o comando: *${prefix}mineshelp*\n\t• Caso desejar encerrar ou resetar a partida, use: *${prefix}minareset*\n—\n• *Números:* 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣\n• *Coluna A:* ${e.a1} ${e.a2} ${e.a3} ${e.a4} ${e.a5}\n• *Coluna B:* ${e.b1} ${e.b2} ${e.b3} ${e.b4} ${e.b5}\n• *Coluna C:* ${e.c1} ${e.c2} ${e.c3} ${e.c4} ${e.c5}\n• *Coluna D:* ${e.d1} ${e.d2} ${e.d3} ${e.d4} ${e.d5}\n• *Coluna E:* ${e.e1} ${e.e2} ${e.e3} ${e.e4} ${e.e5}\n—\n• Mina(s): *${mines[play_i].qnt_mines}*\n• Tentativa(s): *${mines[play_i].attempts}*\n• Acerto(s): *${mines[play_i].hits}*`;
                if (mines[play_i].attempts <= 0) {
                  res_teks += `\n——\n😿💔 Nossa que pena, suas chances esgotaram! Você acaba de perder e a chance de receber *R$ ${Number(
                    RAN_VALOR
                  ).toFixed(2)}* em sua carteira.`;
                  await mines.splice(play_i, 1);
                  fs.writeFileSync(
                    "./database/grupos/games/mines.json",
                    JSON.stringify(mines, null, 2)
                  );
                  miwa.sendMessage(from, {
                    image: { url: minado_bomb },
                    caption: res_teks,
                  });
                } else {
                  if (
                    mines[play_i].selected_cord.length >=
                    mines[play_i].cord_to_win.length
                  ) {
                    containAll = mines[play_i].cord_to_win.every((e) => {
                      return mines[play_i].selected_cord.includes(e);
                    });
                    if (containAll) {
                      res_teks += `\n——\n🥳🌟 Meus parabéns e como recompensa da vitória, você acaba de ganhar *R$ ${Number(
                        RAN_VALOR
                      ).toFixed(2)}* em sua carteira.`;
                      USER = miwarpg.map((i) => i.id).indexOf(sender);
                      MONEYATUAL = miwarpg[AB].money;
                      miwarpg[USER].money =
                        Number(MONEYATUAL) + Number(RAN_VALOR);
                      await mines.splice(play_i, 1);
                      fs.writeFileSync(
                        "./database/grupos/games/mines.json",
                        JSON.stringify(mines, null, 2)
                      );
                      miwa.sendMessage(from, {
                        image: { url: minado_bomb },
                        caption: res_teks,
                      });
                    }
                  } else {
                    if (mines[play_i].tips_d >= 3) {
                      res_teks += `\n—\nVocê tem direito a *${parseInt(
                        mines[play_i].tips_d / 3
                      )}* Dica(s).`;
                      fs.writeFileSync(
                        "./database/grupos/games/mines.json",
                        JSON.stringify(mines, null, 2)
                      );
                      miwa.sendMessage(from, {
                        image: { url: minado_bomb },
                        caption: res_teks,
                      });
                    } else {
                      fs.writeFileSync(
                        "./database/grupos/games/mines.json",
                        JSON.stringify(mines, null, 2)
                      );
                      miwa.sendMessage(from, {
                        image: { url: minado_bomb },
                        caption: res_teks,
                      });
                    }
                  }
                }
              } else
                return reply(
                  "Já existe uma partida ocorrendo no grupo, não é possível iniciar outra! Aguarde acabar a atual, para iniciar a sua partida senhor(a) :("
                );
              break;

            case "minareset2":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!JSON.stringify(mines).includes(from) && !SoDono)
                return reply(
                  "Não existe nenhuma partida ainda em andamento no grupo."
                );
              nosei = SoDono ? 0 : mines.map((i) => i.id).indexOf(from);
              if (mines[nosei].jogador == sender || isGroupAdmins || SoDono) {
                mines.splice(nosei, 1);
                fs.writeFileSync(
                  "./database/grupos/games/mines.json",
                  JSON.stringify(mines, null, 2)
                );
                reply(
                  `O campo minado foi resetado com sucesso, a partida foi deletada.`
                );
              } else {
                reply(
                  "Somente o(s) adm(s) ou a pessoa que iniciou o jogo podem resetar."
                );
              }
              break;

            case "mineshelp2":
              reply(MinesHelp(prefix));
              break;

            case "minatips2":
              if (!isPlayMines)
                return reply(
                  "- Nenhuma partida foi iniciada no grupo atualmente!"
                );
              if (
                JSON.stringify(
                  mines[mines.map((i) => i.id).indexOf(from)]
                ).includes(sender)
              ) {
                play_i = minesId.indexOf(from);
                if (mines[play_i].tips_d >= 3) {
                  is_columns = Math.random() < 0.5;
                  if (!is_columns) {
                    m_sorted = Math.floor(
                      Math.random() * mines[play_i].pos_mines.length + 0
                    );
                    row = mines[play_i].pos_mines[m_sorted].charAt(0);
                    mines_row = 0;
                    for (let obj of mines[play_i].pos_mines) {
                      if (obj.startsWith(row)) mines_row += 1;
                    }
                    mines[play_i].tips_d -= 3;
                    fs.writeFileSync(
                      "./database/grupos/games/mines.json",
                      JSON.stringify(mines, null, 2)
                    );
                    reply(`💡 Há *${mines_row}* bomba(s) na fileira *${row}*`);
                  } else {
                    m_sorted = Math.floor(
                      Math.random() * mines[play_i].pos_mines.length + 0
                    );
                    column = mines[play_i].pos_mines[m_sorted].charAt(1);
                    mines_column = 0;
                    for (let obj of mines[play_i].pos_mines) {
                      if (obj.endsWith(column)) mines_column += 1;
                    }
                    mines[play_i].tips_d -= 3;
                    fs.writeFileSync(
                      "./database/grupos/games/mines.json",
                      JSON.stringify(mines, null, 2)
                    );
                    reply(
                      `💡 Há *${mines_column}* bomba(s) na coluna *${column}*`
                    );
                  }
                } else
                  return reply(
                    "*Acerte 3 ou mais vezes para ter direito a uma dica...*"
                  );
              } else
                return reply(
                  "Você não pode usar este comando agora, por motivo que está ocorrendo uma partida e você não é o jogador atuante das respostas. :("
                );
              break;

            case "itenspesca":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (JSON.stringify(pescaria).includes(sender))
                return mentions(
                  `Olá @${
                    sender.split("@")[0]
                  }, você já tem uma vara de pesca e um barco! Não é possível comprar novamente, pois você já possui o conjunto de pescaria.`
                );
              if (Number(miwarpg[AB].money) < Number(150))
                return reply(
                  `😿 Você não possuí Golds suficiente para realizar a compra de uma vara de pescar e um barco...`
                );
              miwarpg[AB].money -= Number(150); // Diminuir o saldo quando executar a compra!
              pescaria.push(sender); // Adicionar ao json o user do id que realizou a compra do mesmo.
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/pescaria.json",
                JSON.stringify(pescaria)
              );
              reply(
                `⛵️🎣 Você acaba de adquirir uma vara de pescar e um barco para se usar na pescaria, acabei de descontar 300 Golds em sua conta por motivo da compra de seus utensílios, agora você está hábito para usar o comando: *${prefix}pescar*\n—\n• Lembrando, você deve ter pelo menos 300 reais para pescar, pois quando não há sucesso você perde um valor de até 200 Golds em sua Miwa Account.`
              );
              break;

            case "pescaria":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!isModobn) return reply(mess.warningMB(prefix));
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(pescaria).includes(sender))
                return mention(
                  `Olá @${
                    sender.split("@")[0]
                  }, você não tem os itens nescessários para usar este comando! Compre uma vara de pescar e um barco por *150 Golds*, use o comando: *${prefix}itenspesca*`
                );
              if (Number(miwarpg[AB].money) < Number(300))
                return reply(
                  `Você não possuí Golds suficiente para realizar o uso deste comando, no mínimo você deve ter mais de 300 Golds em sua carteira para usar...\n• Use meus joguinhos e jaja você consegue esse valor, não fique mal!️`
                );
              minu = moment.tz("America/Sao_Paulo").format("mm");
              if (!JSON.stringify(rg_pescaria).includes(sender)) {
                rg_pescaria.push({ id: sender, minuto: minu });
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/pescaria-t.json",
                  JSON.stringify(rg_pescaria)
                );
              }
              AC = rg_pescaria.map((i) => i.id).indexOf(sender);
              if (Number(rg_pescaria[AC].minuto) !== Number(minu)) {
                rg_pescaria[AC].minuto = minu;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                CHANCE_G = Math.floor(Math.random() * 100);
                reply(
                  `- Iniciando pescaria! Aguarde *5s* para obter o resultado...`
                );
                if (Number(CHANCE_G) > 50) {
                  ValorPerdido = Math.floor(Math.random() * 150);
                  AB = miwarpg.map((i) => i.id).indexOf(sender);
                  miwarpg[AB].money =
                    Number(miwarpg[AB].money) - Number(ValorPerdido);
                  perdeuMessage = [
                    `🌊😿 Você estava desbravando os 7 mares quando apareceu o tubarão martelo e derrubou o barco. Todos morreram, e você perdeu *R$ ${Number(
                      ValorPerdido
                    ).toFixed(2)}* com gastos no funeral...`,
                    `Depois de horas de pesca, você não conseguiu o pacu nem o pirarucu! O único que aconteceu foi que você tomou no c*, acaba de perder *R$ ${Number(
                      ValorPerdido
                    ).toFixed(2)}*! 😿🌟`,
                    `Você queria dar um mergulho na água e achar peixes novos, mas infelizmente você acabou caindo no sono e o único que conseguiu foi areia na bunda, ainda perdeu *R$ ${Number(
                      ValorPerdido
                    ).toFixed(2)}*! 🤣`,
                  ];
                  txt =
                    perdeuMessage[
                      Math.floor(Math.random() * perdeuMessage.length)
                    ];
                } else {
                  ValorGanho = Math.floor(Math.random() * 500);
                  AB = miwarpg.map((i) => i.id).indexOf(sender);
                  TotalMoedas = miwarpg[AB].money;
                  miwarpg[AB].money = Number(TotalMoedas) + Number(ValorGanho);
                  pescarMessage = [
                    `😲🗺 Em sua navegação pelo manguezais, você conseguiu pescar os seguintes frutos do mar *caranguejo-uçá, o camarão-rosa e a tainha* e você conseguiu vender ${Math.floor(
                      Math.random() * 250
                    )} de cada um deles, como recompensa você acaba de ganhar *R$ ${Number(
                      ValorGanho
                    ).toFixed(2)}*.`,
                    `Depois de horas de pesca, finalmente você acaba de fisgar um pirarucu, o peixe era tão grande que foi preciso usar um guincho para tirá-lo da água. Como recompensa de sua pescada, você acaba de ganhar: *R$ ${Number(
                      ValorGanho
                    ).toFixed(2)}*. 😌`,
                    `Você e seu pai foram convidados para um incrível passeio de barco, lá vocês conseguiram encontrar e pescar *${Math.floor(
                      Math.random() * 50
                    )}* peixe(s) e marisco(s)... Como recompensa, você acaba de ganhar em sua carteira: *R$ ${Number(
                      ValorGanho
                    ).toFixed(2)}*. ⛵️🤍`,
                    `O seu esforço foi recompensado! Você ganhou *R$ ${Number(
                      ValorGanho
                    ).toFixed(2)}* por ter feito a maior pescaria do dia! 😍`,
                    `🛒💰 Parabéns! Você vendeu vários peixes no mercado da produção localizado em *Maceió, Alagoas*, como recompensa por suas vendas o seu patrão lhe recompensou com *R$ ${Number(
                      ValorGanho
                    ).toFixed(2)}*.`,
                    `😼 Você foi convidado à um torneio de pesca e ganhou em ${Math.floor(
                      Math.random() * 5
                    )}°, como recompensa você acaba de ganhar: R$ ${Number(
                      ValorGanho
                    ).toFixed(2)}*.`,
                    `Você foi convidado à um torneio de pesca e saiu como campeão! 🎉 Parabéns, como recompensa você acaba de ganhar: R$ ${Number(
                      ValorGanho
                    ).toFixed(2)}*.`,
                    `🌟 Você foi o pescador mais sortudo do dia! Ganhou R$ ${Number(
                      ValorGanho
                    ).toFixed(2)} no sorteio desconhecido entre os pescadores.`,
                    `Você é um verdadeiro profissional! Faturou em toda sua pescada R$ ${Number(
                      ValorGanho
                    ).toFixed(2)}, Parabéns amigo(a)! 😍🎉`,
                    `Você vendeu o seu sururu para um restaurante bem renomado na cidade de São Paulo! Ganhou R$ ${Number(
                      ValorGanho
                    ).toFixed(2)}  pelas suas vendas do dia! 😲🌟🎉`,
                    `Você estava em um cruzeiro e acabou conhecendo muitos peixes de perto! Este cruzeiro era o Titanic, mas pelo menos você conseguiu *R$ ${Number(
                      ValorGanho
                    ).toFixed(2)}* com os peixes... 🤣🎉`,
                  ];
                  txt =
                    pescarMessage[
                      Math.floor(Math.random() * pescarMessage.length)
                    ];
                }
                setTimeout(() => {
                  miwa.sendMessage(from, { text: txt }, { quoted: info });
                }, 5000);
              } else {
                reply(
                  `Por favor, aguarde *${
                    60 - Number(moment.tz("America/Sao_Paulo").format("ss"))
                  }s* para realizar uma nova pescagem...`
                );
              }
              break;

            case "minerar":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!isModobn) return reply(mess.warningMB(prefix));
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              minu = moment.tz("America/Sao_Paulo").format("mm");
              if (!JSON.stringify(minerar).includes(sender)) {
                minerar.push({ id: sender, minuto: minu });
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/minerar.json",
                  JSON.stringify(minerar)
                );
              }
              AC = minerar.map((i) => i.id).indexOf(sender);
              if (Number(minerar[AC].minuto) !== Number(minu)) {
                minerar[AC].minuto = minu;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                MINERAR_G = Math.floor(Math.random() * 100);
                reply(
                  `- Iniciando mineração! Aguarde *5s* para obter o resultado...`
                );
                if (Number(MINERAR_G) > 50) {
                  PD = [
                    "nenhum mineral valioso",
                    "nenhuma joia valiosa em sua busca",
                    "nenhum diamante em sua caçada",
                    "nenhum minério validoso",
                    "nenhum cobre em sua caçada",
                    "nada de redstone em sua caçada",
                  ];
                  txt = `😭 Em sua tentativa de mineração, não foi possível evidenciar ${
                    PD[Math.floor(Math.random() * PD.length)]
                  }...`;
                } else {
                  MT = Math.floor(Math.random() * 2000);
                  AB = miwarpg.map((i) => i.id).indexOf(sender);
                  MA = miwarpg[AB].money;
                  miwarpg[AB].money = Number(MA) + Number(MT);
                  mineMessage = [
                    `Você estava minerando nas ilhas savitas e encontrou em seu caminho *R$ ${Number(
                      MT
                    ).toFixed(2)}* em minerais preciosos! 💰`,
                    `🗣💰 Você invadiu uma mina proibida e quando estava fazendo a mineração achou *R$ ${Number(
                      MT
                    ).toFixed(2)}* em troca de ouro!`,
                    `💎👷🏻‍♀️ Você invadiu uma mina de diamantes proibida, enquanto você estava fazendo a mineração, encontrou 2 diamantes equivalentes à *R$ ${Number(
                      MT
                    ).toFixed(2)}*.`,
                    `⛏️👷🏻‍♀️ Você escavou uma mina de ouro subterrânea em Minas Gerais e encontrou *R$ ${Number(
                      MT
                    ).toFixed(2)}*!`,
                    `🛫 Em uma de suas viagens para o interior da Flórida, você embarcou uma busca ao tesouro perdido e encontrou em seu caminho um cordão de ouro perdido avaliado em *R$ ${Number(
                      MT
                    ).toFixed(2)}*.`,
                    `😱🌟 Você invadiu a casa do vizinho e encontrou *R$ ${Number(
                      MT
                    ).toFixed(2)}* escavando o quintal dele.`,
                    `⛏️👷🏻‍♀️✨️ Você acaba de invadir em uma mina de esmeraldas desconhecida e encontrou *R$ ${Number(
                      MT
                    ).toFixed(2)}*`,
                    `🛥️💰 Você encontrou nas profundezas do oceanos, um tesouro em um navio antigo equivalente à *R$ ${Number(
                      MT
                    ).toFixed(2)}*.`,
                    `🌟 Você foi chamado para trabalhar na mina e encontrou milhares de resíduos! Como recompensa, você acaba de ganhar *R$ ${Number(
                      MT
                    ).toFixed(2)}*. 😸`,
                    `Você foi chamado para trabalhar na mina e encontrou muitos tesouros perdidos!👷🏼🌟 Como recompensa, você acaba de ganhar *R$ ${Number(
                      MT
                    ).toFixed(2)}*.`,
                  ];
                  txt =
                    mineMessage[Math.floor(Math.random() * mineMessage.length)];
                }
                setTimeout(() => {
                  miwa.sendMessage(from, { text: txt }, { quoted: info });
                }, 5000);
              } else {
                reply(
                  `Por favor, aguarde *${
                    60 - Number(moment.tz("America/Sao_Paulo").format("ss"))
                  }s* para realizar uma nova mineração...`
                );
              }
              break;

              case "comprarseguranca":
                if (!isGroup) return reply(mess.onlyGroup());
                if (!isMiwaCityOFF)
                  return reply(
                    `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                  );
                if (!JSON.stringify(miwarpg).includes(sender))
                  return reply(
                    `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                  );
                if (!q)
                  return reply(
                    "Escolha na loja um segurança de 1-3 para proteger o seu dinheiro e evitar assaltos"
                  );
                if (!JSON.stringify(roubosrpg).includes(sender)) {
                  hora3 = moment.tz("America/Sao_Paulo").format("HH");
                  data3 = moment.tz("America/Sao_Paulo").format("DD");
                  roubosrpg.push({
                    id: sender,
                    limite: 2,
                    hora: hora3,
                    dia: data3,
                    dinheiro: 0,
                    preso: false,
                    segurança: 20,
                  });
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/roubosrpg.json",
                    JSON.stringify(roubosrpg)
                  );
                }
                if (Number(args[0]) > 0 && Number(args[0]) <= 3) {
                  value = Number(args[0]) * 20 + 20;
                  BC = miwarpg.map((i) => i.id).indexOf(sender);
                  AB = roubosrpg.map((i) => i.id).indexOf(sender);
                  if (Number(Number(args[0]) * 600) > miwarpg[BC].money)
                    return reply(
                      `Você não tem dinheiro suficiente para comprar esse segurança...`
                    );
                  if (roubosrpg[AB].segurança == value)
                    return reply(`Você já possui esse segurança...`);
                  comp =
                    value > roubosrpg[AB].segurança
                      ? `diminuída em ${value - roubosrpg[AB].segurança}%`
                      : `aumentada em ${value - roubosrpg[AB].segurança}%`;
                  roubosrpg[AB].segurança = value;
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/roubosrpg.json",
                    JSON.stringify(roubosrpg)
                  );
                  const RemoverGold = (userId, amount) => {
                    const userIndex = miwarpg.map((i) => i.id).indexOf(userId);
                    if (userIndex !== -1) {
                      miwarpg[userIndex].money -= amount; // Subtrai o valor
                      // Salve as mudanças no arquivo
                      fs.writeFileSync(
                        "./database/usuarios/SystemRPG/miwarpg.json",
                        JSON.stringify(miwarpg)
                      );
                    }
                  };
                  //miwarpg[BC].money -= Number(150);//
                  RemoverGold(sender, Number(args[0]) * 600);
                  reply(
                    `Segurança Lv. ${args[0]} comprado com sucesso 👨🏻‍✈️\nTaxa de drop: ${comp}`
                  );
                } else {
                  reply(
                    `Escolha um número correspondente a um dos seguranças presentes na loja...`
                  );
                }
                break;
  
            case "treinar":
            case "treino":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              treinamento = [
                "Cê já treinou lek",
                "Hmm",
                "Tá bão",
                "Chega lek, cê já treinou",
                "Te acalma desgrama",
              ];
              if (JSON.stringify(roubosrpg).includes(sender))
                return reply(
                  `${
                    treinamento[Math.floor(Math.random() * treinamento.length)]
                  }`
                );
              hora3 = moment.tz("America/Sao_Paulo").format("HH");
              data3 = moment.tz("America/Sao_Paulo").format("DD");
              roubosrpg.push({
                id: sender,
                limite: 2,
                hora: hora3,
                dia: data3,
                dinheiro: 0,
                preso: false,
                segurança: 20,
              });
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/roubosrpg.json",
                JSON.stringify(roubosrpg)
              );
              reply(
                "Treinamento efetuado com sucesso... Pronto para assaltar outros usuários"
              );
              break;

            case "assaltar":
            case "furtar":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(roubosrpg).includes(sender))
                return reply(
                  `Você precisa treinar primeiro... Use ${prefix}treinar`
                );
              if (!menc_os2)
                return reply("Marque a pessoa quem você quer assaltar...");
              if (sender.includes(menc_os2))
                return reply(`Não é possível assaltar você mesmo...`);
              if (!JSON.stringify(miwarpg).includes(menc_os2))
                return reply(`ID do usuário não encontrado ou inexistente...`);
              matheuzinho = Math.floor(Math.random() * 100);
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AD = roubosrpg.map((i) => i.id).indexOf(sender);
              hora3 = moment.tz("America/Sao_Paulo").format("HH");
              data3 = moment.tz("America/Sao_Paulo").format("DD");
              minuto3 = moment.tz("America/Sao_Paulo").format("mm");
              if (roubosrpg[AD].preso == true)
                return reply(
                  "Você está preso, portanto, não é possível roubar..."
                );
              if (
                Number(
                  miwarpg[miwarpg.map((i) => i.id).indexOf(menc_os2)].money
                ) < 10
              )
                return reply(
                  "Esse ser não tem nem onde cair morto, pobre desgramado... Vai assaltar alguém mais rico 🤡"
                );
              if (
                roubosrpg[AD].limite <= 0 &&
                Number(roubosrpg[AD].hora) === Number(hora3) &&
                Number(roubosrpg[AD].dia) === Number(data3)
              )
                return reply(
                  `Hmm... Agora não ${miwarpg[AB].nome}, aguarde ${
                    Number(Number(Number(hora3) + 1) * 60) -
                    Number(Number(roubosrpg[AD].hora) * 60 + Number(minuto3))
                  } minutos para fazer o próximo assalto 🥷🏻`
                );
              if (
                roubosrpg[AD].limite <= 0 &&
                Number(hora3) > Number(roubosrpg[AD].hora) &&
                Number(roubosrpg[AD].dia) === Number(data3)
              ) {
                roubosrpg[AD].limite = 2;
                roubosrpg[AD].hora = hora3;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/roubosrpg.json",
                  JSON.stringify(roubosrpg)
                );
              }
              if (
                roubosrpg[AD].limite <= 0 &&
                Number(roubosrpg[AD].dia) !== Number(data3)
              ) {
                roubosrpg[AD].limite = 2;
                roubosrpg[AD].hora = hora3;
                roubosrpg[AD].dia = data3;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/roubosrpg.json",
                  JSON.stringify(roubosrpg)
                );
              }
              if (roubosrpg[AD].limite > 0 && roubosrpg[AD].preso == false) {
                roubosrpg[AD].limite -= 1;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/roubosrpg.json",
                  JSON.stringify(roubosrpg)
                );
                if (matheuzinho > 5) {
                  matheuzinho2 = Math.floor(Math.random() * 100);
                  lvx = Number(Math.floor(Math.random() * 39) + 1);
                  totalM = lvx * 100;
                  totalU =
                    miwarpg[miwarpg.map((i) => i.id).indexOf(menc_os2)].money -
                    1;
                  ganho =
                    totalM >
                    Number(
                      miwarpg[miwarpg.map((i) => i.id).indexOf(menc_os2)].money
                    )
                      ? Math.floor(Math.random() * totalU) + 1
                      : Math.floor(Math.random() * 100) * lvx;
                  algo = JSON.stringify(roubosrpg).includes(menc_os2)
                    ? roubosrpg[roubosrpg.map((b) => b.id).indexOf(menc_os2)]
                        .segurança
                    : 20;
                  if (matheuzinho2 > algo) {
                    miwarpg[AB].money += ganho;
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/miwarpg.json",
                      JSON.stringify(miwarpg)
                    );
                    miwarpg[miwarpg.map((i) => i.id).indexOf(menc_os2)].money -=
                      ganho;
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/miwarpg.json",
                      JSON.stringify(miwarpg)
                    );
                    reply(
                      `Assalto efetuado com sucesso ${
                        miwarpg[AB].nome
                      }, você roubou R$ ${Number(ganho).toFixed(2)} da conta ${
                        miwarpg[miwarpg.map((i) => i.id).indexOf(menc_os2)].nome
                      }`
                    );
                  } else {
                    perda1 = Number(ganho) / 2;
                    perda2 =
                      perda1 >= miwarpg[AB].money ? miwarpg[AB].money : perda1;
                    miwarpg[AB].money -= perda2;
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/miwarpg.json",
                      JSON.stringify(miwarpg)
                    );
                    reply(
                      `🚓 Ops, você foi pego pela polícia e pagou ${
                        perda1 >= miwarpg[AB].money
                          ? `todo o seu dinheiro`
                          : `R$ ${Number(perda2).toFixed(2)}`
                      } para sair da cadeia... Kkkk sinto muito 😔🤙🏽`
                    );
                  }
                } else {
                  matheuzinho3 = Math.floor(Math.random() * 100);
                  if (matheuzinho3 > 10) {
                    roubosrpg[AD].dinheiro += miwarpg[AB].money;
                    roubosrpg[AD].preso = true;
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/roubosrpg.json",
                      JSON.stringify(roubosrpg)
                    );
                    miwarpg[AB].money = 0;
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/miwarpg.json",
                      JSON.stringify(miwarpg)
                    );
                    reply(
                      `Putz, cê deu muito azar... Seu caso foi passado para o governo federal, e toda a sua grana foi apreendida 😮‍💨\nFelizmente, cê pode pegar o dinheiro de volta amanhã usando ${prefix}retirar`
                    );
                  } else {
                    if (JSON.stringify(cavalosrpg).includes(sender)) {
                      R1 = cavalosrpg.map((i) => i.id).indexOf(sender);
                      cavalosrpg.splice(R1, 1);
                      fs.writeFileSync(
                        "./database/usuarios/SystemRPG/cavalosrpg.json",
                        JSON.stringify(cavalosrpg)
                      );
                    }
                    if (JSON.stringify(galosrpg).includes(sender)) {
                      R2 = galosrpg.map((i) => i.id).indexOf(sender);
                      galosrpg.splice(R2, 1);
                      fs.writeFileSync(
                        "./database/usuarios/SystemRPG/galosrpg.json",
                        JSON.stringify(galosrpg)
                      );
                    }
                    roubosrpg[AD].preso = false;
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/roubosrpg.json",
                      JSON.stringify(roubosrpg)
                    );
                    miwarpg[AB].money = 0;
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/miwarpg.json",
                      JSON.stringify(miwarpg)
                    );
                    reply(
                      `Vix mlk, deu ruim demais... Seu assalto virou caso da INTERPOL, e ela confiscou todos os seu bens junto com seu dinheiro 👨🏻‍✈️`
                    );
                  }
                }
              }
              break;

            case "soltar":
              if (!SoDono) return reply(mess.onlyOwner());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!q && !menc_os2) return;
              usu = menc_os2 ? menc_os2 : q + `@s.whatsapp.net`;
              if (!JSON.stringify(roubosrpg).includes(usu))
                return reply(`❌ ID não encontrado ou inexistente!`);
              AD = roubosrpg.map((i) => i.id).indexOf(menc_os2);
              roubosrpg[AD].preso = false;
              roubosrpg[AD].dinheiro = 0;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/roubosrpg.json",
                JSON.stringify(roubosrpg)
              );
              reply(`Usuário solto.`);
              break;

            case "revogar":
            case "reivindicar":
            case "retirar":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(roubosrpg).includes(sender))
                return reply(`Você não foi preso lek, aquieta o facho 😂`);
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AD = roubosrpg.map((i) => i.id).indexOf(sender);
              data3 = moment.tz("America/Sao_Paulo").format("DD");
              if (roubosrpg[AD].dinheiro <= 0)
                return reply(`Não há dinheiro apreendido...`);
              if (Number(roubosrpg[AD].dia) === Number(data3))
                return reply(
                  `Você só pode retirar o dinheiro apreendido amanhã...`
                );
              reply(
                `Pronto, aqui estão os R$ ${Number(
                  roubosrpg[AD].dinheiro
                ).toFixed(
                  2
                )} que foram apreendidos pela polícia... Vê se anda na linha mlk 👨🏻‍✈️`
              );
              miwarpg[AB].money += roubosrpg[AD].dinheiro;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              roubosrpg[AD].preso = false;
              roubosrpg[AD].dinheiro = 0;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/roubosrpg.json",
                JSON.stringify(roubosrpg)
              );
              break;

            case "comprarestabulo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              if (JSON.stringify(cavalosrpg).includes(sender))
                return reply(
                  `Você já tem um estábulo em seu nome ${miwarpg[AB].nome}... 🐎`
                );
              if (Number(miwarpg[AB].money) < 500)
                return reply(
                  `Você não saldo suficiente para efetuar essa compra...`
                );
              cavH = moment.tz("America/Sao_Paulo").format("HH");
              cavD = moment.tz("America/Sao_Paulo").format("DD");
              cavM = moment.tz("America/Sao_Paulo").format("MM");
              cavalosrpg.push({
                id: sender,
                level: 1,
                quant_cavalos: 0,
                setcav: `nenhum`,
                countVc: 0,
                capitalVc: 0,
                countDc: 0,
                capitalDc: 0,
                corridaL: 10,
                corridaH: cavH,
                corridaD: cavD,
                corridaM: cavM,
                cavalos: [],
              });
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/cavalosrpg.json",
                JSON.stringify(cavalosrpg)
              );
              MD = miwarpg[AB].money;
              miwarpg[AB].money = Number(MD) - 500;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `Parabéns pela compra do estábulo... Agora você pode comprar cavalos para correr com eles 🐴`
              );
              break;

            case "venderestabulo":
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(cavalosrpg).includes(sender))
                return reply(
                  `Você precisa comprar um estábulo primeiro... Consulte a ${prefix}lojadecavalos`
                );
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AC = cavalosrpg.map((b) => b.id).indexOf(sender);
              TT1 = Number(cavalosrpg[AC].cavalos.length) * 500;
              TT2 = Number(cavalosrpg[AC].level) * 200;
              TT3 = Number(cavalosrpg[AC].countVc) * 100;
              TT4 = Number(TT1) + Number(TT2) + Number(TT3);
              cavalosrpg.splice(AC, 1);
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/cavalosrpg.json",
                JSON.stringify(cavalosrpg)
              );
              MD = miwarpg[AB].money;
              miwarpg[AB].money = Number(MD) + Number(TT4);
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(`${tempo} ${
                miwarpg[AB].nome
              }, seu estábulo ficou avaliado em R$ ${Number(TT4).toFixed(2)}
📈 Parabéns pela venda...`);
              break;

            case "avaliarestabulo":
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(cavalosrpg).includes(sender))
                return reply(
                  `Você precisa comprar um estábulo primeiro... Consulte a ${prefix}lojadecavalos`
                );
              AC = cavalosrpg.map((b) => b.id).indexOf(sender);
              TT1 = Number(cavalosrpg[AC].cavalos.length) * 500;
              TT2 = Number(cavalosrpg[AC].level) * 200;
              TT3 = Number(cavalosrpg[AC].countVc) * 100;
              TT4 = Number(TT1) + Number(TT2) + Number(TT3);
              txt = `ㅤㅤㅤ〘 *AVALIANDO* 〙
🐴 *Preço Por Cavalos:* R$ ${Number(TT1).toFixed(2)}
📈 *Preço Por Upgrade:* R$ ${Number(TT2).toFixed(2)}
🏆 *Preço Por Vitórias:* R$ ${Number(TT3).toFixed(2)}

🤑 *Total:* R$ ${Number(TT4).toFixed(2)}

-> Use ${prefix}venderestabulo caso queira se desfazer do mesmo.`;
              reply(txt);
              break;

            case "estabulo":
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(cavalosrpg).includes(sender))
                return reply(
                  `Você precisa comprar um estábulo primeiro... Consulte a ${prefix}lojadecavalos`
                );
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AC = cavalosrpg.map((a) => a.id).indexOf(sender);
              AD = cavalosrpg[AC].cavalos
                .map((b) => b.nomedocavalo)
                .indexOf(cavalosrpg[AC].setcav);
              if (Number(cavalosrpg[AC].cavalos.length) <= 0) {
                countcav = `\n『 Você não possui cavalos... 』\n`;
              } else {
                countcav = `\n🐎 *Cavalos ↴*`;
                for (c = 0; c < cavalosrpg[AC].cavalos.length; c++) {
                  if (cavalosrpg[AC].cavalos[c].sela == true) {
                    selasasah = `✅`;
                  } else {
                    selasasah = `❌`;
                  }
                  if (cavalosrpg[AC].cavalos[c].dor == true) {
                    dorsasah = `✅`;
                  } else {
                    dorsasah = `❌`;
                  }
                  if (cavalosrpg[AC].cavalos[c].fratura == true) {
                    fratsasah = `✅`;
                  } else {
                    fratsasah = `❌`;
                  }
                  TTCV =
                    (Number(cavalosrpg[AC].cavalos[c].viccav) /
                      Number(
                        Number(cavalosrpg[AC].cavalos[c].viccav) +
                          Number(cavalosrpg[AC].cavalos[c].dercav)
                      )) *
                    100;
                  if (Number(TTCV) > 0) {
                    PVCV = TTCV;
                  } else {
                    PVCV = 0;
                  }
                  countcav += `\n» ${Number(c) + 1} « Nome Do Cavalo: *${
                    cavalosrpg[AC].cavalos[c].nomedocavalo
                  }*\n• Velocidade: *${
                    Number(cavalosrpg[AC].cavalos[c].tipo) + 1
                  }x*\n• Sela: *${selasasah}*\n• Doente *${dorsasah}*\n• Fraturado: *${fratsasah}*\n• Vitórias: *${
                    cavalosrpg[AC].cavalos[c].viccav
                  }*\n• Percentual de Ganhos: *${Number(PVCV).toFixed(
                    1
                  )}%*\n• Apostas: *R$ ${Number(
                    cavalosrpg[AC].cavalos[c].contdin
                  ).toFixed(2)}*\n• Ganhos: *R$ ${Number(
                    cavalosrpg[AC].cavalos[c].lucdin
                  ).toFixed(2)}*\n`;
                }
              }
              txt = `👤 Nome: *${miwarpg[AB].nome}*\n💯 Level do Estábulo: *${
                cavalosrpg[AC].level
              }*\n📐 Tamanho Do Estábulo: ${
                Number(cavalosrpg[AC].level) * 5
              } m²*\n🧮 Quantidade De Cavalos: *${
                cavalosrpg[AC].cavalos.length
              }*\n🔔 Cavalo Selecionado: *${
                cavalosrpg[AC].setcav
              }*\n${countcav}`;
              miwa.sendMessage(
                from,
                {
                  image: {
                    url: `https://telegra.ph/file/c8656d473c9ea2b784efb.jpg`,
                  },
                  caption: txt,
                },
                { quoted: info }
              );
              break;

            case "setcavalo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(cavalosrpg).includes(sender))
                return reply(
                  `Você precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`
                );
              AC = cavalosrpg.map((a) => a.id).indexOf(sender);
              if (!q)
                return reply(`Diga o nome de um dos cavalos presentes no seu estábulo...
Ex: ${prefix + command} Patolino`);
              if (
                !JSON.stringify(cavalosrpg[AC].cavalos).includes(
                  q.toLowerCase()
                )
              )
                return reply(
                  `Este cavalo não consta eu seus registros... Use o comando ${prefix}estabulo, e verifique quais cavalos você tem 🐴`
                );
              cavalosrpg[AC].setcav = q.toLowerCase();
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/cavalosrpg.json",
                JSON.stringify(cavalosrpg)
              );
              reply(`Cavalo definido com sucesso...`);
              break;

            case "upcavalo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!MiwaCity)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(cavalosrpg).includes(sender))
                return reply(
                  `Você precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`
                );
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AC = cavalosrpg.map((a) => a.id).indexOf(sender);
              if (Number(cavalosrpg[AC].level) < 4) {
                AT = Number(cavalosrpg[AC].level) * 200;
                if (Number(miwarpg[AB].money) < Number(AT))
                  return reply(
                    `Você não saldo suficiente para upar seu estábulo...`
                  );
                LC = cavalosrpg[AC].level;
                cavalosrpg[AC].level = Number(LC) + 1;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/cavalosrpg.json",
                  JSON.stringify(cavalosrpg)
                );
                MC = miwarpg[AB].money;
                miwarpg[AB].money = Number(MC) - Number(AT);
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                reply(
                  ` Agrademos a confiança na *Black Construction...* R$ ${Number(
                    AT
                  ).toFixed(
                    2
                  )} foram investidos, e seu estábulo está no level ${
                    cavalosrpg[AC].level
                  } 🐴`
                );
              } else {
                reply(`Seu estábulo já alcançou o tamanho máximo...`);
              }
              break;

            case "comprarcavalo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!MiwaCity)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(cavalosrpg).includes(sender))
                return reply(
                  `Você precisa comprar um estábulo primeiro... Consulte a ${prefix}lojadecavalos`
                );
              var [cavnmr, cavnome] = q.split(`/`);
              if (!cavnmr) return reply(`Escolha um cavalo...`);
              if (!cavnome)
                return reply(
                  `Agora dê um nome para seu cavalo... Ex: ${
                    prefix + command
                  } ${q}/Michael`
                );
              if (Number(cavnome.length) > 20)
                return reply(`Este nome é muito grande...`);
              if (
                Number(cavnmr) === 1 ||
                Number(cavnmr) === 2 ||
                Number(cavnmr) === 3 ||
                Number(cavnmr) === 4
              ) {
                AB = miwarpg.map((i) => i.id).indexOf(sender);
                AC = cavalosrpg.map((a) => a.id).indexOf(sender);
                MCV1 = Number(cavnmr) - 1;
                MCV2 = Number(MCV1) * 500;
                MCV3 = Number(MCV2) + 500;
                if (Number(miwarpg[AB].money) < Number(MCV3))
                  return reply(
                    `Você não saldo suficiente para comprar este cavalo...`
                  );
                if (JSON.stringify(cavalosrpg[AC].cavalos).includes(cavnome))
                  return reply(
                    `Você já tem um cavalo com esse nome... Pfvr, escolha outro nome 🐴`
                  );
                if (
                  Number(cavalosrpg[AC].cavalos.length) ==
                  Number(cavalosrpg[AC].level)
                )
                  return reply(
                    `Você atingiu o número máximo de cavalos no estábulo... Caso queira aumentar o tamanho do estábulo, use ${prefix}upcavalo`
                  );
                cavalosrpg[AC].cavalos.push({
                  nomedocavalo: cavnome.toLowerCase(),
                  tipo: Number(cavnmr) - 1,
                  sela: false,
                  dor: false,
                  fratura: false,
                  viccav: 0,
                  dercav: 0,
                  contdin: 0,
                  lucdin: 0,
                });
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/cavalosrpg.json",
                  JSON.stringify(cavalosrpg)
                );
                miwarpg[AB].money -= Number(MCV3);
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                reply(
                  `Parabéns pela compra do cavalo... Espero que faça bom proveito com ele 🐴`
                );
              } else {
                reply(`Esse cavalo não está disponível para compra...`);
              }
              break;

            case "vendercavalo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!MiwaCity)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(cavalosrpg).includes(sender))
                return reply(
                  `Você precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`
                );
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AC = cavalosrpg.map((a) => a.id).indexOf(sender);
              AD = cavalosrpg[AC].cavalos
                .map((b) => b.nomedocavalo)
                .indexOf(cavalosrpg[AC].setcav);
              if (Number(cavalosrpg[AC].cavalos.length) <= 0)
                return reply(
                  `Você não possui cavalos... Acho bom comprar um 🐴`
                );
              if (
                !JSON.stringify(cavalosrpg[AC].cavalos).includes(
                  cavalosrpg[AC].setcav
                )
              )
                return reply(
                  `Você precisa definir o cavalo que irá vender... Use o comando ${prefix}setcavalo`
                );
              if (cavalosrpg[AC].cavalos[AD].sela == true) {
                HCS = 100;
              } else {
                HCS = 0;
              }
              if (cavalosrpg[AC].cavalos[AD].dor == true) {
                HCD = 50;
              } else {
                HCD = 0;
              }
              if (cavalosrpg[AC].cavalos[AD].fratura == true) {
                HCF = 125;
              } else {
                HCF = 0;
              }
              HCV =
                Number(
                  Number(Number(cavalosrpg[AC].cavalos[AD].tipo) + 1) * 250
                ) +
                Number(HCS) -
                Number(HCD) -
                Number(HCF) +
                Number(cavalosrpg[AC].cavalos[AD].viccav);
              MB = miwarpg[AB].money;
              miwarpg[AB].money = Number(MB) + Number(HCV);
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              cavalosrpg[AC].cavalos.splice(AD, 1);
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/cavalosrpg.json",
                JSON.stringify(cavalosrpg)
              );
              reply(
                `Seu cavalo ficou avaliado em R$ ${Number(HCV).toFixed(
                  2
                )} 🐴📈 - Parabéns pela venda...`
              );
              break;

            case "comprarsela":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!MiwaCity)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(cavalosrpg).includes(sender))
                return reply(
                  `Você precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`
                );
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AC = cavalosrpg.map((a) => a.id).indexOf(sender);
              AD = cavalosrpg[AC].cavalos
                .map((b) => b.nomedocavalo)
                .indexOf(cavalosrpg[AC].setcav);
              if (Number(cavalosrpg[AC].cavalos.length) <= 0)
                return reply(
                  `Você não possui cavalos... Acho bom comprar um cavalo!🐴`
                );
              if (
                !JSON.stringify(cavalosrpg[AC].cavalos).includes(
                  cavalosrpg[AC].setcav
                )
              )
                return reply(
                  `Você precisa definir o cavalo que irá correr... Use o comando ${prefix}setcavalo`
                );
              if (cavalosrpg[AC].cavalos[AD].sela == true)
                return reply(`Você já possui uma sela neste cavalo...`);
              if (Number(miwarpg[AB].money) < 200)
                return reply(
                  `Você não tem saldo suficiente para efetuar essa compra...`
                );
              cavalosrpg[AC].cavalos[AD].sela = true;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/cavalosrpg.json",
                JSON.stringify(cavalosrpg)
              );
              MC = miwarpg[AB].money;
              miwarpg[AB].money = Number(MC) - 200;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `Uma sela foi comprada para o seu alazão com sucesso... 🐴`
              );
              break;

            case "cdcv3":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!MiwaCity)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(cavalosrpg).includes(sender))
                return reply(
                  `Você precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`
                );
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AC = cavalosrpg.map((a) => a.id).indexOf(sender);
              AD = cavalosrpg[AC].cavalos
                .map((b) => b.nomedocavalo)
                .indexOf(cavalosrpg[AC].setcav);
              if (Number(cavalosrpg[AC].cavalos.length) <= 0)
                return reply(
                  `Você não possui cavalos... Acho bom comprar um 🐴`
                );
              if (
                !JSON.stringify(cavalosrpg[AC].cavalos).includes(
                  cavalosrpg[AC].setcav
                )
              )
                return reply(
                  `Você precisa definir o cavalo que irá correr... Use o comando ${prefix}setcavalo`
                );
              if (cavalosrpg[AC].cavalos[AD].dor == false)
                return reply(`Seu cavalo não está doente...`);
              if (Number(miwarpg[AB].money) < 100)
                return reply(
                  `Você não tem saldo suficiente para efetuar essa compra...`
                );
              cavalosrpg[AC].cavalos[AD].dor = false;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/cavalosrpg.json",
                JSON.stringify(cavalosrpg)
              );
              MC = miwarpg[AB].money;
              miwarpg[AB].money = Number(MC) - 100;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `Seu cavalo recebeu uma injeção poderosa, e está pronto para correr dnv... 🐴`
              );
              break;

            case "atadura":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(cavalosrpg).includes(sender))
                return reply(
                  `Você precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`
                );
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AC = cavalosrpg.map((a) => a.id).indexOf(sender);
              AD = cavalosrpg[AC].cavalos
                .map((b) => b.nomedocavalo)
                .indexOf(cavalosrpg[AC].setcav);
              if (Number(cavalosrpg[AC].cavalos.length) <= 0)
                return reply(
                  `Você não possui cavalos... Acho bom comprar um 🐴`
                );
              if (
                !JSON.stringify(cavalosrpg[AC].cavalos).includes(
                  cavalosrpg[AC].setcav
                )
              )
                return reply(
                  `Você precisa definir o cavalo que irá correr... Use o comando ${prefix}setcavalo`
                );
              if (cavalosrpg[AC].cavalos[AD].fratura == false)
                return reply(`Seu cavalo não está fraturado...`);
              if (Number(miwarpg[AB].money) < 250)
                return reply(
                  `Você não tem saldo suficiente para efetuar essa compra...`
                );
              cavalosrpg[AC].cavalos[AD].fratura = false;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/cavalosrpg.json",
                JSON.stringify(cavalosrpg)
              );
              MC = miwarpg[AB].money;
              miwarpg[AB].money = Number(MC) - 250;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `Atadura colocada com sucesso... Agora deixe seu bichinho descansar 🐴`
              );
              break;

              case "cavalo":
                case "cavalos":
                  if (!isGroup) return reply(mess.onlyGroup());
                  if (!isMiwaCityOFF)
                    return reply(
                      `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                    );
                  if (!isModobn) return reply(mess.warningMB(prefix));
                  if (!JSON.stringify(miwarpg).includes(sender))
                    return reply(
                      `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                    );
                  if (!JSON.stringify(cavalosrpg).includes(sender))
                    return reply(
                      `Você precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`
                    );
                  horacav = moment.tz("America/Sao_Paulo").format("HH");
                  diacav = moment.tz("America/Sao_Paulo").format("DD");
                  mmcav = moment.tz("America/Sao_Paulo").format("MM");
                  AB = miwarpg.map((i) => i.id).indexOf(sender);
                  AC = cavalosrpg.map((a) => a.id).indexOf(sender);
                  AD = cavalosrpg[AC].cavalos
                    .map((b) => b.nomedocavalo)
                    .indexOf(cavalosrpg[AC].setcav);
                  if (Number(args[0]) > Number(miwarpg[AB].money))
                    return reply(
                      `Você não possui saldo suficiente para efetuar essa aposta...`
                    );
                  if (Number(cavalosrpg[AC].cavalos.length) <= 0)
                    return reply(
                      `Você não possui cavalos... Acho bom comprar um 🐴`
                    );
                  if (
                    !JSON.stringify(cavalosrpg[AC].cavalos).includes(
                      cavalosrpg[AC].setcav
                    )
                  )
                    return reply(
                      `Você precisa definir o cavalo que irá correr... Use o comando ${prefix}setcavalo`
                    );
                  if (cavalosrpg[AC].cavalos[AD].sela == false)
                    return reply(
                      `Você precisa comprar uma sela para seu alazão...`
                    );
                  if (cavalosrpg[AC].cavalos[AD].dor == true)
                    return reply(
                      `Seu cavalo está doente... Compre uma _"cdcv3"_ na loja de CAVALOS para ele voltar a correr 💉`
                    );
                  if (cavalosrpg[AC].cavalos[AD].fratura == true)
                    return reply(
                      `Seu cavalo está com a pata torcida... Vá comprar uma atadura para tratar isso 🐴`
                    );
                  //passar eo limite por hora...
                  if (
                    Number(cavalosrpg[AC].corridaL) === 0 &&
                    Number(cavalosrpg[AC].corridaH) === Number(horacav) &&
                    Number(cavalosrpg[AC].corridaD) === Number(diacav) &&
                    Number(cavalosrpg[AC].corridaM) === Number(mmcav)
                  )
                    return reply(
                      `Seu cavalo parece cansado... Pfvr, volte mais tarde 🐴`
                    );
                  //passar de uma hora pra outra...
                  if (
                    Number(horacav) > Number(cavalosrpg[AC].corridaH) &&
                    Number(cavalosrpg[AC].corridaD) === Number(diacav) &&
                    Number(cavalosrpg[AC].corridaM) === Number(mmcav)
                  ) {
                    cavalosrpg[AC].corridaL = 20;
                    cavalosrpg[AC].corridaH = horacav;
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/cavalosrpg.json",
                      JSON.stringify(cavalosrpg)
                    );
                    reply(`Seu cavalo parece ótimo... Você já pode correr dnv 🐴`);
                  }
                  //passar de um dia pro outro...
                  if (
                    Number(diacav) > Number(cavalosrpg[AC].corridaD) &&
                    Number(cavalosrpg[AC].corridaM) === Number(mmcav)
                  ) {
                    cavalosrpg[AC].corridaL = 20;
                    cavalosrpg[AC].corridaH = horacav;
                    cavalosrpg[AC].corridaD = diacav;
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/cavalosrpg.json",
                      JSON.stringify(cavalosrpg)
                    );
                    reply(
                      `${tempo} ${miwarpg[AB].nome}, seu cavalo está pronto para correr ?`
                    );
                  }
                  //passar de um mês pro outro...
                  if (Number(mmcav) > Number(cavalosrpg[AC].corridaM)) {
                    cavalosrpg[AC].corridaL = 20;
                    cavalosrpg[AC].corridaH = horacav;
                    cavalosrpg[AC].corridaD = diacav;
                    cavalosrpg[AC].corridaM = mmcav;
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/cavalosrpg.json",
                      JSON.stringify(cavalosrpg)
                    );
                    reply(`Um novo mês de vitórias se inicia...`);
                  }
                  //aposta liberada...
                  if (
                    Number(cavalosrpg[AC].corridaL) > 0 &&
                    Number(cavalosrpg[AC].corridaH) === Number(horacav)
                  ) {
                    if (!q)
                      return reply(
                        `A corrida já vai começar... Faça logo a sua aposta`
                      );
                    if (!Number(args[0]))
                      return reply(`${args[0]} não é número...`);
                    if (Number(args[0]) < 100)
                      return reply(
                        `Nossas apostas são de alto nível aqui... Você não pode apostar menos de R$ 100.00`
                      );
                    if (Number(args[0]) > 10000)
                      return reply(
                        `Nossas apostas são de alto nível aqui... Mas você não pode apostar mais do que R$ 10000.00`
                      );
                    MT = Math.floor(Math.random() * 40);
                    if (Number(MT) === 0) {
                      GB = cavalosrpg.map((m) => m.id).indexOf(sender);
                      GF = cavalosrpg[GB].cavalos
                        .map((n) => n.nomedocavalo)
                        .indexOf(cavalosrpg[GB].setcav);
                      cavalosrpg[AC].corridaL = 20;
                      cavalosrpg[AC].corridaH = horacav;
                      cavalosrpg[AC].corridaD = diacav;
                      cavalosrpg[AC].corridaM = mmcav;
                      cavalosrpg[GB].cavalos.splice(GF, 1);
                      fs.writeFileSync(
                        "./database/usuarios/SystemRPG/cavalosrpg.json",
                        JSON.stringify(cavalosrpg)
                      );
                      acidente = [
                        `Seu cavalo se acidentou na pista e morreu... Meus sentimentos ao alazão 🖤`,
                        `Seu cavalo adoeceu gravemente antes da corrida, e morreu... Meus pêsames pelo seu amigo 🖤`,
                      ];
                      reply(acidente[Math.floor(Math.random() * acidente.length)]);
                    }
                    if (Number(MT) === 1) {
                      cavalosrpg[AC].cavalos[AD].dor = true;
                      fs.writeFileSync(
                        "./database/usuarios/SystemRPG/cavalosrpg.json",
                        JSON.stringify(cavalosrpg)
                      );
                      reply(
                        `Seu cavalo adoeceu, mas felizmente, essa doença não é para a morte... Vá comprar a _"cdcv3",_ uma vacina poderosa que vai levantar o seu alazão na hora 💉`
                      );
                    }
                    if (Number(MT) === 2) {
                      cavalosrpg[AC].cavalos[AD].fratura = true;
                      fs.writeFileSync(
                        "./database/usuarios/SystemRPG/cavalosrpg.json",
                        JSON.stringify(cavalosrpg)
                      );
                      reply(
                        `🥹 Seu alazão fraturou a patinha enquanto corria... Vá comprar uma atadura na ${prefix}lojadecavalos`
                      );
                    }
                    if (Number(MT) > 2) {
                      cavt1 = SoDono ? 1 : Math.floor(Math.random() * 19) + 1;
                      cavt2 =
                        Number(cavt1) - Number(cavalosrpg[AC].cavalos[AD].tipo);
                      if (Number(cavt2) < 1) {
                        var cav = 1;
                      } else {
                        var cav = cavt2;
                      }
                      //primeiro lugar...
                      if (Number(cav) === 1) {
                        cav2 = Number(args[0]) + Number(args[0]) / 2;
                        DCV = cavalosrpg[AC].cavalos
                          .map((h) => h.nomedocavalo)
                          .indexOf(cavalosrpg[AC].setcav);
                        MC = miwarpg[AB].money;
                        miwarpg[AB].money = Number(MC) + Number(cav2);
                        fs.writeFileSync(
                          "./database/usuarios/SystemRPG/miwarpg.json",
                          JSON.stringify(miwarpg)
                        );
                        if (Number(cavalosrpg[AC].countDc) > 0) {
                          L1 = 1;
                        } else {
                          L1 = 0;
                        }
                        if (Number(cavalosrpg[AC].cavalos[DCV].dercav) > 0) {
                          LC1 = 1;
                        } else {
                          LC1 = 0;
                        }
                        LM = cavalosrpg[AC].corridaL;
                        CV = cavalosrpg[AC].countVc;
                        CCD = cavalosrpg[AC].countDc;
                        CVC = cavalosrpg[AC].capitalVc;
                        CVCS = cavalosrpg[AC].cavalos[DCV].viccav;
                        CDCS = cavalosrpg[AC].cavalos[DCV].dercav;
                        DTCS = cavalosrpg[AC].cavalos[DCV].contdin;
                        DVCS = cavalosrpg[AC].cavalos[DCV].lucdin;
                        cavalosrpg[AC].corridaL = Number(LM) - 1;
                        cavalosrpg[AC].countVc = Number(CV) + 1;
                        cavalosrpg[AC].countDc = Number(CCD) - Number(L1);
                        cavalosrpg[AC].capitalVc = Number(CVC) + Number(cav2);
                        cavalosrpg[AC].cavalos[DCV].viccav = Number(CVCS) + 1;
                        cavalosrpg[AC].cavalos[DCV].dercav =
                          Number(CDCS) - Number(LC1);
                        cavalosrpg[AC].cavalos[DCV].contdin =
                          Number(DTCS) + Number(args[0]);
                        cavalosrpg[AC].cavalos[DCV].lucdin =
                          Number(DVCS) + Number(cav2);
                        fs.writeFileSync(
                          "./database/usuarios/SystemRPG/cavalosrpg.json",
                          JSON.stringify(cavalosrpg)
                        );
                        reply(
                          `🐎 A corrida terminou, e seu cavalo chegou em ${cav}º lugar... Você ganhou R$ ${Number(
                            cav2
                          ).toFixed(2)}`
                        );
                      }
                      //segundo lugar...
                      if (Number(cav) === 2) {
                        DCV = cavalosrpg[AC].cavalos
                          .map((h) => h.nomedocavalo)
                          .indexOf(cavalosrpg[AC].setcav);
                        cav2 = args[0];
                        MC = miwarpg[AB].money;
                        miwarpg[AB].money = Number(MC) + Number(cav2);
                        fs.writeFileSync(
                          "./database/usuarios/SystemRPG/miwarpg.json",
                          JSON.stringify(miwarpg)
                        );
                        if (Number(cavalosrpg[AC].countDc) > 0) {
                          L2 = 1;
                        } else {
                          L2 = 0;
                        }
                        if (Number(cavalosrpg[AC].cavalos[DCV].dercav) > 0) {
                          LC2 = 1;
                        } else {
                          LC2 = 0;
                        }
                        LM = cavalosrpg[AC].corridaL;
                        CV = cavalosrpg[AC].countVc;
                        CCD = cavalosrpg[AC].countDc;
                        CVC = cavalosrpg[AC].capitalVc;
                        CVCS = cavalosrpg[AC].cavalos[DCV].viccav;
                        CDCS = cavalosrpg[AC].cavalos[DCV].dercav;
                        DTCS = cavalosrpg[AC].cavalos[DCV].contdin;
                        DVCS = cavalosrpg[AC].cavalos[DCV].lucdin;
                        cavalosrpg[AC].corridaL = Number(LM) - 1;
                        cavalosrpg[AC].countVc = Number(CV) + 1;
                        cavalosrpg[AC].countDc = Number(CCD) - Number(L2);
                        cavalosrpg[AC].capitalVc = Number(CVC) + Number(cav2);
                        cavalosrpg[AC].cavalos[DCV].viccav = Number(CVCS) + 1;
                        cavalosrpg[AC].cavalos[DCV].dercav =
                          Number(CDCS) - Number(LC2);
                        cavalosrpg[AC].cavalos[DCV].contdin =
                          Number(DTCS) + Number(args[0]);
                        cavalosrpg[AC].cavalos[DCV].lucdin =
                          Number(DVCS) + Number(cav2);
                        fs.writeFileSync(
                          "./database/usuarios/SystemRPG/cavalosrpg.json",
                          JSON.stringify(cavalosrpg)
                        );
                        reply(
                          `🐎 A corrida terminou, e seu cavalo chegou em ${cav}º lugar... Você ganhou R$ ${Number(
                            cav2
                          ).toFixed(2)}`
                        );
                      }
                      //terceiro lugar...
                      if (Number(cav) === 3) {
                        DCV = cavalosrpg[AC].cavalos
                          .map((h) => h.nomedocavalo)
                          .indexOf(cavalosrpg[AC].setcav);
                        cav2 = Number(args[0]) / 2;
                        MC = miwarpg[AB].money;
                        miwarpg[AB].money = Number(MC) + Number(cav2);
                        fs.writeFileSync(
                          "./database/usuarios/SystemRPG/miwarpg.json",
                          JSON.stringify(miwarpg)
                        );
                        if (Number(cavalosrpg[AC].countDc) > 0) {
                          L3 = 1;
                        } else {
                          L3 = 0;
                        }
                        if (Number(cavalosrpg[AC].cavalos[DCV].dercav) > 0) {
                          LC3 = 1;
                        } else {
                          LC3 = 0;
                        }
                        LM = cavalosrpg[AC].corridaL;
                        CV = cavalosrpg[AC].countVc;
                        CCD = cavalosrpg[AC].countDc;
                        CVC = cavalosrpg[AC].capitalVc;
                        CVCS = cavalosrpg[AC].cavalos[DCV].viccav;
                        CDCS = cavalosrpg[AC].cavalos[DCV].dercav;
                        DTCS = cavalosrpg[AC].cavalos[DCV].contdin;
                        DVCS = cavalosrpg[AC].cavalos[DCV].lucdin;
                        cavalosrpg[AC].corridaL = Number(LM) - 1;
                        cavalosrpg[AC].countVc = Number(CV) + 1;
                        cavalosrpg[AC].countDc = Number(CCD) - Number(L3);
                        cavalosrpg[AC].capitalVc = Number(CVC) + Number(cav2);
                        cavalosrpg[AC].cavalos[DCV].viccav = Number(CVCS) + 1;
                        cavalosrpg[AC].cavalos[DCV].dercav =
                          Number(CDCS) - Number(LC3);
                        cavalosrpg[AC].cavalos[DCV].contdin =
                          Number(DTCS) + Number(args[0]);
                        cavalosrpg[AC].cavalos[DCV].lucdin =
                          Number(DVCS) + Number(cav2);
                        fs.writeFileSync(
                          "./database/usuarios/SystemRPG/cavalosrpg.json",
                          JSON.stringify(cavalosrpg)
                        );
                        reply(
                          `🐎 A corrida terminou, e seu cavalo chegou em ${cav}º lugar... Você ganhou R$ ${Number(
                            cav2
                          ).toFixed(2)}`
                        );
                      }
                      //outros lugares...
                      if (Number(cav) > 3) {
                        DCV = cavalosrpg[AC].cavalos
                          .map((h) => h.nomedocavalo)
                          .indexOf(cavalosrpg[AC].setcav);
                        MC = miwarpg[AB].money;
                        miwarpg[AB].money = Number(MC) - Number(args[0]);
                        fs.writeFileSync(
                          "./database/usuarios/SystemRPG/miwarpg.json",
                          JSON.stringify(miwarpg)
                        );
                        LM = cavalosrpg[AC].corridaL;
                        CCD = cavalosrpg[AC].countDc;
                        CDC = cavalosrpg[AC].capitalDc;
                        CDCS = cavalosrpg[AC].cavalos[DCV].dercav;
                        DTCS = cavalosrpg[AC].cavalos[DCV].contdin;
                        cavalosrpg[AC].corridaL = Number(LM) - 1;
                        cavalosrpg[AC].countDc = Number(CCD) + 1;
                        cavalosrpg[AC].capitalDc = Number(CDC) + Number(args[0]);
                        cavalosrpg[AC].cavalos[DCV].dercav = Number(CDCS) + 1;
                        cavalosrpg[AC].cavalos[DCV].contdin =
                          Number(DTCS) + Number(args[0]);
                        fs.writeFileSync(
                          "./database/usuarios/SystemRPG/cavalosrpg.json",
                          JSON.stringify(cavalosrpg)
                        );
                        reply(
                          `🐎 A corrida terminou, e seu cavalo chegou em ${cav}º lugar... Você perdeu R$ ${Number(
                            args[0]
                          ).toFixed(2)}`
                        );
                      }
                    }
                  }
                  break;
    
            case "1xbcbet":
            case "1xbcbets":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!isModobn) return reply(mess.warningMB(prefix));
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!q)
                return reply(
                  `🛒 **Base da Ets* Bets* é o novo sistema de apostas... Invista uma quantia entre R$ 100.00 e R$ 10000.00, e veja seu dinheiro rodar.`
                );
              if (!Number(args[0]))
                return reply(`${args[0]} não é número... 😿`);
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              minuto3 = moment.tz("America/Sao_Paulo").format("mm");
              if (Number(args[0]) > Number(miwarpg[AB].money))
                return reply(
                  `Você não possui dinheiro suficiente para investir`
                );
              if (Number(args[0]) < 100)
                return reply(`Você deve investir no mínimo R$ 100.00`);
              if (Number(args[0]) > 10000)
                return reply(`Nossa plataforma não paga mais que R$ 10000.00`);
              if (!JSON.stringify(bcbet).includes(sender)) {
                bcbet.push({ id: sender, minuto: minuto3 });
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/1xbcbet.json",
                  JSON.stringify(bcbet)
                );
              }
              AC = bcbet.map((i) => i.id).indexOf(sender);
              if (Number(bcbet[AC].minuto) !== Number(minuto3)) {
                bcbet[AC].minuto = minuto3;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                MN = Math.floor(Math.random() * 100);
                reply(`📊 Analisando os gráficos...`);
                if (Number(MN) > 15) {
                  PG = [
                    "na construção de um estádio de futebol, mas a construção desabou...",
                    "na bolsa de valores, mas a Bovespa caiu drasticamente...",
                    "num leilão de carros, mas os carros não foram leiloados...",
                    "num leilão de carros, mas você sofreu um golpe...",
                    "no seu time de futebol, mas o seu time perdeu o jogo...",
                    "numa corrida, mas o carro bateu...",
                    "em uma luta de UFC, e seu lutador sofreu um nocaute...",
                  ];
                  txt = `${II}Sab Black's Bet${II} > A sua casa de apostas online!\n—\n[🔴] - As estatísticas não são muito favoráveis! Você investiu ${
                    PG[Math.floor(Math.random() * PG.length)]
                  }\n• Você perdeu, então sofreu uma perda de *R$ ${Number(
                    args[0]
                  ).toFixed(2)}* em dinheiro.`;
                  img = `https://telegra.ph/file/747133ed87f267ca8d35f.jpg`;
                  MD = miwarpg[AB].money;
                  miwarpg[AB].money = Number(MD) - Number(args[0]);
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/miwarpg.json",
                    JSON.stringify(miwarpg)
                  );
                } else {
                  GG = [
                    "na construção de um estádio de futebol, e a construção foi bem sucedida...",
                    "na bolsa de valores, e a Bovespa subiu exponencialmente...",
                    "num leilão de carros, e obteve grande lucro na venda dos mesmos...",
                    "no seu time de futebol, e o seu time venceu o jogo...",
                    "numa corrida, e o seu carro chegou em primeiro lugar...",
                    "em uma luta de UFC, e seu lutador derrubou o oponente facilmente...",
                  ];
                  VL1 = Math.floor(Math.random() * 9) + 1;
                  VL2 = Number(args[0]) * Number(VL1);
                  txt = `${II}Sab Black's Bet${II} > A sua casa de apostas online!\n—\n[🟢] - As estatísticas são positivas e muito boas por sinal! Você investiu ${
                    GG[Math.floor(Math.random() * GG.length)]
                  }\n• Você ganhou e recebeu como saldo: *R$ ${Number(
                    VL2
                  ).toFixed(2)}*`;
                  img = `https://telegra.ph/file/f600b52a9963c58900e5b.jpg`;
                  MD = miwarpg[AB].money;
                  miwarpg[AB].money = Number(MD) + Number(VL2);
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/miwarpg.json",
                    JSON.stringify(miwarpg)
                  );
                }
                setTimeout(() => {
                  miwa.sendMessage(
                    from,
                    { image: { url: img }, caption: txt },
                    { quoted: info }
                  );
                }, 2000);
              } else {
                reply(
                  `Aguarde *${
                    60 - Number(moment.tz("America/Sao_Paulo").format("ss"))
                  } seg.* para fazer novas apostas novamente.`
                );
              }
              break;

            case "resetscbet":
              if (!SoDono) return reply(mess.onlyOwner());
              for (i = 0; i < miwarpg.length; i++) {
                miwarpg[i].bcbet = true;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
              }
              reply(
                `Gráficos restaurados para todos os ${miwarpg.length} usuários do RPG`
              );
              break;

            case "comprargalinheiro":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (JSON.stringify(galosrpg).includes(sender))
                return reply(
                  `Você já possui um galinheiro... Consulte a ${prefix}lojadegalos para comprar galos e brigar com eles 🐔`
                );
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              if (Number(miwarpg[AB].money) < 500)
                return reply(
                  `Vc não possui dinheiro suficiente para efetuar essa compra...`
                );
              gaH = moment.tz("America/Sao_Paulo").format("HH");
              gaD = moment.tz("America/Sao_Paulo").format("DD");
              gaM = moment.tz("America/Sao_Paulo").format("MM");
              galosrpg.push({
                id: sender,
                level: 1,
                galinhas: 0,
                durabilidade: 5,
                ovos: 0,
                countVg: 0,
                countDg: 0,
                dinVg: 0,
                luckVg: 0,
                brigaL: 15,
                brigaH: gaH,
                brigaD: gaD,
                brigaM: gaM,
                galos: [],
              });
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/galosrpg.json",
                JSON.stringify(galosrpg)
              );
              MC = miwarpg[AB].money;
              miwarpg[AB].money = Number(MC) - 500;
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `🐔 Galinheiro comprado com sucesso... Consulte ${prefix}galinheiro`
              );
              break;

            case "comprargalo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!MiwaCity)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(galosrpg).includes(sender))
                return reply(`Você precisa comprar um galinheiro antes...`);
              if (!q)
                return reply(
                  `Defina a quantidade de galos que deseja comprar...`
                );
              if (!Number(args[0])) return reply(`${args[0]} não é número...`);
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AD = galosrpg.map((b) => b.id).indexOf(sender);
              if (
                Number(args[0]) === 1 ||
                Number(args[0]) === 6 ||
                Number(args[0]) === 12
              ) {
                if (
                  Number(Number(galosrpg[AD].galos.length) + Number(args[0])) >
                  Number(Number(galosrpg[AD].level) * 5)
                )
                  return reply(
                    `Não é possível comprar +${args[0]} ${
                      Number(args[0]) < 2 ? "galo" : "galos"
                    }, pois excede o limite de ${
                      Number(galosrpg[AD].level) * 5
                    } galos...\n• Caso queira aumentar o tamanho do galinheiro, use ${prefix}upgalo`
                  );
                if (Number(args[0]) === 1) {
                  if (Number(miwarpg[AB].money) < 100)
                    return reply(
                      `Vc não possui saldo suficiente para efetuar essa compra!`
                    );
                  galosrpg[AD].galos.push({ vida: 4, vigalo: 0, degalo: 0 });
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/galosrpg.json",
                    JSON.stringify(galosrpg)
                  );
                  MD = miwarpg[AB].money;
                  miwarpg[AB].money = Number(MD) - 100;
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/miwarpg.json",
                    JSON.stringify(miwarpg)
                  );
                  reply(`1 galo comprado com sucesso!`);
                }
                if (Number(args[0]) === 6) {
                  if (Number(miwarpg[AB].money) < 550)
                    return reply(
                      `Vc não possui saldo suficiente para efetuar essa compra...`
                    );
                  for (i = 0; i < 6; i++) {
                    galosrpg[AD].galos.push({ vida: 4, vigalo: 0, degalo: 0 });
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/galosrpg.json",
                      JSON.stringify(galosrpg)
                    );
                  }
                  MD = miwarpg[AB].money;
                  miwarpg[AB].money = Number(MD) - 550;
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/miwarpg.json",
                    JSON.stringify(miwarpg)
                  );
                  reply(`6 galos comprado com sucesso.`);
                }
                if (Number(args[0]) === 12) {
                  if (Number(miwarpg[AB].money) < 1000)
                    return reply(
                      "Vc não possui saldo suficiente para efetuar essa compra..."
                    );
                  for (i = 0; i < 12; i++) {
                    galosrpg[AD].galos.push({ vida: 4, vigalo: 0, degalo: 0 });
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/galosrpg.json",
                      JSON.stringify(galosrpg)
                    );
                  }
                  MD = miwarpg[AB].money;
                  miwarpg[AB].money = Number(MD) - 1000;
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/miwarpg.json",
                    JSON.stringify(miwarpg)
                  );
                  reply(`12 galos comprado com sucesso`);
                }
              } else {
                reply(`Não é possível comprar essa quantidade de galos...`);
              }
              break;

            case "vendergalo":
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(galosrpg).includes(sender))
                return reply(`Você precisa comprar um galo antes...`);
              if (!q)
                return reply(`Defina a quantidade de galos que deseja vender... Ex:
${prefix + command} 3`);
              if (!Number(args[0])) return reply(`${args[0]} não é número...`);
              if (Number(args[0]) < 1)
                return reply(`Não é possível vender menos que um galo...`);
              if (q.includes(".")) return reply(`Não pode números decimais...`);
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AD = galosrpg.map((b) => b.id).indexOf(sender);
              if (Number(args[0]) > Number(galosrpg[AD].galos.length))
                return reply(
                  `Não é possível vender um número maior do que a quantidade de galos em seu galinheiro...`
                );
              if (Number(galosrpg[AD].galos.length) === 0)
                return reply(`Você precisa comprar um galo antes...`);
              for (i = 0; i < Number(args[0]); i++) {
                galosrpg[AD].galos.splice(i, 1);
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/galosrpg.json",
                  JSON.stringify(galosrpg)
                );
              }
              MD = miwarpg[AB].money;
              miwarpg[AB].money = Number(MD) + Number(Number(args[0]) * 50);
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `${args[0]} galo${Number(args[0]) > 1 ? "s" : ""} vendido${
                  Number(args[0]) > 1 ? "s" : ""
                } com sucesso, avaliado${
                  Number(args[0]) > 1 ? "s" : ""
                } em R$ ${Number(Number(args[0]) * 50).toFixed(2)}`
              );
              break;

            case "comprargalinha":
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(galosrpg).includes(sender))
                return reply(`Você precisa comprar um galinheiro antes...`);
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AD = galosrpg.map((b) => b.id).indexOf(sender);
              if (!q)
                return reply(
                  "Coloque a quantidade de galinhas que deseja comprar..."
                );
              if (!Number(args[0])) return reply(`${args[0]} não é número...`);
              if (Number(args[0]) < 1)
                return reply(`Não é possível comprar menos que uma galinha...`);
              if (q.includes(".")) return reply(`Não pode números decimais...`);
              if (Number(args[0]) > Number(Number(galosrpg[AD].level) * 2))
                return reply(
                  `Não é possível comprar +${
                    args[0]
                  } galinhas, pois excede o limite de ${
                    Number(galosrpg[AD].level) * 2
                  } galinhas em seu galinheiro...\nCaso queira aumentar o tamanho do seu galinheiro, use o comando ${prefix}upgalo`
                );
              if (Number(miwarpg[AB].money) < Number(Number(args[0]) * 100))
                return reply(
                  `${args[0]} galinha${Number(args[0]) > 1 ? "s" : ""} ${
                    Number(args[0]) > 1 ? "irão" : "irá"
                  } custar R$ ${Number(Number(args[0]) * 100).toFixed(
                    2
                  )}, e este valor excede o saldo monetário em sua conta...`
                );
              GG = galosrpg[AD].galinhas;
              galosrpg[AD].galinhas = Number(GG) + Number(args[0]);
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/galosrpg.json",
                JSON.stringify(galosrpg)
              );
              MD = miwarpg[AB].money;
              miwarpg[AB].money = Number(MD) - Number(Number(args[0]) * 100);
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `${args[0]} galinha${Number(args[0]) > 1 ? "s" : ""} comprada${
                  Number(args[0]) > 1 ? "s" : ""
                } com sucesso...`
              );
              break;

            case "vendergalinha":
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(galosrpg).includes(sender))
                return reply(`Você precisa comprar uma galinha antes...`);
              if (!q)
                return reply(`Defina a quantidade de galinhas que deseja vender... Ex:
${prefix + command} 3`);
              if (!Number(args[0])) return reply(`${args[0]} não é número...`);
              if (Number(args[0]) < 1)
                return reply(`Não é possível vender menos que uma galinha...`);
              if (q.includes(".")) return reply(`Não pode números decimais...`);
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AD = galosrpg.map((b) => b.id).indexOf(sender);
              if (Number(args[0]) > Number(galosrpg[AD].galinhas))
                return reply(
                  `Não é possível vender um número maior do que a quantidade de galinhas em seu galinheiro...`
                );
              if (Number(galosrpg[AD].galinhas) === 0)
                return reply(`Você precisa comprar uma galinha antes...`);
              QG = galosrpg[AD].galinhas;
              galosrpg[AD].galinhas = Number(QG) - Number(args[0]);
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/galosrpg.json",
                JSON.stringify(galosrpg)
              );
              MD = miwarpg[AB].money;
              miwarpg[AB].money = Number(MD) + Number(Number(args[0]) * 50);
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
              reply(
                `${args[0]} galinha${Number(args[0]) > 1 ? "s" : ""} vendida${
                  Number(args[0]) > 1 ? "s" : ""
                } com sucesso, avaliada${
                  Number(args[0]) > 1 ? "s" : ""
                } em R$ ${Number(Number(args[0]) * 50).toFixed(2)}`
              );
              break;

            case "cruzargg":
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(galosrpg).includes(sender))
                return reply(`Você precisa comprar um galinheiro antes...`);
              AD = galosrpg.map((b) => b.id).indexOf(sender);
              if (Number(galosrpg[AD].galos.length) === 0)
                return reply(
                  "Você não possui galos...🐓 É necessário ao menos 1 galo para cruzar."
                );
              if (Number(galosrpg[AD].galinhas) === 0)
                return reply(
                  "Você não possui galinhas...🐔 É necessário ao menos 1 galinha para cruzar."
                );
              if (
                Number(galosrpg[AD].ovos) <
                Number(Number(galosrpg[AD].level * 2))
              ) {
                alecruz = Math.floor(Math.random() * 100);
                if (alecruz > 50) {
                  if (Number(galosrpg[AD].durabilidade) > 1) {
                    QD = galosrpg[AD].durabilidade;
                    galosrpg[AD].durabilidade = Number(QD) - 1;
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/galosrpg.json",
                      JSON.stringify(galosrpg)
                    );
                    resp = "Não houve sucesso no cruzamento das aves";
                  } else {
                    QG = galosrpg[AD].galinhas;
                    galosrpg[AD].galinhas = Number(QG) - 1;
                    galosrpg[AD].durabilidade = Number(galosrpg[AD].level);
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/galosrpg.json",
                      JSON.stringify(galosrpg)
                    );
                    resp = `Sua galinha não estava pronta para o cruzamento, e acabou morrendo...${
                      Number(galosrpg[AD].galinhas) > 0
                        ? `\nFelizmente, você ainda possui ${
                            galosrpg[AD].galinhas
                          } galinha${
                            Number(galosrpg[AD].galinhas) > 1 ? `s` : ``
                          } 🐔`
                        : ``
                    }`;
                  }
                } else {
                  if (Number(galosrpg[AD].durabilidade) > 1) {
                    QD = galosrpg[AD].durabilidade;
                    QO = galosrpg[AD].ovos;
                    galosrpg[AD].durabilidade = Number(QD) - 1;
                    galosrpg[AD].ovos = Number(QO) + 1;
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/galosrpg.json",
                      JSON.stringify(galosrpg)
                    );
                    resp = `Sucesso, seu cruzamento gerou 1 ovo...
Use ${prefix}chocarovo para tentar a sorte`;
                  } else {
                    QG = galosrpg[AD].galinhas;
                    QO = galosrpg[AD].ovos;
                    galosrpg[AD].galinhas = Number(QG) - 1;
                    galosrpg[AD].ovos = Number(QO) + 1;
                    galosrpg[AD].durabilidade = Number(galosrpg[AD].level);
                    fs.writeFileSync(
                      "./database/usuarios/SystemRPG/galosrpg.json",
                      JSON.stringify(galosrpg)
                    );
                    resp = `Sucesso, seu cruzamento gerou 1 ovo, mas a sua galinha morreu no processo...${
                      Number(galosrpg[AD].galinhas) > 0
                        ? `\nFelizmente, você ainda possui ${
                            galosrpg[AD].galinhas
                          } ${
                            Number(galosrpg[AD].galinhas) > 1
                              ? `${galosrpg[AD].galinhas} galinhas`
                              : `1 galinha`
                          }`
                        : ``
                    }`;
                  }
                }
                reply(`${resp}`);
              } else {
                reply(
                  `Você atingiu a quantidade máxima de ovos em seu galinheiro... Use ${prefix}chocarovo para choca-los`
                );
              }
              break;

            case "chocarovo":
            case "chocar":
            case "ovo":
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(galosrpg).includes(sender))
                return reply(`Você precisa comprar um galinheiro antes...`);
              AD = galosrpg.map((b) => b.id).indexOf(sender);
              if (Number(galosrpg[AD].ovos) <= 0)
                return reply("Você não possui ovos para chocar...");
              if (
                Number(galosrpg[AD].galos.length) >=
                Number(Number(galosrpg[AD].level) * 5)
              )
                return reply(
                  "Todos os seus slots já estão na quantidade máxima.."
                );
              aleovo = Math.floor(Math.random() * 100);
              if (aleovo > 40) {
                QO = galosrpg[AD].ovos;
                galosrpg[AD].ovos = Number(QO) - 1;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/galosrpg.json",
                  JSON.stringify(galosrpg)
                );
                reply("Sem sucesso ao tentar chocar o ovo!😿");
              } else {
                QO = galosrpg[AD].ovos;
                galosrpg[AD].ovos = Number(QO) - 1;
                galosrpg[AD].galos.push({ vida: 4, vigalo: 0, degalo: 0 });
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/galosrpg.json",
                  JSON.stringify(galosrpg)
                );
                reply(
                  "Sucesso, ovo chocado deu origem a +1 galo para o seu galinheiro 😸☝🏽"
                );
              }
              break;

            case "galinheiro":
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              setTimeout(() => {
                reagir(from, "🐔");
              }, 300);
              if (!JSON.stringify(galosrpg).includes(sender))
                return reply(`Você precisa comprar um galinheiro antes...`);
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AD = galosrpg.map((b) => b.id).indexOf(sender);
              totalG = galosrpg[AD].galos;
              let medvida = 0;
              let medvic = 0;
              let medder = 0;
              for (i = 0; i < totalG.length; i++) {
                medvida += totalG[i].vida;
                if (Number(totalG[i].vigalo) > 0) {
                  medvic += totalG[i].vigalo;
                }
                if (Number(totalG[i].degalo) > 0) {
                  medder += totalG[i].degalo;
                }
              }
              if (Number(galosrpg[AD].galos.length) > 0) {
                TT1 = `${Number(
                  Number(`${medvida}`) / Number(galosrpg[AD].galos.length)
                ).toFixed(0)}`;
                TT2 = `${Number(
                  Number(`${medvic}`) /
                    Number(Number(galosrpg[AD].galos.length) / 2)
                ).toFixed(0)}/${Number(
                  Number(Number(`${medvic}`) + Number(`${medder}`)) /
                    Number(Number(galosrpg[AD].galos.length) / 2)
                ).toFixed(0)}`;
                TT3 = `${Number(
                  (Number(`${medvic}`) /
                    Number(Number(`${medvic}`) + Number(`${medder}`))) *
                    100
                ).toFixed(1)}%`;
              } else {
                TT1 = `0`;
                TT2 = `0/0`;
                TT3 = `0.0%`;
              }
              txt = `Olá *${
                sender.split("@")[0]
              }*, aqui está as informações sobre seu galinheiro!\n• Seu galinheiro está atualmente no level: *${
                galosrpg[AD].level
              }*\n——\n• [🚧] Área total do Galinheiro: *${
                Number(galosrpg[AD].level) * Number(galosrpg[AD].level)
              }m²*\n——\n• [🏡] *Habitantes do seu Galinheiro:*\n• Quantidade de Galo(s) que você tem em seu galinheiro atualmente: *${
                galosrpg[AD].galos.length
              }/${
                Number(galosrpg[AD].level) * 5
              }*\n• Quantidade de Galinha(s) que você tem em seu galinheiro atualmente: *${
                galosrpg[AD].galinhas
              }/${
                Number(galosrpg[AD].level) * 2
              }*\n• Quantidade de Ovo(s) que as suas galinhas colocaram: *${
                galosrpg[AD].ovos
              }/${
                Number(galosrpg[AD].level) * 2
              }*\n• Expectativa média de vida de seus bichinhos: *${TT1}*\n——\n• [🏆] *Médias e Porcentagens:*\n• Sua média de vitórias conquistadas por seu(s) bichinho(s): *${TT2}*\n• Sua média percentual atualmente em seu galinheiro: *${TT3}*`;
              mention(txt);
              break;

            case "upgalo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isMiwaCityOFF)
                return reply(
                  `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                );
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              if (!JSON.stringify(galosrpg).includes(sender))
                return reply(`Você precisa comprar um galinheiro antes...`);
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              AD = galosrpg.map((b) => b.id).indexOf(sender);
              if (
                Number(miwarpg[AB].money) <
                Number(Number(galosrpg[AD].level) * 100)
              )
                return reply(
                  `Você não possui saldo suficiente para efetuar essa compra...`
                );
              if (Number(galosrpg[AD].level) < 6) {
                quant = galosrpg[AD].level;
                galosrpg[AD].level = Number(quant) + 1;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/galosrpg.json",
                  JSON.stringify(galosrpg)
                );
                MD = miwarpg[AB].money;
                miwarpg[AB].money = Number(MD) - 1000;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                reply(
                  `Seu galinheiro foi upado para o level ${galosrpg[AD].level} com sucesso...`
                );
              } else {
                reply(
                  `Seu galinheiro está no level máximo!😿 Não é possível aumentar!`
                );
              }
              break;

              case "galo":
                case "galos":
                  if (!isGroup) return reply(mess.onlyGroup());
                  if (!isMiwaCityOFF)
                    return reply(
                      `É nescessário a ativação do *MODO RPG* no grupo! Use *${prefix}miwarpg*.`
                    );
                  if (!JSON.stringify(miwarpg).includes(sender))
                    return reply(
                      `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                    );
                  if (!isModobn) return reply(mess.warningMB(prefix));
                  if (!JSON.stringify(galosrpg).includes(sender))
                    return reply(`Você precisa comprar um galo antes!`);
                  AB = miwarpg.map((i) => i.id).indexOf(sender);
                  AD = galosrpg.map((b) => b.id).indexOf(sender);
                  galosH = moment.tz("America/Sao_Paulo").format("HH");
                  galosD = moment.tz("America/Sao_Paulo").format("DD");
                  galosM = moment.tz("America/Sao_Paulo").format("MM");
                  if (Number(galosrpg[AD].galos.length) > 0) {
                    if (!q)
                      return reply(
                        `Vix lek, cê caiu em uma briga ilegal de galos...🐔 Faça logo a sua aposta, e venha dançar!`
                      );
                    if (!Number(args[0]))
                      return reply(args[0] + " não é número...");
                    if (Number(args[0]) > Number(miwarpg[AB].money))
                      return reply(
                        `Você não tem saldo suficiente para efetuar essa aposta...`
                      );
                    if (Number(args[0]) > 100)
                      return reply(
                        "Não é possível apostar mais que R$ 100.00 em uma briga ilegal e clandestina..."
                      );
                    if (Number(args[0]) < 1) return reply("Deixa de ser pobre lek");
                    if (Number(galosrpg[AD].brigaL) <= 0)
                      return reply("Chega de brigas por agora... Volte mais tarde");
                    if (
                      Number(galosH) > Number(galosrpg[AD].brigaH) &&
                      Number(galosrpg[AD].brigaD) === Number(galosD) &&
                      Number(galosrpg[AD].brigaM) === Number(galosM) &&
                      Number(galosrpg[AD].brigaL) <= 0
                    ) {
                      galosrpg[AD].brigaL = 15;
                      galosrpg[AD].brigaH = galosH;
                      fs.writeFileSync(
                        "./database/usuarios/SystemRPG/galosrpg.json",
                        JSON.stringify(galosrpg)
                      );
                      reply("Bem vindo (a) de volta, hora de brigar...");
                    }
                    if (
                      Number(galosD) > Number(galosrpg[AD].brigaD) &&
                      Number(galosrpg[AD].brigaM) === Number(galosM)
                    ) {
                      galosrpg[AD].brigaL = 15;
                      galosrpg[AD].brigaH = galosH;
                      galosrpg[AD].brigaD = galosD;
                      fs.writeFileSync(
                        "./database/usuarios/SystemRPG/galosrpg.json",
                        JSON.stringify(galosrpg)
                      );
                      reply(`${tempo} usuário, vamos brigar ?`);
                    }
                    if (Number(galosM) > Number(galosrpg[AD].brigaM)) {
                      galosrpg[AD].brigaL = 15;
                      galosrpg[AD].brigaH = galosH;
                      galosrpg[AD].brigaD = galosD;
                      galosrpg[AD].brigaM = galosM;
                      fs.writeFileSync(
                        "./database/usuarios/SystemRPG/galosrpg.json",
                        JSON.stringify(galosrpg)
                      );
                      reply(`${tempo} usuário, vamos brigar?`);
                    }
                    if (
                      Number(galosrpg[AD].brigaD) == Number(galosD) &&
                      Number(galosrpg[AD].brigaM) == Number(galosM) &&
                      Number(galosrpg[AD].brigaL) > 0
                    ) {
                      galosgeral = galosrpg[AD].galos;
                      alegalo =
                        galosgeral[Math.floor(Math.random() * galosgeral.length)];
                      matheuzinho = Math.floor(Math.random() * 100);
                      if (Number(matheuzinho) > 30) {
                        if (Number(alegalo.vida) > 0) {
                          VD = alegalo.vida;
                          CD = alegalo.degalo;
                          alegalo.vida = Number(VD) - 1;
                          alegalo.degalo = Number(CD) + 1;
                          fs.writeFileSync(
                            "./database/usuarios/SystemRPG/galosrpg.json",
                            JSON.stringify(galosrpg)
                          );
                          brigatxt = `Seu galo perdeu a briga!🐔 Você perdeu R$ ${Number(
                            args[0]
                          ).toFixed(2)}`;
                        } else {
                          galosgeral.splice(alegalo, 1);
                          fs.writeFileSync(
                            "./database/usuarios/SystemRPG/galosrpg.json",
                            JSON.stringify(galosrpg)
                          );
                          brigatxt = `O galo inimigo matou o seu galo na briga!🐔 Você perdeu R$ ${Number(
                            args[0]
                          ).toFixed(2)} ${
                            Number(
                              galosrpg[galosrpg.map((i) => i.id).indexOf(sender)]
                                .galos.length
                            ) > 1
                              ? `\nFelizmente, você ainda possui ${
                                  galosrpg[
                                    galosrpg.map((i) => i.id).indexOf(sender)
                                  ].galos.length
                                }`
                              : ``
                          }`;
                        }
                        JH =
                          galosrpg[galosrpg.map((i) => i.id).indexOf(sender)]
                            .countDg;
                        JH2 =
                          galosrpg[galosrpg.map((i) => i.id).indexOf(sender)].dinVg;
                        JH3 =
                          galosrpg[galosrpg.map((i) => i.id).indexOf(sender)]
                            .brigaL;
                        galosrpg[
                          galosrpg.map((i) => i.id).indexOf(sender)
                        ].countDg = Number(JH) + 1;
                        galosrpg[galosrpg.map((i) => i.id).indexOf(sender)].dinVg =
                          Number(JH2) + Number(args[0]);
                        galosrpg[galosrpg.map((i) => i.id).indexOf(sender)].brigaL =
                          Number(JH3) - 1;
                        fs.writeFileSync(
                          "./database/usuarios/SystemRPG/galosrpg.json",
                          JSON.stringify(galosrpg)
                        );
                        MD = miwarpg[AB].money;
                        miwarpg[AB].money = Number(MD) - Number(args[0]);
                        fs.writeFileSync(
                          "./database/usuarios/SystemRPG/miwarpg.json",
                          JSON.stringify(miwarpg)
                        );
                        reply(brigatxt);
                        //ganhar
                      } else {
                        //vida > 0
                        if (Number(alegalo.vida) > 0) {
                          VD = alegalo.vida;
                          CV = alegalo.vigalo;
                          alegalo.vida = Number(VD) - 1;
                          alegalo.vigalo = Number(CV) + 1;
                          if (Number(alegalo.degalo) > 0) {
                            NN = alegalo.degalo;
                            alegalo.degalo = Number(NN) + 1;
                          }
                          fs.writeFileSync(
                            "./database/usuarios/SystemRPG/galosrpg.json",
                            JSON.stringify(galosrpg)
                          );
                          brigawin = `Seu galo venceu a briga!🐓 Você ganhou *R$ ${Number(
                            Number(args[0]) * 2
                          ).toFixed(2)}*`;
                        } else {
                          galosgeral.splice(alegalo, 1);
                          fs.writeFileSync(
                            "./database/usuarios/SystemRPG/galosrpg.json",
                            JSON.stringify(galosrpg)
                          );
                          brigawin = ` Seu galo venceu a briga!🐓 Mas foi sequestrado e morto no caminho... Felizmente, você levou o dinheiro.\n• Você ganhou *R$ ${Number(
                            Number(args[0]) * 2
                          ).toFixed(2)}*`;
                        }
                        KL =
                          galosrpg[galosrpg.map((i) => i.id).indexOf(sender)]
                            .countVg;
                        KL2 =
                          galosrpg[galosrpg.map((i) => i.id).indexOf(sender)].dinVg;
                        KL3 =
                          galosrpg[galosrpg.map((i) => i.id).indexOf(sender)]
                            .luckVg;
                        KL4 =
                          galosrpg[galosrpg.map((i) => i.id).indexOf(sender)]
                            .brigaL;
                        galosrpg[
                          galosrpg.map((i) => i.id).indexOf(sender)
                        ].countVg = Number(KL) + 1;
                        galosrpg[galosrpg.map((i) => i.id).indexOf(sender)].dinVg =
                          Number(KL2) + Number(args[0]);
                        galosrpg[galosrpg.map((i) => i.id).indexOf(sender)].luckVg =
                          Number(KL3) + Number(args[0]);
                        galosrpg[galosrpg.map((i) => i.id).indexOf(sender)].brigaL =
                          Number(KL4) - 1;
                        fs.writeFileSync(
                          "./database/usuarios/SystemRPG/galosrpg.json",
                          JSON.stringify(galosrpg)
                        );
                        MD = miwarpg[AB].money;
                        miwarpg[AB].money = Number(MD) + Number(args[0]);
                        fs.writeFileSync(
                          "./database/usuarios/SystemRPG/miwarpg.json",
                          JSON.stringify(miwarpg)
                        );
                        reply(brigawin);
                      }
                    }
                  } else {
                    reply(`Você não possui galos! 🐓😿`);
                  }
                  break;
    
            case "cassino":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.warningMB(prefix));
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              horacass = moment.tz("America/Sao_Paulo").format("HH");
              diacass = moment.tz("America/Sao_Paulo").format("DD");
              mmcass = moment.tz("America/Sao_Paulo").format("MM");
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              if (Number(args[0]) > Number(miwarpg[AB].money))
                return reply(
                  `Você não possui saldo suficiente para efetuar essa aposta...`
                );
              if (
                Number(miwarpg[AB].limiteC) === 0 &&
                Number(miwarpg[AB].horaC) === Number(horacass)
              )
                return reply(
                  `*Você já apostou muito hoje...* Suas chances estão esgotadas! Por favor, volte mais tarde! 😔😭`
                );
              HC = Number(miwarpg[AB].horaC) + 1;
              //acabou o limite...
              if (
                Number(horacass) > Number(miwarpg[AB].horaC) &&
                Number(miwarpg[AB].diaC) === Number(diacass) &&
                Number(miwarpg[AB].mC) === Number(mmcass)
              ) {
                miwarpg[AB].limiteC = 20;
                miwarpg[AB].horaC = horacass;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                reply(
                  `😝🤪 Mas já mlk? Bora apostar então, eu ainda vou sugar muito teu dinheiro!`
                );
              }
              //passar do dia pro outro...
              if (
                Number(miwarpg[AB].limiteC) === 0 &&
                Number(diacass) > Number(miwarpg[AB].diaC)
              ) {
                miwarpg[AB].limiteC = 20;
                miwarpg[AB].horaC = horacass;
                miwarpg[AB].diaC = diacass;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                reply(`💰🌟 ${tempo} caro jogador, como está a sua sorte hj?`);
              }
              //passar do mês pro outro...
              if (
                Number(miwarpg[AB].limiteC) === 0 &&
                Number(mmcass) > Number(miwarpg[AB].mC)
              ) {
                miwarpg[AB].limiteC = 30;
                miwarpg[AB].horaC = horacass;
                miwarpg[AB].diaC = diacass;
                miwarpg[AB].mC = mmcass;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                reply(
                  `📆🗣 Primeira aposta do mês? Eu ainda vou sugar muito teu dinheiro todo...`
                );
              }
              if (Number(miwarpg[AB].limiteC) > 0) {
                if (!q) {
                  return reply(
                    `Você deve escolher uma quantia para apostar... Ex: ${
                      prefix + command
                    } 100 _(você estará apostando R$ 100.00)_`
                  );
                }
                if (Number(args[0]) < 10)
                  return reply(`Não é possível apostar menos que R$ 10.00`);
                if (Number(args[0]) > 20000)
                  return reply(
                    `Não é possível apostar mais que R$ 20000.00! 😿`
                  );
                if (!Number(args[0]))
                  return reply(`*${args[0]}* não é número! 😿`);
                frutasC = JSON.parse(
                  fs.readFileSync("./arquivos/json/slots.json")
                );
                resulC = `${
                  frutasC[Math.floor(Math.random() * frutasC.length)]
                } : ${frutasC[Math.floor(Math.random() * frutasC.length)]} : ${
                  frutasC[Math.floor(Math.random() * frutasC.length)]
                }`;
                if (resulC == `🦴 : 🦴 : 🦴`) {
                  CC = Number(miwarpg[AB].limiteC) - 1;
                  miwarpg[AB].money = 50;
                  miwarpg[AB].limiteC = CC;
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/miwarpg.json",
                    JSON.stringify(miwarpg)
                  );
                  reply(
                    `• *[${resulC}]* - Óia a bruxa passando... Todo o dinheiro da sua conta agora é dela!`
                  );
                }
                if (resulC == `🍫 : 🍫 : 🍫`) {
                  cmrpg = 1000;
                }
                if (resulC == `🍔 : 🍔 : 🍔`) {
                  cmrpg = 600;
                }
                if (resulC == `🥩 : 🥩 : 🥩`) {
                  cmrpg = 400;
                }
                if (resulC == `🍕 : 🍕 : 🍕`) {
                  cmrpg = 250;
                }
                if (resulC == `🌶️ : 🌶️ : 🌶️`) {
                  cmrpg = 200;
                }
                if (resulC == `🍪 : 🍪 : 🍪`) {
                  cmrpg = 100;
                }
                if (resulC == `🍗 : 🍗 : 🍗`) {
                  cmrpg = 80;
                }
                if (resulC == `🌭 : 🌭 : 🌭`) {
                  cmrpg = 70;
                }
                if (resulC == `🥞 : 🥞 : 🥞`) {
                  cmrpg = 60;
                }
                if (resulC == `🥓 : 🥓 : 🥓`) {
                  cmrpg = 50;
                }
                if (
                  resulC == `🧇 : 🧇 : 🧇` ||
                  resulC == `🍞 : 🍞 : 🍞` ||
                  resulC == `🥐 : 🥐 : 🥐` ||
                  resulC == `🥥 : 🥥 : 🥥` ||
                  resulC == `🍎 : 🍎 : 🍎` ||
                  resulC == `🍌 : 🍌 : 🍌` ||
                  resulC == `🍓 : 🍓 : 🍓`
                ) {
                  cmrpg = 40;
                }
                if (
                  resulC == `🍐 : 🍐 : 🍐` ||
                  resulC == `🍊 : 🍊 : 🍊` ||
                  resulC == `🍋 : 🍋 : 🍋` ||
                  resulC == `🍉 : 🍉 : 🍉` ||
                  resulC == `🍇 : 🍇 : 🍇` ||
                  resulC == `🍒 : 🍒 : 🍒` ||
                  resulC == `🍑 : 🍑 : 🍑` ||
                  resulC == `🥭 : 🥭 : 🥭` ||
                  resulC == `🍍 : 🍍 : 🍍` ||
                  resulC == `🥝 : 🥝 : 🥝` ||
                  resulC == `🍅 : 🍅 : 🍅` ||
                  resulC == `🥑 : 🥑 : 🥑` ||
                  resulC == `🌽 : 🌽 : 🌽` ||
                  resulC == `🥕 : 🥕 : 🥕`
                ) {
                  cmrpg = 30;
                }
                if (
                  resulC == `🍫 : 🍫 : 🍫` ||
                  resulC == `🍔 : 🍔 : 🍔` ||
                  resulC == `🥩 : 🥩 : 🥩` ||
                  resulC == `🍕 : 🍕 : 🍕` ||
                  resulC == `🌶️ : 🌶️ : 🌶️` ||
                  resulC == `🍪 : 🍪 : 🍪` ||
                  resulC == `🍗 : 🍗 : 🍗` ||
                  resulC == `🌭 : 🌭 : 🌭` ||
                  resulC == `🥞 : 🥞 : 🥞` ||
                  resulC == `🥓 : 🥓 : 🥓` ||
                  resulC == `🧇 : 🧇 : 🧇` ||
                  resulC == `🍞 : 🍞 : 🍞` ||
                  resulC == `🥐 : 🥐 : 🥐` ||
                  resulC == `🥥 : 🥥 : 🥥` ||
                  resulC == `🍎 : 🍎 : 🍎` ||
                  resulC == `🍌 : 🍌 : 🍌` ||
                  resulC == `🍓 : 🍓 : 🍓` ||
                  resulC == `🍐 : 🍐 : 🍐` ||
                  resulC == `🍊 : 🍊 : 🍊` ||
                  resulC == `🍋 : 🍋 : 🍋` ||
                  resulC == `🍉 : 🍉 : 🍉` ||
                  resulC == `🍇 : 🍇 : 🍇` ||
                  resulC == `🍒 : 🍒 : 🍒` ||
                  resulC == `🍑 : 🍑 : 🍑` ||
                  resulC == `🥭 : 🥭 : 🥭` ||
                  resulC == `🍍 : 🍍 : 🍍` ||
                  resulC == `🥝 : 🥝 : 🥝` ||
                  resulC == `🍅 : 🍅 : 🍅` ||
                  resulC == `🥑 : 🥑 : 🥑` ||
                  resulC == `🌽 : 🌽 : 🌽` ||
                  resulC == `🥕 : 🥕 : 🥕`
                ) {
                  var Vitória = "Você acaba de ganhar";
                  var CC = Number(miwarpg[AB].limiteC) - 1;
                  var MR = miwarpg[AB].money;
                  var TT = Number(args[0]) * Number(cmrpg);
                  var TC = Number(TT) + Number(args[0]);
                  var VT = Number(MR) + Number(TC) * 5;
                  var Ctxt = `R$ ${Number(TC).toFixed(2)}`;
                  miwarpg[AB].money = VT;
                  miwarpg[AB].limiteC = CC;
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/miwarpg.json",
                    JSON.stringify(miwarpg)
                  );
                } else {
                  var Vitória = "Você perdeu! Como punição, você perderá";
                  var CC = Number(miwarpg[AB].limiteC) - 1;
                  var MR = miwarpg[AB].money;
                  var VT = Number(MR) - Number(args[0]);
                  var Ctxt = `R$ ${Number(args[0]).toFixed(2)}`;
                  miwarpg[AB].money = VT;
                  miwarpg[AB].limiteC = CC;
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/miwarpg.json",
                    JSON.stringify(miwarpg)
                  );
                }
                const cassino = `• *[${resulC}]* - ${Vitória} ${Ctxt}`;
                reply(cassino);
              }
              break;

            case "dadoapostado":
              setTimeout(() => {
                reagir(from, "🎲");
              }, 300);
              if (!isModobn) return reply(mess.warningMB(prefix));
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              var [d1, d2] = q.split("/");
              if (!d1)
                return reply(
                  `Digite o valor do dado que você acha que irá cair... Após isso, coloque uma (/) ao lado e coloque uma quantia a ser apostada.\n–\nEx: ${
                    prefix + command
                  } 5/25 _(você estará apostando R$ 25.00 no dado 5)_`
                );
              if (!d2) return reply(`Você não disse quanto irá apostar...`);
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              if (Number(miwarpg[AB].money) < Number(d2))
                return reply(
                  `Sua aposta é muito alta para o saldo na sua conta... Por favor, escolha uma aposta menor.`
                );
              if (!Number(d1)) return reply(`${d1} não é número!`);
              if (!Number(d2)) return reply(`${d2} não é número!`);
              if (Number(d2) > 100)
                return reply(`Não é possível apostar mais do que R$ 100.00`);
              if (Number(d1) < 1 || Number(d1) > 6)
                return reply(`Este número no dado não existe...`);
              reply(`Sorteando dado(s)!`);
              dadoale = Math.floor(Math.random() * 5) + 1;
              enviarfigu(`./database/data/media/sticker/dados/${dadoale}.webp`);
              if (Number(dadoale) === Number(d1)) {
                DD = Number(miwarpg[AB].money) + Number(d2);
                miwarpg[AB].money = DD;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                setTimeout(() => {
                  BC = miwarpg.map((i) => i.id).indexOf(sender);
                  mention(
                    `🎉🌟 Parabéns *@${
                      sender.split("@")[0]
                    }*, você ganhou R$ *${Number(d2).toFixed(
                      2
                    )}* por acertar a previsão do dado.`
                  );
                }, 5000);
              } else {
                DD = Number(miwarpg[AB].money) - Number(d2);
                miwarpg[AB].money = DD;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                setTimeout(() => {
                  BD = miwarpg.map((i) => i.id).indexOf(sender);
                  mention(
                    `😿 Infelizmente *@${
                      sender.split("@")[0]
                    }*, você perdeu *R$ ${Number(d2).toFixed(
                      2
                    )}* por errar a previsão do dado.`
                  );
                }, 5000);
              }
              break;

            case "caracoroa": //by vitinho
              setTimeout(() => {
                reagir(from, "🪙");
              }, 300);
              if (!isModobn) return reply(mess.warningMB(prefix));
              if (!JSON.stringify(miwarpg).includes(sender))
                return reply(
                  `${tempo} usuário(a), novo(a) por aqui? Use *${prefix}rgbe* para se registrar na *Base da Ets*.`
                );
              var [d1, d2] = q.split("/");
              if (Number(d2) > 1000)
                return reply("Tbm não pode passar de 1000 né meu camarada kkk");
              if (d1.length == 0)
                return reply(
                  `Digite o lado que a moeda que você acha que irá cair, ou seja, cara ou coroa... Após isso, coloque uma (/) ao lado e coloque a quantia que você deseja apostar, por exemplo: 1.\n–\n• Ex: ${
                    prefix + command
                  } cara/25 _(você estará apostando R$25.00 na posição do lado da cara da moeda)_`
                );
              if (d1.toLowerCase() != "cara" && d1.toLowerCase() != "coroa")
                return reply("Só pode cara ou coroa.");
              if (!d2) return reply(`Você não disse quanto irá apostar...`);
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              if (Number(miwarpg[AB].money) < Number(d2))
                return reply(
                  `Sua aposta é muito alta para o saldo na sua conta... Por favor, escolha uma aposta menor.`
                );
              if (!Number(d2)) return reply(`${d2} não é um número!`);
              if (Number(d2) > 100)
                return reply(`Não é possível apostar mais do que R$ 100.00`);
              reply(`Sorteando... Aguarde, daqui a pouco o resultado sai!`);
              ladosDaMoeda = ["coroa", "cara"];
              pegarInfo =
                ladosDaMoeda[Math.floor(Math.random() * ladosDaMoeda.length)];
              enviarfigu(
                `./database/data/media/sticker/caracoroa/${pegarInfo}.webp`
              );
              if (pegarInfo === d1) {
                DD = Number(miwarpg[AB].money) + Number(d2);
                miwarpg[AB].money = DD;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                setTimeout(() => {
                  BC = miwarpg.map((i) => i.id).indexOf(sender);
                  mention(
                    `🎉🌟 Parabéns *@${
                      sender.split("@")[0]
                    }*, você ganhou R$ *${Number(d2).toFixed(
                      2
                    )}* por acertar a posição da moeda.\n• O resultado da posição do lado da moeda era a : *${pegarInfo}*`
                  );
                }, 5000);
              } else {
                DD = Number(miwarpg[AB].money) - Number(d2);
                miwarpg[AB].money = DD;
                fs.writeFileSync(
                  "./database/usuarios/SystemRPG/miwarpg.json",
                  JSON.stringify(miwarpg)
                );
                setTimeout(() => {
                  BD = miwarpg.map((i) => i.id).indexOf(sender);
                  mention(
                    `😿 Infelizmente *@${
                      sender.split("@")[0]
                    }*, você perdeu *R$ ${Number(d2).toFixed(
                      2
                    )}* por errar a posição da moeda.\n• O resultado da posição do lado da moeda era a : *${pegarInfo}*`
                  );
                }, 5000);
              }
              break;

            case "lojas_mc":
            case "lojas":
              mention(
                `${tempo} *@${
                  sender.split("@")[0]
                }*, bem vindo a minha loja de RPG!\n—–\n❱❱ Lojas de Cavalos: *${prefix}lojadecavalos*\n❱❱ Lojas de Galos: *${prefix}lojadegalos*\n—–\n🛍️ *Produtos:*\n*1.* Comprar Segurança *[R$ 600.00]*\n❑→ ${prefix}comprarsegurança 1 | Você consegue *40% de proteção*!\n*2.* Comprar Segurança *[R$ 1200.00]*\n❑→ ${prefix}comprarsegurança 2 | Você consegue *60% de proteção*!\n*3.* Comprar Segurança *[R$ 1800.00]*\n❑→ ${prefix}comprarsegurança 3 | Você consegue *80% de proteção*!`
              );
              break;

            case "lojadecavalos":
              setTimeout(() => {
                reagir(from, "🐎");
              }, 300);
              if (JSON.stringify(cavalosrpg).includes(sender)) {
                AC = cavalosrpg.map((a) => a.id).indexOf(sender);
                if (Number(cavalosrpg[AC].level) < 4) {
                  uparcavalo = `R$ ${Number(
                    Number(cavalosrpg[AC].level) * 200
                  ).toFixed(2)}`;
                } else {
                  uparcavalo = `Lv. Máx`;
                }
              } else {
                uparcavalo = `R$ 200.00`;
              }
              txt = `${tempo} *@${
                sender.split("@")[0]
              }*, Seja bem vindo(a) à loja de cavalos:\n—\n❱❱ ${prefix}comprarestabulo *[R$ 500.00]* - De início é necessário você comprar.\n❱❱ ${prefix}upcavalo - Faça um upload em seu(s) cavalo(s). *[${uparcavalo}]*\n—\n🐎 *Comprar Cavalos:*\n❱❱ ${prefix}comprarcavalo 1 *[R$ 500.00]*\n❱❱ ${prefix}comprarcavalo 2 *[R$ 1000.00]*\n❱❱ ${prefix}comprarcavalo 3 *[R$ 1500.00]*\n❱❱ ${prefix}comprarcavalo 4 *[R$ 2000.00]*\n—\n🌾 *Equipamentos:*\n❱❱ ${prefix}comprarsela *[R$ 200.00]* - Compre uma sela para o seu cavalo.\n❱❱ ${prefix}cdcv3 *[R$ 200.00]* - Verifique o status atual de seu alazão.\n❱❱ ${prefix}atadura *[R$ 250.00]* - Caso tenha alguma fratura em alazão.\n—\n🏪 *Vendas:*\n❱❱ Para vender seu alazão, use o comando ao lado: *${prefix}vendercavalo*\n❱❱ Para vender seu estábulo, use o comando ao lado: *${prefix}venderestabulo*`;
              mention(txt);
              break;

            case "lojadegalos":
              setTimeout(() => {
                reagir(from, "🐔");
              }, 300);
              if (JSON.stringify(galosrpg).includes(sender)) {
                AD = galosrpg.map((b) => b.id).indexOf(sender);
                if (Number(galosrpg[AD].level) < 6) {
                  LV = `R$ ${Number(galosrpg[AD].level) * 100}.00`;
                } else {
                  LV = `Lv. Máx`;
                }
                PC = LV;
              } else {
                PC = `R$ 100.00`;
              }
              txt = `*${tempo}* @${
                sender.split("@")[0]
              }, Seja bem vindo(a) à loja de galos:\n🐓🏷 *Loja de Galos:*\n❱❱ ${prefix}comprargalinheiro *[R$ 500.00]*\n❱❱ ${prefix}comprargalo 1 *[R$ 100.00]*\n❱❱ ${prefix}comprargalo 6 *[R$ 550.00]*\n❱❱ ${prefix}comprargalo 12 *R$ 1000.00]*\n❱❱ ${prefix}comprargalinha *[R$ 100.00]*\n❱❱ ${prefix}upgalo *[${PC}]*\n––\n🐓🏷 *Vendas:*\n❱❱ Venda de Galos: *${prefix}vendergalo (quantidade)*\n❱❱ Venda de Galinhas: *${prefix}vendergalinha (quantidade)*`;
              mention(txt);
              break;

            //=======================================\\

            case "metadinha":
              let anu = await fetchJson(
                "https://raw.githubusercontent.com/iamriz7/kopel_/main/kopel.json"
              );
              let random = anu[Math.floor(Math.random() * anu.length)];
              miwa.sendMessage(
                from,
                {
                  image: { url: random.female },
                  caption: `*⏤͟͟͞͞⃝Perfil Feminino*`,
                },
                { quoted: info }
              );
              let messageaa = await prepareWAMessageMedia(
                { image: { url: random.male } },
                { upload: miwa.waUploadToServer }
              );
              await miwa
                .sendMessage(
                  from,
                  {
                    botInvokeMessage: {
                      message: {
                        messageContextInfo: {
                          deviceListMetadataVersion: 2,
                          deviceListMetadata: {},
                        },
                        interactiveMessage: {
                          header: {
                            title: "",
                            hasMediaAttachment: true,
                            imageMessage: messageaa.imageMessage,
                          },
                          headerType: "IMAGE",
                          body: { text: "*⏤͟͟͞͞⃝Perfil Masculino*" },
                          footer: {
                            text: `© ${NomeDoBot}`,
                          },
                          nativeFlowMessage: {
                            buttons: [
                              {
                                name: "quick_reply",
                                buttonParamsJson: JSON.stringify({
                                  display_text: `𝑷𝑹𝑶́𝑿𝑰𝑴𝑨 🔥`,
                                  id: `${prefix}metadinha`,
                                  disabled: false,
                                  url_button: "🔥𝑃𝑟𝑜́𝑥𝑖𝑚𝑎, 𝑝𝑜𝑟 𝑓𝑎𝑣𝑜𝑟.🔥",
                                }),
                              },
                            ],
                            messageParamsJson: "",
                          },
                        },
                      },
                    },
                    contextInfo: {
                      externalAdReply: {
                        title: ``,
                        renderLargerThumbnail: false,
                        showAdAttribution: false,
                        body: ``,
                        mediaUrl: ``,
                        mediaType: 2,
                        thumbnail: "",
                      },
                    },
                  },
                  { quoted: info }
                )
                .then((r) => console.log(r));
              //©LB - K

              break;

            case "affect":
            case "comunismo":
            case "mms":
            case "bobross":
            case "karaba":
            case "bolsonaro":
            case "blur":
            case "beautiful":
            case "circle":
            case "del":
            case "invert":
            case "facepalm":
            case "jail":
            case "rip":
            case "wasted":
            case "wanted":
            case "trash":
            case "sepia":
            case "pixelate":
            case "hitler":
            case "lgbt":
              try {
                if ((isMedia && !info.message.videoMessage) || isQuotedImage) {
                  post = isQuotedImage
                    ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                        .message.extendedTextMessage.contextInfo.message
                        .imageMessage
                    : info.message.imageMessage;
                  imagem = await downloadContentFromMessage(post, "image");
                  base64 = Buffer.from([]);
                  for await (const send of imagem) {
                    base64 = Buffer.concat([base64, send]);
                  }
                  reply(mess.wait());
                  link = await uploader.imgur(base64);
                  miwa
                    .sendMessage(
                      from,
                      {
                        image: {
                          url: `https://miwa-apis.online/api/canvas/${command}?link=${link}&apikey=${API_KEY_MIWA}`,
                        },
                      },
                      { quoted: info }
                    )
                    .catch((e) => {
                      return reply("Erro..");
                    });
                } else {
                  reply("Selecione uma imagem para transformar. ");
                }
              } catch (e) {
                if (JSON.stringify(e).includes("ServerAPI-Sab_Premium")) {
                  return console.log(
                    "A api caiu ou não foi possivel executar esta ação., espere retornar"
                  );
                } else {
                  console.log(e);
                  reply("ERROR!!");
                }
              }
              break;

            //========(SORTEIO-VOTAR-CASES)=========\\

            case "substituir":
              if (!SoDono && !isnit) return reply("Só dono..");
              if ((isMedia && !info.message.videoMessage) || isQuotedDocument) {
                media = isQuotedDocument
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .documentMessage
                  : info.message.documentMessage;
                rane = getRandom("." + (await getExtension(media.mimetype)));
                doc = await getFileBuffer(media, "document");
                fs.writeFileSync(q, doc);
                miwa.sendMessage(
                  from,
                  {
                    text: "O arquivo foi substituído para outro local com sucesso.",
                  },
                  { quoted: info }
                );
              } else {
                reply("Marque o documento ou arquivo..");
              }
              break;

            case "index-bot":
              if (!SoDono) return reply(mess.onlyOwner());
              if ((isMedia && !info.message.videoMessage) || isQuotedDocument) {
                media = isQuotedDocument
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .documentMessage
                  : info.message.documentMessage;
                rane = getRandom("." + (await getExtension(media.mimetype)));
                doc = await getFileBuffer(media, "document");
                fs.writeFileSync("./index.js", doc);
                miwa.sendMessage(
                  from,
                  {
                    text: "O arquivo './index.js' foi atualizado com sucesso.",
                  },
                  { quoted: info }
                );
              } else {
                reply(
                  "Marque o documento ou o arquivo que deseja enviar pra determinar pasta ou substituir.."
                );
              }
              break;

            case "getcase":
            case "puxarcase":
              try {
                if (!SoDono) return reply(mess.onlyOwner());
                reply(
                  "- Calma ae amigo(a), já estou enviando o comando / case para você.."
                );
                const getCase = (cases) => {
                  return (
                    "case " +
                    `'${cases}'` +
                    fs
                      .readFileSync("./index.js")
                      .toString()
                      .split("case '" + cases + "'")[1]
                      .split("break")[0] +
                    "break"
                  );
                };
                await sleep(500);
                msgSemQuoted(`${getCase(q)}`);
              } catch (e) {
                console.log(e);
                reply("❌️ Comando não encontrado! ❌️");
              }
              break;

            case "bann":
              if (!isPremium && !SoDono)
                return reply("Só usuário premium pode utilizar este comando..");
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (!menc_os2 || menc_jid2[1])
                return reply(
                  "Marque a mensagem do usuário ou marque o @ dele.., lembre de só marcar um usuário..."
                );
              if (!JSON.stringify(groupMembers).includes(menc_os2))
                return reply("Este usuário já foi removido ou saiu do grupo.");
              if (premium.includes(menc_os2))
                return mentions(
                  `@${menc_os2.split("@")[0]} a(o) @${
                    sender.split("@")[0]
                  } está querendo banir você, visualiza esse problema ae 😶`,
                  [menc_os2],
                  true
                );
              if (groupAdmins.includes(menc_os2))
                return mentions(
                  `@${menc_os2.split("@")[0]} a(o) @${
                    sender.split("@")[0]
                  } está querendo banir você, visualiza esse problema ae 😶`,
                  [menc_os2],
                  true
                );
              if (botNumber.includes(menc_os2))
                return reply(
                  "Não sou besta de remover eu mesmo né 🙁, mas estou decepcionado com você"
                );
              if (numerodono.includes(menc_os2))
                return reply("Não posso remover meu dono 🤧");
              miwa.sendMessage(from, {
                text: `@${
                  menc_os2.split("@")[0]
                } Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos ainda não esclarecidos) -`,
                mentions: [menc_os2],
              });
              miwa.groupParticipantsUpdate(from, [menc_os2], "remove");
              break;

            case "band":
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              try {
                if (!menc_os2 || menc_jid2[1])
                  return reply(
                    "Marque a mensagem do usuário ou marque o @ dele.., lembre de só marcar um usuário..."
                  );
                if (IS_DELETE) {
                  setTimeout(() => {
                    miwa.sendMessage(from, {
                      delete: {
                        remoteJid: from,
                        fromMe: false,
                        id: info.key.id,
                        participant: sender,
                      },
                    });
                  }, 500);
                }
                if (!JSON.stringify().includes(menc_os2))
                  return reply("Este usuário já foi removido do grupo.");
                if (botNumber.includes(menc_os2))
                  return reply(
                    "Não sou besta de remover eu mesmo né 🙁, mas estou decepcionado com você"
                  );
                if (numerodono.includes(menc_os2))
                  return reply("Não posso remover meu dono 🤧");
                miwa.sendMessage(from, {
                  text: `@${
                    menc_os2.split("@")[0]
                  } Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos justos.) -`,
                  mentions: [menc_os2],
                });
                miwa.groupParticipantsUpdate(from, [menc_os2], "remove");
              } catch (e) {
                console.log(e);
              }
              break;

            case "ban":
            case "b":
            case "banir":
            case "kick":
            case "avadakedavra":
              if (!isGroupAdmins && !SoDono) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              try {
                if (!menc_os2 || menc_jid2[1])
                  return reply(
                    "Marque a mensagem do usuário ou marque o @ dele.., lembre de só marcar um usuário..."
                  );
                if (!JSON.stringify(groupMembers).includes(menc_os2))
                  return reply(
                    "Este usuário já foi removido do grupo ou saiu."
                  );
                if (botNumber.includes(menc_os2))
                  return reply(
                    "Não sou besta de remover eu mesmo né 🙁, mas estou decepcionado com você"
                  );
                if (JSON.stringify(numerodono).indexOf(menc_os2) >= 0)
                  return reply("Não posso remover meu dono 🤧");
                miwa.sendMessage(from, {
                  text: `@${
                    menc_os2.split("@")[0]
                  } Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos justos.) -`,
                  mentions: [menc_os2],
                });
                miwa.groupParticipantsUpdate(from, [menc_os2], "remove");
              } catch (e) {
                console.log(e);
              }
              break;

            case "add":
            case "unkick":
            case "reviver":
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (!q && info.message.extendedTextMessage === null)
                return reply(
                  "Marque a mensagem ou coloque o número de quem você quer adicionar no grupo."
                );
              try {
                useradd = `${args.join(" ").replace(/\D/g, "")}`
                  ? `${args.join(" ").replace(/\D/g, "")}`
                  : info.message.extendedTextMessage.contextInfo.participant;
                let id = `${useradd.replace(/\D/g, "")}`;
                if (!id) return reply(`Número inválido.`);
                let [result] = await miwa.onWhatsApp(id);
                if (!result)
                  return reply(`Esse número não está registrado no WhatsApp.`);
                let response = await miwa.groupParticipantsUpdate(
                  from,
                  [result.jid],
                  "add"
                );
                if (response[0].status == "409") {
                  miwa.sendMessage(from, {
                    text: `Ele já está no grupo, como eu vou adicionar?`,
                    mentions: [result.jid, sender],
                  });
                } else if (response[0].status == "403") {
                  miwa.sendMessage(from, {
                    text: `Não consegui adicionar o @${
                      result.jid.split("@")[0]
                    } porque ele privou a conta`,
                    mentions: [result.jid, sender],
                  });
                } else if (response[0].status == "408") {
                  miwa.sendMessage(from, {
                    text: `Não consegui adicionar o @${
                      result.jid.split("@")[0]
                    } porque ele saiu recentemente do grupo.`,
                    mentions: [result.jid, sender],
                  });
                } else if (response[0].status == "401") {
                  miwa.sendMessage(from, {
                    text: `Não consegui adicionar o @${
                      result.jid.split("@")[0]
                    } porque ele bloqueou o bot`,
                    mentions: [result.jid, sender],
                  });
                } else if (response[0].status == "200") {
                  miwa.sendMessage(from, {
                    text: `Prontinho fiz o que você pediu.`,
                    mentions: [result.jid, sender],
                  });
                } else {
                  reply("Vish acho que algo deu errado");
                }
              } catch {}
              break;

            case "promover":
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (!menc_os2 || menc_jid2[1])
                return reply(
                  "Marque a mensagem do usuário ou marque o @ dele.., lembre de só marcar um usuário..."
                );
              if (!JSON.stringify(groupMembers).includes(menc_os2))
                return reply(
                  "Este usuário foi removido do grupo ou saiu, não será possível promover.."
                );
              miwa.sendMessage(from, {
                text: `@${
                  menc_os2.split("@")[0]
                } Foi promovido(a) para adm com sucesso.`,
                mentions: [menc_os2],
              });
              miwa.groupParticipantsUpdate(from, [menc_os2], "promote");
              break;

            case "rebaixar":
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              if (!isBotGroupAdmins)
                return reply(
                  `*Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (!menc_os2 || menc_jid2[1])
                return reply(
                  "Marque a mensagem do usuário ou marque o @ dele.., lembre de só marcar um usuário..."
                );
              if (!JSON.stringify(groupMembers).includes(menc_os2))
                return reply(
                  "Este usuário foi removido do grupo ou saiu, não será possível rebaixar.."
                );
              miwa.sendMessage(from, {
                text: `@${
                  menc_os2.split("@")[0]
                } Foi Rebaixado para [ MEMBRO COMUM ] com sucesso.`,
                mentions: [menc_os2],
              });
              miwa.groupParticipantsUpdate(from, [menc_os2], "demote");
              break;

            case "sorteio":
              if (!isGroup) return reply("_" + mess.onlyGroup() + "_");
              if (!isGroupAdmins) return reply("_" + mess.onlyAdmins() + "_");
              if (!q)
                return reply(
                  `Coloque algo após o comando, por exemplo: *${prefix}sorteio* _de 100 R$_`
                );
              try {
                await mention(
                  `🤖🎉 Parabéns *@${
                    groupMembers[
                      Math.floor(
                        Math.random() * groupMetadata.participants.length
                      )
                    ].id.split("@")[0]
                  }*, você acaba de ser contemplado(a) como o(a) ganhador(a) do sorteio...\n–\n• Para mais informações entre em contato com o(a) adm responsável pelo sorteio: _“${q}”_.`
                );
              } catch (error) {
                reply("Deu erro, tente novamente :/");
              }
              break;

            case "nuke":
            case "arquivargp":
              if (!SoDono && !isnit)
                return reply("Só dono pode utilizar este comando...");
              if (!isBotGroupAdmins)
                return reply(
                  `Como ousa usar um comando que não lhe pertence o dom de usar! *Somente adminstradores do grupo tem acesso...*`
                );
              if (info.key.fromMe) return;
              blup = [];
              for (i of groupMembers) {
                if (!numerodono.includes(i.id)) blup.push(i.id);
              }
              blup.splice(blup.indexOf(botNumber), 1);
              for (i = 0; i < blup.length; i++) {
                await sleep(500);
                miwa.groupParticipantsUpdate(from, [blup[i]], "remove");
              }
              break;

            case "sorteionumero":
            case "sorteionumeros":
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              try {
                if (!isGroup) return reply(mess.onlyGroup());
                if (!q)
                  return reply(
                    `Coloque algo, após o comando sorteio, por exemplo, ${prefix}sorteionumero de 100 R$`
                  );
                var numerossrt =
                  sortear[Math.floor(Math.random() * sortear.length)];
                d = [];
                teks = `🎉Parabéns ao número do sortudo, por ganhar o sorteio ${q}:\n\n`;
                for (i = 0; i < 1; i++) {
                  teks += `🔥፝⃟  ➣ ${numerossrt}\n`;
                  d.push(numerossrt);
                }
                mentions(teks, d, true);
              } catch (e) {
                console.log(e);
                reply("Deu erro, tente novamente :/");
              }
              break;

            //==========(TTPS/ATTP)============\\

            case "ttp":
              try {
                if (q < 1)
                  return reply(
                    `_Coloque o texto_\n*Exemplo:* ${prefix + command} miwa`
                  );
                reply(mess.wait());
                string = args.join(" ") || "Texto indefinido";
                post =
                  `https://miwa-apis.online/api/ttp?texto=${string}&apikey=` +
                  API_KEY_MIWA;
                sendStickerFromUrl(from, post, { quoted: selo });
              } catch (e) {
                if (String(e).includes("invalid json response body at")) {
                  console.log(
                    "A api caiu ou não foi possivel executar esta ação., espere retornar"
                  );
                } else {
                  reply("ERROR!!");
                }
              }
              break;

            case "attp2":
            case "attp3":
            case "attp4":
            case "attp5":
            case "attp6":
            case "attp7":
            case "attp8":
            case "attp9":
            case "attp10":
              try {
                if (q < 1)
                  return reply(
                    `_Coloque o texto_\n*Exemplo:* ${prefix + command} miwa`
                  );
                reply(mess.wait());
                url = await getBuffer(
                  `https://miwa-apis.online/makerfig/rgb?fig=${command}&texto=${q}&apikey=` +
                    API_KEY_MIWA
                );
                await miwa.sendMessage(
                  from,
                  { sticker: url },
                  { quoted: selo }
                );
              } catch {
                reply("ERROR");
              }
              break;

            case "attp":
              if (!q.trim())
                return reply(
                  `Cadê o texto para eu criar a figurinha?\n\n*Exemplo: ${
                    prefix + command
                  } ${NickDono} Domina*`
                );
              reply(`Criando... aguarde.`);
              miwa
                .sendMessage(
                  from,
                  {
                    sticker: {
                      url:
                        `https://miwa-apis.online/makerfig/rgb?fig=attp&texto=${q}&apikey=` +
                        API_KEY_MIWA,
                    },
                  },
                  { quoted: info }
                )
                .catch((e) => {
                  return reply(mess.error());
                });
              break;

            case "serie1":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Arcane:* https://overflix.online/series/arcane/`);
              break;

            case "serie2":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Stranger Things:* https://overflix.online/series/stranger-things-gratis-hd/`);
              break;

            case "serie3":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Soldados ou Zumbis:* https://overflix.online/series/s-o-z-soldados-ou-zumbis/`);
              break;

            case "serie4":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Senhor dos Aneis:* https://overflix.online/series/o-senhor-dos-aneis-os-aneis-de-poder-online-hd-gratis/`);
              break;

            case "serie5":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Riverdale:* https://overflix.online/series/riverdale-online-gratis-hd-full/`);
              break;

            case "serie6":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *A casa do dragão:* https://overflix.online/series/a-casa-do-dragao-online-gratis-hd/`);
              break;

            case "serie7":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Sintonia:* https://overflix.online/series/sintonia-online-gratis/`);
              break;

            case "serie8":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Chucky:* https://overflix.online/series/chucky-a-serie/`);
              break;

            case "serie9":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Flash:* https://overflix.online/series/flash-hd-online-gratis/`);
              break;

            case "serie10":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Game of Thrones:* https://overflix.online/series/game-of-thrones-hd-online-gratis/`);
              break;

            case "serie11":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Legados:* https://overflix.online/series/legados-gratis-hd-online/`);
              break;

            case "serie12":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *The Good Doctor:* https://overflix.online/series/the-good-doctor-o-bom-doutor-hd-online/`);
              break;

            case "serie13":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *The Walking Dead:* https://overflix.online/series/the-walking-dead/`);
              break;

            case "serie14":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Peaky Blinders:* https://overflix.online/series/peaky-blinders-sangue-apostas-e-navalhas/`);
              break;

            case "serie15":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Diarios de um vampiro:* https://overflix.online/series/diarios-de-um-vampiro/`);
              break;

            case "serie16":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Gavião Arqueiro:* https://overflix.online/series/gaviao-arqueiro-full-online-gratis/`);
              break;

            case "serie17":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Westworld:* https://overflix.online/series/westworld-hd-gratis-online/`);
              break;

            case "serie18":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Lúcifer:* https://overflix.online/series/lucifer-online-hd/`);
              break;

            case "serie19":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Lobo Adolecentes:* https://overflix.online/series/lobo-adolescente/`);
              break;

            case "serie20":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *La Casa de Papel:* https://overflix.online/series/la-casa-de-papel/`);
              break;

            case "serie21":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Cobra Kai:* https://overflix.online/series/cobra-kai-online-gratis-hd/`);
              break;

            case "serie22":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Love Victor:* https://overflix.online/series/love-victor-gratis-online-hd/`);
              break;

            case "serie23":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Vikings:* https://overflix.online/series/vikings-hd/`);
              break;

            case "serie24":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Cavaleiro da Lua:* https://overflix.online/series/cavaleiro-da-lua-online-gratis-hd-full/`);
              break;

            case "serie25":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Fear The Walking Dead:* https://overflix.online/series/fear-the-walking-dead/`);
              break;

            case "serie26":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Rick Morty:* https://overflix.online/series/rick-morty/`);
              break;

            case "serie27":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Round 6:* https://overflix.online/series/round-6-online-gratis-hd-full/`);
              break;

            case "serie28":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Carnival Row:* https://overflix.online/series/carnival-row-online-hd/`);
              break;

            case "serie29":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Dark:* https://overflix.online/series/dark/`);
              break;

            case "serie30":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Arqueiro:* https://overflix.online/series/arqueiro/`);
              break;

            case "serie31":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Eu Nunca:* https://overflix.online/series/eu-nunca/`);
              break;

            case "serie32":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *The Last Kingdom:* https://overflix.online/series/the-last-kingdom/`);
              break;

            case "serie33":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *O livro de Boba Fett:* https://overflix.online/series/o-livro-de-boba-fett-hd-online-gratis-full/`);
              break;

            case "serie34":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Ragnarok:* https://overflix.online/series/ragnarok/`);
              break;

            case "serie35":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *OS 100:* https://overflix.online/series/os-100/`);
              break;

            case "serie36":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *FBI:* https://overflix.online/series/fbi/`);
              break;

            case "serie37":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Extracurricular:* https://overflix.online/series/extracurricular/`);
              break;

            case "serie38":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Halo:* https://overflix.online/series/halo-online-gratis/`);
              break;

            case "serie39":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Warrior Nun:* https://overflix.online/series/warrior-nun-online-completo/`);
              break;

            case "serie40":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Anne With:* https://overflix.online/series/anne-with-an-e/`);
              break;

            case "serie41":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Patrulha do destino:* https://overflix.online/series/patrulha-do-destino-online/`);
              break;

            case "serie42":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Dinastia:* https://overflix.online/series/dinastia/`);
              break;

            case "serie43":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Watchmen:* https://overflix.online/series/watchmen/`);
              break;

            case "serie44":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Lovecraft Country:* https://overflix.online/series/lovecraft-country-dublado-legendado-online-hd-gratis/`);
              break;

            case "filme1":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Brinquedos do terror:* https://overflix.online/filmes/brinquedos-do-terror/`);

              break;

            case "filme2":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Homem Aranha sem volta pra casa:* https://drive.google.com/file/d/1jNUcLsJqRNcrYD_pMkrUc066TIEWhFRf/view?usp=drivesdk`);

              break;

            case "filme3":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Cidade perdida:* https://overflix.online/filmes/cidade-perdida-online/`);

              break;

            case "filme4":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Thor amor e trovão:* https://overflix.online/filmes/thor-amor-e-trovao-hd-gratis-online/`);

              break;

            case "filme5":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Pinoquio 2:* https://overflix.online/filmes/pinoquio-2/`);

              break;

            case "filme6":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Rua do Medo - Parte 1:* https://overflix.online/filmes/rua-do-medo-1994-parte-1/`);

              break;

            case "filme7":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Na mente do demônio:* https://overflix.online/filmes/na-mente-do-demonio/`);

              break;

            case "filme8":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *O homem nas trevas:* https://overflix.online/filmes/o-homem-nas-trevas-2-online-hd/`);

              break;

            case "filme9":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

*Compilados de Terror:* https://overflix.online/?s=Terror`);

              break;

            case "filme10":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Halloween Kills: O terror continua:* https://overflix.online/filmes/halloween-kills-o-terror-continua/`);

              break;

            case "filme11":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}


O predador a caçada: https://overflix.online/filmes/o-predador-a-cacada/`);

              break;

            case "filme12":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Os primeiros passos de Groot:* https://overflix.online/filmes/os-primeiros-passos-de-groot/`);

              break;

            case "filme13":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Tá chovendo hambúrguer 2:* https://overflix.online/filmes/ta-chovendo-hamburguer-2/`);

              break;

            case "filme14":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Minions a origem do gru:* https://overflix.online/filmes/minions-2-a-origem-de-gru/`);

              break;

            case "filme15":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *The Sandman:* https://overflix.online/series/the-sandman-online-hd-gratis/`);

              break;

            case "filme16":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *The Batman:* https://photos.app.goo.gl/F6zsDNxipwYdxS9s9`);

              break;

            case "filme17":
              reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *As branquelas:* https://drive.google.com/file/d/1avm4yXd2tg1lZKy00yZRknboNv2Dxqpi/view?usp=drivesdk`);

              break;

            case "filme18":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Interestelar:* https://drive.google.com/file/d/10nSkrlV_TwkqtyFJ_h-c3GlLx-E7nqz9/view?usp=drivesdk`);

              break;

            case "filme19":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Um olhar do paraíso:* https://drive.google.com/file/d/102IWrzkbMAYDxkPmwMuHDuKFK3HGVFWF/view?usp=drivesdk`);

              break;

            case "filme20":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Barbie:* https://drive.google.com/drive/folders/1-yFkZrcyph8b1l4yrPpD7oaF5DHD7wss`);

              break;

            case "filme21":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Maze Runner:* https://photos.app.goo.gl/D68AJD4SgQmvMyjY7`);

              break;

            case "filme22":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Mad Max:* https://photos.app.goo.gl/88nQZhtu7v3ZWbNe6`);

              break;

            case "filme23":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Homem Aranha:* https://photos.app.goo.gl/mLzQtYumEfMpYQ4p7`);

              break;

            case "filme24":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Sherlock Homes:* https://photos.app.goo.gl/Eg5dJLspQhcaznAv5`);

              break;

            case "filme25":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Cinquenta tons de cinza:* https://photos.app.goo.gl/3QoCnRNfwJ83KBau6`);

              break;

            case "filme26":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Crepúsculo:* https://photos.app.goo.gl/9etPkcZVG42Ngzm29`);

              break;

            case "filme27":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Bad Boys:* https://photos.app.goo.gl/sVdfEwLKzg4sghxx6`);

              break;

            case "filme28":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Vingadores:* https://photos.app.goo.gl/uQRWCRbrLc5yPgPi8`);

              break;

            case "filme29":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Velozes e Furiosos:* https://photos.app.goo.gl/dSJPea6tf5QEZMK77`);

              break;

            case "filme30":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Batman (1989 - 2016):* https://photos.app.goo.gl/x1ZywBqZFNoijUkA6`);

              break;

            case "filme31":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *As vantagens de ser invisível:* https://drive.google.com/file/d/12cnRyPwcXDTbbU26MF7wXhz9cnotdEoX/view?usp=drivesdk`);

              break;

            case "filme32":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Moana:* https://drive.google.com/file/d/1aHVoN-kWxIvdQBi9a6OMSqXws7q674Cr/view?usp=drivesdk`);

              break;

            case "filme33":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Programação para princesas:* https://drive.google.com/file/d/1aHVoN-kWxIvdQBi9a6OMSqXws7q674Cr/view?usp=drivesdk`);

              break;

            case "filme34":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *As crônicas de Nárnia:* https://drive.google.com/folderview?id=1QYz_a12LMrs0Trz2RyfcsrkoNYLsjpdg`);

              break;

            case "filme35":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Culpa é das estrelas:* https://drive.google.com/file/d/1ADMJxVpf0RLTJZBpjj_lb0KRGb_OQHs1/view`);

              break;

            case "filme36":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Garota infernal:* https://drive.google.com/file/d/1cGSEO0tEPg44Yt1AcVXpNgdzMOXXZ64F/view?usp=drivesdk`);

              break;

            case "filme37":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Verdade ou Desafio:* https://drive.google.com/file/d/1mzr_E-OmjQpwouBx2oOo3y4qZStxN-2Z/view?usp=drivesdk`);

              break;

            case "filme38":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Com amor, Simon:* https://drive.google.com/file/d/1mzr_E-OmjQpwouBx2oOo3y4qZStxN-2Z/view?usp=drivesdk`);

              break;

            case "filme39":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *After 1:* https://drive.google.com/file/d/1YX8pGsFAY1vrKu8rl96VdN8-vhpUQ2mY/view?usp=drivesdk`);

              break;

            case "filme40":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *A 5 passos de você:* https://drive.google.com/file/d/132_vwYz5zXMQORAhWmTwQHlLZ47Tpu7V/view?usp=drivesdk`);

              break;

            case "filme41":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Hannah Montana:* https://drive.google.com/file/d/1Fx1Dn-JV8LOsfiBYL8-ihdz4b2fVnNbg/view?usp=drivesdk`);

              break;

            case "filme42":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Ponte para Terabitia:* https://drive.google.com/file/d/1F0iFKt2xgglz7pldUuMaE5gxLs55Ta7T/view?usp=drivesdk`);

              break;

            case "filme43":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Sr. & Sra. Smith:* https://drive.google.com/file/d/1bJsB7wjvU7WWuFSJzwcz0VKQ6vz2UMlA/view?usp=drivesdk`);

              break;

            case "filme44":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Um laço de amor:* https://drive.google.com/file/d/17x2Um_DDg7Px2y1EINwpA8jLdgDx-AeM/view?usp=drivesdk`);

              break;

            case "filme45":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Transformers:* https://drive.google.com/folderview?id=10QVCb14pAWod2rQ67n1BlLocP71yF8Ez`);

              break;

            case "filme46":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Oito mulheres e um segredo:* https://drive.google.com/file/d/1jNUcLsJqRNcrYD_pMkrUc066TIEWhFRf/view?usp=drivesdk`);

              break;

            case "filme47":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *A garota do trem:* https://drive.google.com/file/d/10nc2orAOhI_fLHWLCJfffuFVuUlKo158/view?usp=drivesdk`);

              break;

            case "filme48":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Nerve:* https://drive.google.com/file/d/1kbS-l4Af_PR_wFmykYAE_pq6qwfORWjD/view?usp=drivesdk`);

              break;

            case "filme49":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Esquadrão 6:* https://drive.google.com/file/d/13voArwUsQMgC3o7Q0ZIf87MKjQb3laU6/view?usp=drivesdk`);

              break;

            case "filme50":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

*A chegada:* https://drive.google.com/file/d/17ZTQ4VaUwM_m7immHx4XDWvR_fc1K0Vt/view?usp=drivesdk`);

              break;

            case "filme51":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Jumanji: Bem vindo a Selva:* https://drive.google.com/file/d/1j5puYj2JzBgDcH0QKIR__UY1o1Zvs022/view?usp=drivesdk`);

              break;

            case "filme52":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Monte Carlo:* https://drive.google.com/file/d/1GmN34mKHGd5rp82cX3LVv4mAzz1XoVbB/view?usp=drivesdk`);

              break;

            case "filme53":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Nasce uma estrela:* https://drive.google.com/file/d/1t8ZLbRMDsUhnzGMbjDie-7jTKDNxy7xF/view?usp=drivesdk`);

              break;

            case "filme54":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Mistério no Mediterrâneo:* https://drive.google.com/file/d/1J4JMLzT6qSgYl1nX75RIEPc4DVc7G9FS/view?usp=drivesdk`);

              break;

            case "filme55":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎥 *Norbit:* https://drive.google.com/file/d/1UkgrI-fM6rOAHmFEaABtJQP_Lx6jantD/view?usp=drivesdk`);
              break;

            case "app1":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

 📂 *Youtube Premium Tema Dark:* http://www.mediafire.com/file/x98arvls146n5i5/YouTube+Premium+15.43.32.apk/file
`);
              break;

            case "app2":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

📂 *Youtube Premium Tema Black:* http://www.mediafire.com/file/ourocauwy1hc3v1/YouTube+Black.apk/file
`);
              break;
            case "app3":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

📂 *YouCut Pro:* https://www.mediafire.com/file/5y6rp0t6ffgvnpm/YouCut-Pro-1.452.1119-SK_BR_CANAL.apk/file
`);
              break;
            case "app4":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

📂 *PicsArt Premium:* https://www.mediafire.com/file/dd1ej4z78uvdui8/base.apk/file
`);
              break;
            case "app5":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

📂 *Snaptube Premium:* http://www.mediafire.com/file/lfdc3ptkhear0w0/Snaptube_Premium_BY_FlashStudio.apk/file
`);
              break;
            case "app6":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

📂 *KineMaster Pro:* https://www.mediafire.com/file/itxxeuct5efo075/Kinemaster_Premium_Download_2021.apk/file
`);
              break;
            case "app7":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

📂 *Netflix Pirata:* https://apkmstore.blogspot.com/2020/06/download-apk-mediaflix-plus.html?m=1
`);
              break;
            case "app8":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

📂 *PowerDirector PRO:* https://www.mediafire.com/file/1et7hx53dwgjk89/PowerDirector_Premium_v9.2.0_ATUALIZADO_2021_PRO.om.apk/file
`);
              break;

            case "app9":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

📂 *Spotify Premium:* https://www.mediafire.com/file/5ajeu8dysva0pso/SPOTIFY_PREMIUM_100%2525_M%25C3%259ASICA_OFFLINE.apk/file`);
              break;

            case "app10":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

📂 *Remini Pro:* https://techgara.com/download/mod/remini-pro-31633-1357/`);
              break;

            case "app11":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

📂 *Alight Motion:* https://www.mediafire.com/file/k0vgr9dx2dwkrvj/Alight+Motion+(4.0)+Carllos10k.apk/file`);
              break;

            case "app12":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

📂 *Instagram Pro:* https://www.mediafire.com/file/pyl152gv0wzt6l5/InstaPro_v9.35_Prim%25C3%25A1rio_By.SamMods_.apk/file`);
              break;

            case "jogo1":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Minecraft:* https://www.mediafire.com/file/w9sms627ql2np6i/Minecraft_1.16.221.01_ByHT.apk/file
`);
              break;
            case "jogo2":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *DragonBall Z - Dokkan:* https://www.mediafire.com/file/015ibjiljfkv7uo/Dokkan_v4_12_1_MOD.apk/file
`);
              break;
            case "jogo3":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *GTA SanAndreas:* https://www.mediafire.com/file/ln6r3kx0ie77r9t/GTA_San_Andreas_2021.zip/file
`);
              break;
            case "jogo4":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *GTA SA - Legendado em Português:* http://www.mediafire.com/file/7op13aup1ll7m9y/GTA_SA_COM_TRADU%25C3%2587%25C3%2583O_PT-BR.zip/file
`);
              break;
            case "jogo5":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *GTA SA com Mod Cleo:* http://www.mediafire.com/file/d8cfwzctx95x0dx/GTA_SA_v2.00_Mod_Cleo.zip/file
`);
              break;
            case "jogo6":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *GTA SA Online:* https://www.mediafire.com/file/0xccd5m0zwqstag/GTA_SA_ONLINE_SAMP_ByHT.zip/file
`);
              break;
            case "gpsamp":
              await reply(`Olá ${pushname}, aqui está o seu o grupo, espero que você goste!
🔥 *Grupo Ofc:* https://chat.whatsapp.com/JDEH0eU70z2LLU4FywshzY
`);
              break;
            case "discord":
              await reply(`Olá ${pushname}, aqui está o seu o nosso discord, espero que você goste!
🔥 *Discord Ofc:* https://discord.gg/wwUPDy89
`);
              break;
            case "jogo7":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *GTA SuperLite + Mod Cleo:* http://www.mediafire.com/file/wdkg8pmndtihil3/GTA_SA_super_lite_mod_cleo_ByHT.zip/file
`);
              break;
            case "jogo8":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *LastDay on Eart Survival:* https://www.mediafire.com/file/k4pr6awvr5eb1ak/Last%20Day%20on%20Earth%201.17.7-mod.apk/file 
`);
              break;
            case "jogo9":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Bomber Friends MOD:* https://www.mediafire.com/file/dir8pwrb1mpm57w/Bomber_Friends_v4.10_MOD.apk/file
`);
              break;
            case "jogo10":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Arcade Hunter:* https://www.mediafire.com/file/ugcdaclnpodtxxs/Arcade_Hunter-Sword%252CGun%252C_and_Magic_1.11.0-mod.apk/file
`);
              break;
            case "jogo11":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Defesa de Zombie Ocioso:* https://www.mediafire.com/file/8422sjofw1cdnka/Zombie+Idle+Defense+1.5.79.229MOD-t.apk/file
`);
              break;
            case "jogo12":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Pac-Man:* https://www.mediafire.com/file/gxwy01ni99pcur2/PAC-MAN+9.2.7.10150MOD-t.apk/file
`);
              break;
            case "jogo13":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Car Driving School Simulator - APK:* https://www.mediafire.com/file/r6aps8mn6wqoabj/Car+Driving+School+Simulator+3.1.0.283MOD-t.apk/file
🎳 _Obrigatório instalar o OBB:_
 https://www.mediafire.com/file/hcsb5tpr7byh8fg/com.boombitgames.DrivingSchoolParking.zip/file
`);
              break;
            case "jogo14":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Cyber Fighters Premium:* https://www.mediafire.com/file/4tmv2cdahvqamlx/Cyber+Fighters+Premium+1.11.35.68MOD-t.apk/file
`);
              break;
            case "jogo15":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳️ *Drag Racing:* https://www.mediafire.com/file/g88v399ks1fpnfq/drag-racing-mod_2.0.37.rar/file
`);
              break;
            case "jogo16":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Mr. Brow:* https://www.mediafire.com/file/i0ii099sejk9fnk/Mr+Bow+4.15.75MOD-t.apk/file
`);
              break;
            case "jogo17":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Airport City:* https://www.mediafire.com/file/vuupmpp3r03lso0/Airport+City+8.7.18.101418MOD-t.apk/file
`);
              break;
            case "jogo18":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Crash Bandicoot:* https://www.mediafire.com/file/nyx8rjqn5m51o3r/Crash+Bandicoot+Mobile+v0.7.6242+Mod.apk/file 
`);
              break;
            case "jogo19":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Real Steel World Robot Boxing (APK+OBB):* https://www.mediafire.com/file/zcnsxb55mldn51e/Real+Steel+World+Robot+Boxing+v54.54.126+Mod.apk/file
`);
              break;
            case "jogo20":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Anger of Sticker:* https://www.mediafire.com/file/zfmqmszkhbgoem2/anger-of-stick-5-mod_1.1.39.apk/file
`);
              break;
            case "jogo21":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Angry Birds 2 (APK+OBB)*
https://www.mediafire.com/file/uwnurszwrdbv5ge/angrybirds2-2481.apk/file
`);
              break;
            case "jogo22":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳️ *Especial Force Group 2 (CS):* https://www.mediafire.com/file/uwf5cq9u8tjg44x/specialforcesgroup2-421.apk/file
`);
              break;
            case "jogo23":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳️ *Roblox:* https://apkadmin.com/k05ck2q6ioo1/ROBLOX_v2.459.415955_MOD_MENU.apk.html
`);
              break;
            case "jogo24":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Critical Striker:* https://www.mediafire.com/file/7yqmk1gn4wrieri/CRITICAL_STRIKE.zip/file
`);
              break;
            case "jogo25":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Dream League Soccer:* http://www.mediafire.com/file/yuw9n5d4phzz5wg/Dream_League_Soccer_2019_v6.13-mod.apk/file
`);
              break;
            case "jogo26":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Clash of Clans:* http://www.mediafire.com/file/aoaem76tyg0hvfv/Clash_Of_Clans_v13.675.6_MOD.apk/file
`);
              break;
            case "jogo27":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Criminal Case Paris:* http://www.mediafire.com/fil...e/i5pbv8d7yjbbtly/Criminal%20Case%20Paris%20v2.36.1-mod.apk/file
`);
              break;

            case "jogo28":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Drift Max World:* https://www.mediafire.com/file/hqui6asekutsocq/DRIFT+MAX+WORLD+DINHEIRO+INFINITO.zip/file`);
              break;

            case "jogo29":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Downhill Masters:* https://www.mediafire.com/file/9cdgreyc8amkto9/Downhill_Masters_v1.0.59_MOD.apk/file`);
              break;
            case "jogosamp":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

☕ IP DO SERVIDOR DO MEU CRIADOR: 23.88.73.88:11627

🎳 *SA-MP:* https://play.google.com/store/apps/details?id=ru.unisamp_mobile.launcher`);
              break;

            case "jogo30":
              await reply(`Olá ${pushname}, aqui está o seu pedido, espero que você goste!
🪀 *Número:* @${sender.split("@")[0]}

🎳 *Monopoly:* https://www.mediafire.com/file/q5jfi61xwbqiu2x/Monopoly-v1-7-11-mod.zip/file`);
              break;

            //======================================\\

            //===(ZOUEIRAS/BRINCADEIRAS/HUMOR)===\\

            case "nick":
            case "fazernick":
            case "fn":
            case "gerarnick":
              try {
                if (ANT_LTR_MD_EMJ(q))
                  return reply("Não pode letras modificadas nem emoji..");
                if (!q)
                  return reply(
                    `Escreveva um nome para eu enviar ele com letras modificadas, Exemplo: ${
                      prefix + command
                    } Ets de Vaginas`
                  );
                RYUU = await fetchJson(
                  `https://miwa-apis.online/api/fazernick?nome=${q}&apikey=` +
                    API_KEY_MIWA
                );
                AB = `🎗𝐍𝐈𝐂𝐊𝐒 𝐆𝐄𝐑𝐀𝐃𝐎𝐒 𝐂𝐎𝐌 𝐒𝐔𝐂𝐄𝐒𝐒𝐎🎗`;
                caixa = [];
                for (i of RYUU) {
                  caixa.push({
                    title: `⇒ ` + i,
                    body: `Selecione aqui...`,
                    command: prefix + `copynick ` + i,
                  });
                }
                sendButton(
                  from,
                  { text: AB, footer: NomeDoBot },
                  miwa,
                  sender,
                  [
                    {
                      type: `list`,
                      title: `〘 𝗡𝗜𝗖𝗞𝙎 𝗔𝗤𝗨𝗜 〙`,
                      rowId: [{ title: `Ets de Vaginas`, options: caixa }],
                    },
                  ],
                  info
                );
              } catch (e) {
                return reply("Erro..");
              }
              break;

            case "copynick":
              if (!q) return;
              sendButton(
                from,
                { text: ` *Nick gerado com sucesso:* ${q}`, footer: NomeDoBot },
                miwa,
                sender,
                [
                  {
                    type: `copy_text`,
                    text: `CLIQUE AQUI PARA COPIAR`,
                    url: q,
                  },
                ],
                info
              );
              break;

            case "gerarnick2": {
              const args = q.split(" ");
              const nome = args.slice(0).join(" ");
              if (!nome) return reply("Digite um nome para gerar o nickname.");

              const estilos = {
                a: ["𝒶", "𝒜", "𝓐", "𝔞", "𝓪", "𝒶", "𝕒", "𝒶", "𝒶", "𝓐"],
                b: ["𝒷", "𝐵", "𝓑", "𝔟", "𝓫", "𝒷", "𝕓", "𝓫", "𝒷", "𝓑"],
                c: ["𝒸", "𝒞", "𝓒", "𝔠", "𝓬", "𝒸", "𝕔", "𝓬", "𝒸", "𝓒"],
                d: ["𝒹", "𝐷", "𝓓", "𝔡", "𝓭", "𝒹", "𝕕", "𝓭", "𝒹", "𝓓"],
                e: ["𝒺", "𝐸", "𝓔", "𝔢", "𝓮", "𝒺", "𝕖", "𝓮", "𝒺", "𝓔"],
                f: ["𝒻", "𝐹", "𝓕", "𝔣", "𝓯", "𝒻", "𝕗", "𝓯", "𝒻", "𝓕"],
                g: ["𝒼", "𝒢", "𝓖", "𝔤", "𝓰", "𝒼", "𝕘", "𝓰", "𝒼", "𝓖"],
                h: ["𝒽", "𝐻", "𝓗", "𝔥", "𝓱", "𝒽", "𝕙", "𝓱", "𝒽", "𝓗"],
                i: ["𝒾", "𝐼", "𝓘", "𝔦", "𝓲", "𝒾", "𝕚", "𝓲", "𝒾", "𝓘"],
                j: ["𝒿", "𝒥", "𝓙", "𝔧", "𝓳", "𝒿", "𝕛", "𝓳", "𝒿", "𝓙"],
                k: ["𝒦", "𝐾", "𝓚", "𝔨", "𝓴", "𝒦", "𝕜", "𝓴", "𝒦", "𝓚"],
                l: ["𝓁", "𝐿", "𝓛", "𝔩", "𝓵", "𝓁", "𝕝", "𝓵", "𝓁", "𝓛"],
                m: ["𝓂", "𝑀", "𝓜", "𝔪", "𝓶", "𝓂", "𝕞", "𝓶", "𝓂", "𝓜"],
                n: ["𝓃", "𝒩", "𝓝", "𝔫", "𝓷", "𝓃", "𝕟", "𝓷", "𝓃", "𝓝"],
                o: ["𝑜", "𝒪", "𝓞", "𝔬", "𝓸", "𝑜", "𝕠", "𝓸", "𝑜", "𝓞"],
                p: ["𝓅", "𝒫", "𝓟", "𝔭", "𝓹", "𝓅", "𝕡", "𝓹", "𝓅", "𝓟"],
                q: ["𝓆", "𝒬", "𝓠", "𝔮", "𝓺", "𝓆", "𝕢", "𝓺", "𝓆", "𝓠"],
                r: ["𝓇", "𝑅", "𝓡", "𝔯", "𝓻", "𝓇", "𝕣", "𝓻", "𝓇", "𝓡"],
                s: ["𝓈", "𝒮", "𝓢", "𝔰", "𝓼", "𝓈", "𝕤", "𝓼", "𝓈", "𝓢"],
                t: ["𝓉", "𝒯", "𝓣", "𝔱", "𝓽", "𝓉", "𝕥", "𝓽", "𝓉", "𝓣"],
                u: ["𝓊", "𝒰", "𝓤", "𝔲", "𝓾", "𝓊", "𝕦", "𝓾", "𝓊", "𝓤"],
                v: ["𝓋", "𝒱", "𝓥", "𝔳", "𝓿", "𝓋", "𝕧", "𝓿", "𝓋", "𝓥"],
                w: ["𝓌", "𝒲", "𝓦", "𝔴", "𝓹", "𝓌", "𝕨", "𝓹", "𝓌", "𝓦"],
                x: ["𝓍", "𝒳", "𝓧", "𝔵", "𝓧", "𝓍", "𝕩", "𝓧", "𝓍", "𝓧"],
                y: ["𝓎", "𝒴", "𝓨", "𝔶", "𝓨", "𝓎", "𝕪", "𝓨", "𝓎", "𝓨"],
                z: ["𝓏", "𝒵", "𝓩", "𝔫", "𝓩", "𝓏", "𝕫", "𝓩", "𝓏", "𝓩"],
                A: ["𝒜", "𝐵", "𝒞", "𝒟", "𝐸", "𝐹", "𝒢", "𝐻", "𝐼", "𝒥"],
                B: ["𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                C: ["𝒞", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                D: ["𝐷", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                E: ["𝐸", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                F: ["𝐹", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                G: ["𝒢", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                H: ["𝐻", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                I: ["𝐼", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                J: ["𝒥", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                K: ["𝒦", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                L: ["𝐿", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                M: ["𝒩", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                N: ["𝒩", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                O: ["𝒪", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                P: ["𝒫", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                Q: ["𝒬", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                R: ["𝑅", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                S: ["𝒮", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                T: ["𝒯", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                U: ["𝒰", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                V: ["𝒱", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                W: ["𝒲", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                X: ["𝒳", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                Y: ["𝒴", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
                Z: ["𝒵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵", "𝐵"],
              };

              const nickname = nome
                .split("")
                .map((char) => {
                  const styles = estilos[char] || [char];
                  return styles[Math.floor(Math.random() * styles.length)];
                })
                .join("");

              reply(`Aqui está o seu nickname estilizado: ${nickname}`);
              break;
            }
            case "chance":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              var avb = body.slice(7);
              if (args.length < 1)
                return miwa.sendMessage(
                  from,
                  {
                    text: `Você precisa digitar da forma correta\nExemplo: ${prefix}chance do luuck ser gay`,
                  },
                  { quoted: info }
                );
              chance = `${Math.floor(Math.random() * 100)}`;
              hasil = `A chance ${body.slice(8)}\n\né de... ${chance}%`;
              miwa.sendMessage(
                from,
                { text: hasil, mentions: [sender] },
                { quoted: info }
              );
              break;

            case "nazista":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              miwa.sendMessage(from, {
                text: `❰ Pesquisando a sua ficha de nazista : @${
                  sender_ou_n.split("@")[0]
                } aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                nazista = `${Math.floor(Math.random() * 110)}`;
                miwa.sendMessage(
                  from,
                  {
                    image: { url: imgnazista },
                    caption: `O quanto você é nazista? \n\n「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${nazista}% ❱  nazista 卐`,
                    mentions: [sender_ou_n],
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "gay":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              miwa.sendMessage(from, {
                text: `❰ Pesquisando a sua ficha de gay : @${
                  sender_ou_n.split("@")[0]
                } aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                gay = `${Math.floor(Math.random() * 110)}`;
                feio = gay;
                boiola = gay;
                if (boiola < 20) {
                  var bo = "hmm... você é hetero😔";
                } else if (boiola == 21) {
                  var bo = "+/- boiola";
                } else if (boiola == 23) {
                  var bo = "+/- boiola";
                } else if (boiola == 24) {
                  var bo = "+/- boiola";
                } else if (boiola == 25) {
                  var bo = "+/- boiola";
                } else if (boiola == 26) {
                  var bo = "+/- boiola";
                } else if (boiola == 27) {
                  var bo = "+/- boiola";
                } else if (boiola == 2) {
                  var bo = "+/- boiola";
                } else if (boiola == 29) {
                  var bo = "+/- boiola";
                } else if (boiola == 30) {
                  var bo = "+/- boiola";
                } else if (boiola == 31) {
                  var bo = "tenho minha desconfiança...😑";
                } else if (boiola == 32) {
                  var bo = "tenho minha desconfiança...😑";
                } else if (boiola == 33) {
                  var bo = "tenho minha desconfiança...😑";
                } else if (boiola == 34) {
                  var bo = "tenho minha desconfiança...😑";
                } else if (boiola == 35) {
                  var bo = "tenho minha desconfiança...😑";
                } else if (boiola == 36) {
                  var bo = "tenho minha desconfiança...😑";
                } else if (boiola == 37) {
                  var bo = "tenho minha desconfiança...😑";
                } else if (boiola == 3) {
                  var bo = "tenho minha desconfiança...😑";
                } else if (boiola == 39) {
                  var bo = "tenho minha desconfiança...😑";
                } else if (boiola == 40) {
                  var bo = "tenho minha desconfiança...😑";
                } else if (boiola == 41) {
                  var bo = "você é né?😏";
                } else if (boiola == 42) {
                  var bo = "você é né?😏";
                } else if (boiola == 43) {
                  var bo = "você é né?😏";
                } else if (boiola == 44) {
                  var bo = "você é né?😏";
                } else if (boiola == 45) {
                  var bo = "você é né?😏";
                } else if (boiola == 46) {
                  var bo = "você é né?😏";
                } else if (boiola == 47) {
                  var bo = "você é né?😏";
                } else if (boiola == 4) {
                  var bo = "você é né?😏";
                } else if (boiola == 49) {
                  var bo = "você é né?😏";
                } else if (boiola == 50) {
                  var bo = "você é ou não?🧐";
                } else if (boiola > 51) {
                  var bo = "você é gay🙈";
                }
                miwa.sendMessage(
                  from,
                  {
                    image: { url: imggay },
                    caption: `  O quanto você é gay? \n\n 「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${gay}% ❱ gay 🏳️‍🌈\n\n${bo}`,
                    mentions: [sender_ou_n],
                    thumbnail: null,
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "feio":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              miwa.sendMessage(from, {
                text: `❰ Pesquisando a sua ficha de feio : @${
                  sender_ou_n.split("@")[0]
                } aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                feio = `${Math.floor(Math.random() * 110)}`;
                if (feio < 20) {
                  var bo = "É não é feio";
                } else if (feio == 21) {
                  var bo = "+/- feio";
                } else if (feio == 23) {
                  var bo = "+/- feio";
                } else if (feio == 24) {
                  var bo = "+/- feio";
                } else if (feio == 25) {
                  var bo = "+/- feio";
                } else if (feio == 26) {
                  var bo = "+/- feio";
                } else if (feio == 27) {
                  var bo = "+/- feio";
                } else if (feio == 2) {
                  var bo = "+/- feio";
                } else if (feio == 29) {
                  var bo = "+/- feio";
                } else if (feio == 30) {
                  var bo = "+/- feio";
                } else if (feio == 31) {
                  var bo = "Ainda tá na média";
                } else if (feio == 32) {
                  var bo = "Da pra pegar umas(ns) novinha(o) ainda";
                } else if (feio == 33) {
                  var bo = "Da pra pegar umas(ns) novinha(o) ainda";
                } else if (feio == 34) {
                  var bo = "É fein, mas tem baum coração";
                } else if (feio == 35) {
                  var bo = "Tá na média, mas não deixa de ser feii";
                } else if (feio == 36) {
                  var bo = "Bonitin mas é feio com orgulho";
                } else if (feio == 37) {
                  var bo = "Feio e preguiçoso(a), vai se arrumar praga feia";
                } else if (feio == 3) {
                  var bo = "tenho ";
                } else if (feio == 39) {
                  var bo = "Feio, mas um banho E se arrumar, deve resolver";
                } else if (feio == 40) {
                  var bo =
                    "FeiN,  mas não existe gente feia, existe gente que não conhece os produtos jequity";
                } else if (feio == 41) {
                  var bo = "você é Feio, mas é legal, continue assim";
                } else if (feio == 42) {
                  var bo =
                    "Nada que uma maquiagem e se arrumar, que não resolva 🥴";
                } else if (feio == 43) {
                  var bo =
                    "Feio que dói de ver, compra uma máscara que melhora";
                } else if (feio == 44) {
                  var bo =
                    "Feio mas nada que um saco na cabeça não resolva né!?";
                } else if (feio == 45) {
                  var bo = "você é feio, mas tem bom gosto";
                } else if (feio == 46) {
                  var bo = "Feio mas tem muitos amigos";
                } else if (feio == 47) {
                  var bo = "Feio mas tem lábia pra pegar várias novinha";
                } else if (feio == 4) {
                  var bo = "Feio e ainda não sabe se vestir, vixi";
                } else if (feio == 49) {
                  var bo = "Feiooo";
                } else if (feio == 50) {
                  var bo = "você é Feio, mas não se encherga 🧐";
                } else if (feio > 51) {
                  var bo = "você é Feio demais 🙈";
                }

                miwa.sendMessage(
                  from,
                  {
                    image: { url: imgfeio },
                    caption: `  O quanto você é feio? \n\n 「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${feio}% ❱ feio 🙉\n\n${bo}`,
                    mentions: [sender_ou_n],
                    thumbnail: null,
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "corno":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              miwa.sendMessage(from, {
                text: ` ❰ Pesquisando a ficha de corno : @${
                  sender_ou_n.split("@")[0]
                }, aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                corno = `${Math.floor(Math.random() * 110)}`;
                miwa.sendMessage(
                  from,
                  {
                    image: { url: imgcorno },
                    caption: ` O quanto você é corno? \n\n 「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${corno}% ❱  corno 🐃`,
                    mentions: [sender_ou_n],
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "vesgo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              miwa.sendMessage(from, {
                text: `❰ Pesquisando a ficha de vesgo : @${
                  sender_ou_n.split("@")[0]
                }, aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                vesgo = `${Math.floor(Math.random() * 110)}`;
                miwa.sendMessage(
                  from,
                  {
                    image: { url: imgvesgo },
                    caption: `O quanto você é vesgo? \n\n「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${vesgo}% ❱  Vesgo 🙄😆`,
                    mentions: [sender_ou_n],
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "bebado":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              miwa.sendMessage(from, {
                text: `❰ Pesquisando a ficha de bebado : @${
                  sender_ou_n.split("@")[0]
                } , aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                bebado = `${Math.floor(Math.random() * 110)}`;
                miwa.sendMessage(
                  from,
                  {
                    image: { url: imgbebado },
                    caption: `O quanto você é bebado? \n\n「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${bebado}% ❱ Bêbado 🤢🥵🥴`,
                    mentions: [sender_ou_n],
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "gado":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              miwa.sendMessage(from, {
                text: `❰ Pesquisando a ficha de gado : @${
                  sender_ou_n.split("@")[0]
                }, aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                gado = `${Math.floor(Math.random() * 110)}`;
                miwa.sendMessage(
                  from,
                  {
                    image: { url: imggado },
                    caption: `O quanto você é gado? \n\n「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${gado}% ❱  gado 🐂`,
                    mentions: [sender_ou_n],
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "gostoso":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              miwa.sendMessage(from, {
                text: ` ❰ Pesquisando a sua ficha de gostoso : @${
                  sender_ou_n.split("@")[0]
                } aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                gostoso = `${Math.floor(Math.random() * 110)}`;
                miwa.sendMessage(
                  from,
                  {
                    image: { url: imggostoso },
                    caption: `O quanto você é gostoso? 😏\n\n「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${gostoso}% ❱ gostoso 😝`,
                    gifPlayback: true,
                    mentions: [sender_ou_n],
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "gostosa":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              miwa.sendMessage(from, {
                text: `❰ Pesquisando a sua ficha de gostosa : @${
                  sender_ou_n.split("@")[0]
                } aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                gostosa = `${Math.floor(Math.random() * 110)}`;
                miwa.sendMessage(
                  from,
                  {
                    image: { url: imggostosa },
                    caption: `O quanto você é gostosa? 😏\n\n「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${gostosa}% ❱ gostosa 😳`,
                    mentions: [sender_ou_n],
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "matar":
            case "mata":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              if (!menc_os2 || menc_jid2[1])
                return reply(
                  "marque o alvo que você quer matar, a mensagem ou o @"
                );
              miwa.sendMessage(
                from,
                {
                  video: { url: matarcmd },
                  gifPlayback: true,
                  caption: `Você Acabou de matar o(a) @${
                    menc_os2.split("@")[0]
                  } 😈👹`,
                  mentions: [menc_os2],
                },
                { quoted: info }
              );
              break;

              case "dibuiar":
                if (!isGroup) return reply(mess.onlyGroup());
                if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              
                // Verificando se a marcação foi feita corretamente
                if (!menc_os2 || !menc_jid2[0]) {
                  return reply("Marque o alvo que você quer dibuiar, seja a mensagem ou o @");
                }
              
                miwa.sendMessage(
                  from,
                  {
                    video: { url: `https://s11.gifyu.com/images/SACVQ.gif` },
                    gifPlayback: true,
                    caption: `Você acabou de dibuiar @${
                      menc_os2.split("@")[0]
                    } 😈👹`,
                    mentions: [menc_jid2[0]], // Usa menc_jid2 corretamente para mencionar a pessoa
                  },
                  { quoted: info }
                );
                break;
                  

            case "beijo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              if (!menc_os2 || menc_jid2[1])
                return reply(
                  "marque a pessoa que você quer beijar, a mensagem ou o @"
                );
              miwa.sendMessage(
                from,
                {
                  video: { url: beijocmd },
                  gifPlayback: true,
                  caption: `Você deu um beijo gostoso na(o) @${
                    menc_os2.split("@")[0]
                  } 😁👉👈❤`,
                  mentions: [menc_os2],
                },
                { quoted: info }
              );
              break;

            case "biografia":
              try {
                var status = await miwa.fetchStatus(marc_tds);
              } catch {
                var status = "Privado ou inexistente. ";
              }
              reply(status);
              break;

            case "tapa":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              if (!menc_os2 || menc_jid2[1])
                return reply(
                  "marque o alvo que você quer da um tapa, a mensagem ou o @"
                );
              miwa.sendMessage(
                from,
                {
                  video: { url: tapacmd },
                  gifPlayback: true,
                  caption: `Você Acabou de da um tapa na raba da😏 @${
                    menc_os2.split("@")[0]
                  } 🔥`,
                  mentions: [menc_os2],
                },
                { quoted: info }
              );
              break;

            case "chute":
            case "chutar":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              if (!menc_os2 || menc_jid2[1])
                return reply(
                  "marque o alvo que você quer da um chute, a mensagem ou o @"
                );
              miwa.sendMessage(
                from,
                {
                  video: { url: chutecmd },
                  gifPlayback: true,
                  caption: `Você Acabou de da um chute em @${
                    menc_os2.split("@")[0]
                  } 🤡`,
                  mentions: [menc_os2],
                },
                { quoted: info }
              );
              break;

            case "dogolpe":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              if (!menc_os2 || menc_jid2[1])
                return reply(
                  "Marque a mensagem com o comando ou marque o @ do usuário.."
                );
              golpe = `${Math.floor(Math.random() * 100)}`;
              miwa.sendMessage(from, {
                text: `*GOLPISTA ENCONTRADO👉🏻*\n\n*GOLPISTA* : *@${
                  menc_os2.split("@")[0]
                }*\n*PORCENTAGEM DO GOLPE* : ${golpe}%😂\n\nEle(a) gosta de ferir sentimentos 😢`,
                mentions: [menc_os2],
              });
              break;

            case "shipo":
              if (!menc_jid2)
                return reply(
                  "Marque uma pessoa do grupo para encontrar o par dela"
                );
              mention(
                `*Hmmm.... Eu Shipo eles 2💘💘*\n\n1 = @${
                  groupMembers[
                    Math.floor(Math.random() * groupMembers.length)
                  ].id.split("@")[0]
                }\n && 2 = ${menc_jid2.split("@")[0]} com uma porcentagem de: ${
                  Math.floor(Math.random() * 100) + "%"
                }`
              );
              break;

            case "casal":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              mention(
                `*Hmmm.... Eu Shipo eles 2💘💘*\n\n1= @${
                  groupMembers[
                    Math.floor(Math.random() * groupMembers.length)
                  ].id.split("@")[0]
                }\ne esse\n2= @${
                  groupMembers[
                    Math.floor(Math.random() * groupMembers.length)
                  ].id.split("@")[0]
                }\ncom uma porcentagem de: ${
                  Math.floor(Math.random() * 100) + "%"
                }`
              );
              break;

            case "ranklevel":
            case "rankpatente":
              var i3 = countMessage.map((i) => i.groupId).indexOf(from);
              var blue = countMessage[i3].numbers.map((i) => i);
              blue.sort((a, b) =>
                (a.figus == undefined
                  ? (a.figus = 0)
                  : a.figus + a.messages + a.cmd_messages + a.figus) <
                (b.figus == undefined
                  ? (b.figus = 0)
                  : b.figus + b.cmd_messages + b.messages + b.figus)
                  ? 0
                  : -1
              );
              menc = [];
              blad = `
*🏆 Rank de level e patentes no grupo:* ${groupName}\n`;
              for (i = 0; i < (blue.length < 5 ? blue.length : 5); i++) {
                var i5 = patentes.map((i) => i.grupoID).indexOf(from);
                var i6 = patentes[i5].usus.map((i) => i.id).indexOf(blue[i].id);
                if (i != null)
                  blad += `
*🏅 ${i + 1}º Lugar:* @${blue[i].id.split("@")[0]}
▢ Level do usuário atualmente: ${
                    patentes[i5].usus[i6].level_usu
                  }\n▢ Patente atual do usuário: ${
                    patentes[i5].usus[i6].patente_usu
                  }\n`;
                menc.push(blue[i].id);
              }
              mentions(blad, menc, true);
              break;

            case "rankativos":
            case "rankativo":
              if (!isGroup) return reply(mess.onlyGroup());
              var i3 = countMessage.map((i) => i.groupId).indexOf(from);
              var blue = countMessage[i3].numbers.map((i) => i);
              blue.sort((a, b) =>
                (a.figus == undefined
                  ? (a.figus = 0)
                  : a.figus + a.messages + a.cmd_messages) <
                (b.figus == undefined
                  ? (b.figus = 0)
                  : b.figus + b.cmd_messages + b.messages)
                  ? 0
                  : -1
              );
              menc = [];
              blad = `
*🏆 Rank dos mais ativos no grupo:* ${groupName}\n`;
              for (i = 0; i < (blue.length < 5 ? blue.length : 5); i++) {
                var i5 = patentes.map((i) => i.grupoID).indexOf(from);
                var i6 = patentes[i5].usus.map((i) => i.id).indexOf(blue[i].id);
                if (i != null)
                  blad += `
*🏅 ${i + 1}º Lugar:* @${blue[i].id.split("@")[0]}
▢ Mensagens encaminhadas: ${blue[i].messages}
▢ Comandos executados: ${blue[i].cmd_messages}
▢ Patente do Usuário: ${patentes[i5].usus[i6].patente_usu}
▢ Usuário conectado em: ${blue[i].aparelho}
▢ Figurinhas enviadas: ${blue[i].figus}\n`;
                menc.push(blue[i].id);
              }
              mentions(blad, menc, true);
              break;

            case "rankinativo":
            case "rankinativos":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins) return reply(mess.onlyAdmins());
              bule = [];
              bule2 = [];
              mentioned_jid = [];
              for (cag of countMessage[ind].numbers) {
                bule2.push(cag.id);
                if (cag.messages <= 1) {
                  bule.push(cag);
                }
              }
              bule.sort((a, b) =>
                a.messages + a.cmd_messages < b.cmd_messages + b.messages
                  ? 0
                  : -1
              );
              boardi = `🗑 *Rank dos mais inativos do grupo:* ${groupName}\n\n`;
              if (bule.length == 0)
                boardi +=
                  "❌ Nenhum usuário inativo foi encontrado neste grupo.️";
              for (i = 0; i < (bule.length < 5 ? bule.length : 5); i++) {
                if (i != null)
                  boardi += `*🏅 ${i + 1}º Lugar:* @${
                    bule[i].id.split("@")[0]
                  }\n▢ Mensagens enviadas: ${
                    bule[i].messages
                  }\n▢ Comandos executados: ${
                    bule[i].cmd_messages
                  }\n▢ Usuário conectado em: ${bule[i].aparelho}\n\n`;
                mentioned_jid.push(bule[i].id);
              }
              mentions(boardi, mentioned_jid, true);
              break;

            case "checkativo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (groupIdscount.indexOf(from) < 0)
                return reply("O bot não tem ainda dados sobre o grupo");
              var ind = groupIdscount.indexOf(from);
              if (!menc_os2 || menc_jid2[1])
                return reply(
                  "Marque o @ de quem deseja puxar a atividade / Só pode um por vez.."
                );
              if (numbersIds.indexOf(menc_os2) >= 0) {
                var indnum = numbersIds.indexOf(menc_os2);
                var RSM_CN = countMessage[ind].numbers[indnum];
                mentions(
                  `Consulta individual da atividade do usuário @${
                    menc_os2.split("@")[0]
                  } no grupo: ${groupName}\n\n▢ Mensagens encaminhadas: ${
                    RSM_CN.messages
                  }\n▢ Comandos executados: ${
                    RSM_CN.cmd_messages
                  }\n▢ Usuário conectado em: ${
                    RSM_CN.aparelho
                  }\n▢ Figurinhas encaminhadas: ${RSM_CN.figus}`,
                  [menc_os2],
                  true
                );
              } else {
                mentions(
                  `Consulta individual da atividade do usuário @${
                    menc_os2.split("@")[0]
                  } no grupo: ${groupName}\n\n▢ Mensagens enviadas no grupo: 0\n▢ Comandos executados no grupo: 0\n▢ Usuário conectado em: Sem info.\n▢ Figurinhas enviadas no grupo: 0`,
                  [menc_os2],
                  true
                );
              }
              break;

            case "rankgay":
            case "rankgays":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              ABC = `*🤖RANK DOS 5 MAIS GAYS DO GRUPO [ ${groupName} ]🏳‍🌈*\n\n`;
              for (var i = 0; i < 5; i++) {
                ABC += `${Math.floor(Math.random() * 100)}% @${
                  somembros[Math.floor(Math.random() * somembros.length)].split(
                    "@"
                  )[0]
                }\n\n`;
              }
              mencionarIMG(ABC, rnkgay);
              break;

            case "rankgado":
            case "rankgados":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              ABC = `RANK DOS 5 MAIS GADO DO GRUPO 🐂🐃\n\n`;
              for (var i = 0; i < 5; i++) {
                ABC += `${Math.floor(Math.random() * 100)}% @${
                  somembros[Math.floor(Math.random() * somembros.length)].split(
                    "@"
                  )[0]
                }\n\n`;
              }
              mencionarIMG(ABC, rnkgado);
              break;

            case "rankcorno":
            case "rankcornos":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              ABC = `RANK DOS 5 MAIS CORNO DO GRUPO 🐂\n\n`;
              for (var i = 0; i < 5; i++) {
                ABC += `${Math.floor(Math.random() * 100)}% @${
                  somembros[Math.floor(Math.random() * somembros.length)].split(
                    "@"
                  )[0]
                }\n\n`;
              }
              mencionarIMG(ABC, rnkcorno);
              break;

            case "rankbi":
              miwa.sendMessage(from, {
                react: { text: `🏳‍🌈`, key: info.key },
              });
              if (!isGroup)
                return reply("Só pode ser utilizado este comando, em grupo.");
              try {
                if (!isGroup) return reply(mess.onlyGroup());
                let d = [];
                let teks = `ESSES SÃO OS BISSEXUAIS DO GRUPO!!🏳‍🌈
${groupName}🫣\n`;
                for (i = 0; i < 10; i++) {
                  let r = Math.floor(
                    Math.random() * groupMetadata.participants.length + 0
                  );
                  teks += `🏳‍🌈⋆͜͡҈➳ @${groupMembers[r].id.split("@")[0]}\n`;
                  d.push(groupMembers[r].id);
                }
                mentions(teks, d, true);
              } catch (e) {
                console.log(e);
                reply("Deu erro, tente novamente :/");
              }
              break;
            //BY: ᴷᴷᴳᴿ𝐄𝐑𝐈𝐂𝐊 | 𝟔𝟔𝟔 𖤐

            case "rankbv":
              miwa.sendMessage(from, { react: { text: `👄`, key: info.key } });
              if (!isGroup)
                return reply("Só pode ser utilizado este comando, em grupo.");
              try {
                if (!isGroup) return reply(mess.onlyGroup());
                let d = [];
                let teks = `ESSES SÃO OS QUE NÃO BEIJAM NINGUEM!!👄
${groupName}🫣\n`;
                for (i = 0; i < 10; i++) {
                  let r = Math.floor(
                    Math.random() * groupMetadata.participants.length + 0
                  );
                  teks += `👄⋆͜͡҈➳ @${groupMembers[r].id.split("@")[0]}\n`;
                  d.push(groupMembers[r].id);
                }
                mentions(teks, d, true);
              } catch (e) {
                console.log(e);
                reply("Deu erro, tente novamente :/");
              }
              break;
            //BY: ᴷᴷᴳᴿ𝐄𝐑𝐈𝐂𝐊 | 𝟔𝟔𝟔 𖤐

            case "rankbunduda":
              miwa.sendMessage(from, { react: { text: `🤡`, key: info.key } });
              if (!isGroup)
                return reply("Só pode ser utilizado este comando, em grupo.");
              try {
                if (!isGroup) return reply(mess.onlyGroup());
                let d = [];
                let teks = `🫣ESSES(AS) SÃO OS MAIS BUNDUDAS(AS) DO GRUPO ${groupName}🫣\n`;
                for (i = 0; i < 10; i++) {
                  let r = Math.floor(
                    Math.random() * groupMetadata.participants.length + 0
                  );
                  teks += `🫣⋆͜͡҈➳ @${groupMembers[r].id.split("@")[0]}\n`;
                  d.push(groupMembers[r].id);
                }
                mentions(teks, d, true);
              } catch (e) {
                console.log(e);
                reply("Deu erro, tente novamente :/");
              }
              break;
            //BY: ᴷᴷᴳᴿ𝐄𝐑𝐈𝐂𝐊 | 𝟔𝟔𝟔 𖤐

            case "anjo":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn)
                return reply(
                  `Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite ${prefix}modobrincadeira 1`
                );
              miwa.sendMessage(from, {
                text: `❰ Avaliando seu nível angelical : @${
                  sender_ou_n.split("@")[0]
                } aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                anjo = `${Math.floor(Math.random() * 100)}`;
                if (anjo < 20) {
                  var bo = "Você é bem terreno... 😇";
                } else if (anjo < 40) {
                  var bo = "Você tem traços angelicais 😇";
                } else if (anjo < 60) {
                  var bo = "Você é um anjo 😇";
                } else if (anjo < 80) {
                  var bo = "Você é um anjo celestial! 😇";
                } else {
                  var bo = "Você é um arcanjo divino! 😇✨";
                }
                miwa.sendMessage(
                  from,
                  {
                    image: {
                      url: "https://telegra.ph/file/ddba48c868d7db5fdbbcd.jpg",
                    },
                    caption: `O quanto você é anjo? \n\n 「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${anjo}% ❱ anjo 😇✨\n\n${bo}`,
                    mentions: [sender_ou_n],
                    thumbnail: null,
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "magico":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn)
                return reply(
                  `Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite ${prefix}modobrincadeira 1`
                );
              miwa.sendMessage(from, {
                text: `❰ Avaliando seu nível de magia : @${
                  sender_ou_n.split("@")[0]
                } aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                magico = `${Math.floor(Math.random() * 100)}`;
                if (magico < 20) {
                  var bo = "Você é bem mundano... 🧙";
                } else if (magico < 40) {
                  var bo = "Você tem traços mágicos 🪄";
                } else if (magico < 60) {
                  var bo = "Você é um > 🧙";
                } else if (magico < 80) {
                  var bo = "Você é um mago poderoso! 🧙";
                } else {
                  var bo = "Você é o mestre dos magos! 🧙✨";
                }
                miwa.sendMessage(
                  from,
                  {
                    image: {
                      url: "https://telegra.ph/file/bc46ce223a0cf3534d01f.jpg",
                    },
                    caption: `O quanto você é mágico? \n\n 「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${random}% ❱ mágico 🧙✨\n\n${bo}`,
                    mentions: [sender_ou_n],
                    thumbnail: null,
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "espiao":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn)
                return reply(
                  `Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite ${prefix}modobrincadeira 1`
                );
              miwa.sendMessage(from, {
                text: `❰ Avaliando suas habilidades de espionagem : @${
                  sender_ou_n.split("@")[0]
                } aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                espiao = `${Math.floor(Math.random() * 100)}`;
                if (espiao < 20) {
                  var bo = "Você é bem perceptível... 👀";
                } else if (espiao < 40) {
                  var bo = "Você tem habilidades de espião 🕵️‍♂️";
                } else if (espiao < 60) {
                  var bo = "Você é um espião 🕵️‍♂️";
                } else if (espiao < 80) {
                  var bo = "Você é um espião profissional! 🕵️‍♂️";
                } else {
                  var bo = "Você é o melhor espião do mundo! 🕵️‍♂️🌍";
                }
                miwa.sendMessage(
                  from,
                  {
                    image: {
                      url: "https://telegra.ph/file/807e6bdbdf0fae348fa83.jpg",
                    },
                    caption: `O quanto você é espião? \n\n 「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${espiao}% ❱ espião 🕵️‍♂️🌍\n\n${bo}`,
                    mentions: [sender_ou_n],
                    thumbnail: null,
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            //BY: ᴷᴷᴳᴿ𝐄𝐑𝐈𝐂𝐊 | 𝟔𝟔𝟔 𖤐

            case "mago":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn)
                return reply(
                  `Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite ${prefix}modobrincadeira 1`
                );
              miwa.sendMessage(from, {
                text: `❰ Avaliando suas habilidades mágicas : @${
                  sender_ou_n.split("@")[0]
                } aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                mago = `${Math.floor(Math.random() * 100)}`;
                if (mago < 20) {
                  var bo = "Você é um aprendiz de magia... 🧙‍♂️";
                } else if (mago < 40) {
                  var bo = "Você tem alguma habilidade mágica 🧙‍♂️";
                } else if (mago < 60) {
                  var bo = "Você é um mago em treinamento! 🧙‍♂️";
                } else if (mago < 80) {
                  var bo = "Você é um mago habilidoso! 🧙‍♂️";
                } else {
                  var bo = "Você é um mago supremo! 🧙‍♂️✨";
                }
                miwa.sendMessage(
                  from,
                  {
                    image: {
                      url: "https://telegra.ph/file/0a4976a9e00133bd45cf8.jpg",
                    },
                    caption: `O quanto você é um mago? \n\n 「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${mago}% ❱ mago 🧙‍♂️✨\n\n${bo}`,
                    mentions: [sender_ou_n],
                    thumbnail: null,
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "samurai":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn)
                return reply(
                  `Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite ${prefix}modobrincadeira 1`
                );
              miwa.sendMessage(from, {
                text: `❰ Avaliando suas habilidades de samurai : @${
                  sender_ou_n.split("@")[0]
                } aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                samurai = `${Math.floor(Math.random() * 100)}`;
                if (samurai < 20) {
                  var bo = "Você está mais para guerreiro comum... 🗡️";
                } else if (samurai < 40) {
                  var bo = "Você tem espírito de samurai! 🗡️";
                } else if (samurai < 60) {
                  var bo = "Você é um samurai em treinamento! 🗡️";
                } else if (samurai < 80) {
                  var bo = "Você é um samurai habilidoso! 🗡️";
                } else {
                  var bo = "Você é um mestre samurai! 🗡️👹";
                }
                miwa.sendMessage(
                  from,
                  {
                    image: {
                      url: "https://telegra.ph/file/7a02ebd19c954ffa72c32.jpg",
                    },
                    caption: `O quanto você é samurai? \n\n 「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${samurai}% ❱ samurai 🗡️👹\n\n${bo}`,
                    mentions: [sender_ou_n],
                    thumbnail: null,
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "maquina":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn)
                return reply(
                  `Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite ${prefix}modobrincadeira 1`
                );
              miwa.sendMessage(from, {
                text: `❰ Avaliando suas habilidades de viagem no tempo : @${
                  sender_ou_n.split("@")[0]
                } aguarde... ❱`,
                mentions: [sender_ou_n],
              });
              setTimeout(async () => {
                maquina = `${Math.floor(Math.random() * 100)}`;
                if (maquina < 20) {
                  var bo = "Você ainda não tem controle sobre o tempo... ⏳";
                } else if (maquina < 40) {
                  var bo = "Você tem algumas habilidades temporais ⏳";
                } else if (maquina < 60) {
                  var bo = "Você é um viajante do tempo em treinamento! ⏳";
                } else if (maquina < 80) {
                  var bo = "Você é um mestre da viagem no tempo! ⏳";
                } else {
                  var bo = "Você domina o tempo como ninguém! ⏳✨";
                }
                miwa.sendMessage(
                  from,
                  {
                    image: {
                      url: "https://telegra.ph/file/d91e84ca89235dd780db0.jpg",
                    },
                    caption: `O quanto você domina a viagem no tempo? \n\n 「 @${
                      sender_ou_n.split("@")[0]
                    } 」Você é: ❰ ${maquina}% ❱ mestre da viagem no tempo ⏳✨\n\n${bo}`,
                    mentions: [sender_ou_n],
                    thumbnail: null,
                  },
                  { quoted: info }
                );
              }, 7000);
              break;

            case "rankcu":
              {
                if (!isGroup) return reply("Apenas em grupos");

                let ABC =
                  "*🍁 ⌁ Esses são as pessoas que dar mais o cu e a bct do Grupo ⌁🍁\n";

                const mensagens = [
                  "NAO DEU NADA🥲",
                  "DEU O CU E A BCT",
                  "GOSTOSA (O) JA DEU O CU.",
                  "GOSTOSA (O) JA DEU O CU",
                ];

                for (let i = 0; i < 5; i++) {
                  const membro =
                    groupMembers[
                      Math.floor(Math.random() * groupMembers.length)
                    ].id.split("@")[0];
                  const mensagem =
                    mensagens[Math.floor(Math.random() * mensagens.length)];
                  ABC += `*│* 🏅 @${membro}\n*│➥ ${mensagem}*\n`;
                }

                ABC += "*╰────────────*";
                //mencionarIMG(ABC, rnkgado);
                miwa.sendMessage(from, { text: ABC }, { quoted: info });
              }
              break;

            case "socar":
              if (!isGroup)
                return reply("Só pode ser utilizado este comando, em grupo.");
              if (!menc_os2 || menc_jid2[1])
                return reply(
                  "marque o alvo que você quer da um soco, a mensagem ou o @"
                );
              txtkk = [
                `Ei @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu um golpe fatal!`,
                `Atenção @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } acabou de te nocautear!`,
                `Olá @${menc_os2.split("@")[0]}, você foi atingido pelo ${
                  sender.split("@")[0]
                }!`,
                `Ei @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te derrubou com um soco!`,
                `Aviso @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } acabou de te acertar!`,
                `Oi @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu uma surra!`,
                `Atenção @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu um golpe forte!`,
                `Olá @${menc_os2.split("@")[0]}, você foi socado pelo ${
                  sender.split("@")[0]
                }!`,
                `Ei @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu uma surra épica!`,
                `Aviso @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } acabou de te derrubar!`,
                `Olá @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te acertou em cheio!`,
                `Atenção @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu uma surra incrível!`,
                `Oi @${menc_os2.split("@")[0]}, você levou um golpe de ${
                  sender.split("@")[0]
                }!`,
                `Ei @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu um soco devastador!`,
                `Olá @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } acabou de te derrubar com um soco!`,
                `Aviso @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu uma surra monumental!`,
                `Oi @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } acabou de te acertar um soco!`,
                `Atenção @${menc_os2.split("@")[0]}, você levou uma surra do ${
                  sender.split("@")[0]
                }!`,
                `Ei @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te derrubou com um golpe poderoso!`,
                `Olá @${
                  menc_os2.split("@")[0]
                }, você foi atingido por um soco de ${sender.split("@")[0]}!`,
                `Olá @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } está te esmurrando!`,
                `Ei @${
                  menc_os2.split("@")[0]
                }, você está levando uma surra de ${sender.split("@")[0]}!`,
                `Aviso @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } está te golpeando!`,
                `Oi @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu uma surra memorável!`,
                `Atenção @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te nocauteou com um soco!`,
                `Olá @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } está te dando um golpe brutal!`,
                `Ei @${
                  menc_os2.split("@")[0]
                }, você foi atingido fortemente por ${sender.split("@")[0]}!`,
                `Aviso @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te acertou com tudo!`,
                `Oi @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } acabou de te esmagar com um soco!`,
                `Atenção @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu um soco implacável!`,
                `Olá @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } está te dando uma surra histórica!`,
                `Ei @${
                  menc_os2.split("@")[0]
                }, você levou um soco fenomenal de ${sender.split("@")[0]}!`,
                `Aviso @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu um golpe formidável!`,
                `Oi @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te acertou um soco arrasador!`,
                `Atenção @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } está te espancando!`,
                `Olá @${menc_os2.split("@")[0]}, você está sendo socado por ${
                  sender.split("@")[0]
                }!`,
                `Ei @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu um soco avassalador!`,
                `Aviso @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te derrubou com um golpe intenso!`,
                `Oi @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te acertou um soco potente!`,
                `Atenção @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } acabou de te nocautear com um soco avassalador!`,
                `Olá @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } está te esmagando com socos!`,
                `Ei @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } acabou de te dar uma surra fenomenal!`,
                `Aviso @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu um soco brutal!`,
                `Oi @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } está te esmagando com força!`,
                `Atenção @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te derrubou com um golpe formidável!`,
                `Olá @${menc_os2.split("@")[0]}, você levou uma surra de ${
                  sender.split("@")[0]
                }!`,
                `Ei @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te acertou um soco destruidor!`,
                `Aviso @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } acabou de te derrubar com um golpe!`,
                `Oi @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } está te espancando sem piedade!`,
                `Atenção @${
                  menc_os2.split("@")[0]
                }, você foi atingido por um soco poderoso de ${
                  sender.split("@")[0]
                }!`,
                `Olá @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu um golpe fulminante!`,
                `Ei @${menc_os2.split("@")[0]}, você levou um soco brutal de ${
                  sender.split("@")[0]
                }!`,
                `Aviso @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te acertou um golpe devastador!`,
                `Oi @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } está te esmurrando sem dó!`,
                `Atenção @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te derrubou com um soco poderoso!`,
                `Olá @${
                  menc_os2.split("@")[0]
                }, você foi atingido com força por ${sender.split("@")[0]}!`,
                `Ei @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu um soco esmagador!`,
                `Aviso @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te derrubou com um golpe destruidor!`,
                `Oi @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } acabou de te dar uma surra colossal!`,
                `Atenção @${
                  menc_os2.split("@")[0]
                }, você levou um soco avassalador de ${sender.split("@")[0]}!`,
                `Olá @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te acertou um soco fenomenal!`,
                `Ei @${
                  menc_os2.split("@")[0]
                }, você foi atingido por um soco destruidor de ${
                  sender.split("@")[0]
                }!`,
                `Aviso @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } te deu uma surra fulminante!`,
                `Oi @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } acabou de te nocautear com um soco!`,
                `Atenção @${menc_os2.split("@")[0]}, ${
                  sender.split("@")[0]
                } está te espancando violentamente!`,
              ];
              const susp = txtkk[Math.floor(Math.random() * txtkk.length)];
              lss = [
                "https://telegra.ph/file/f737009edab409fe7be43.mp4",
                "https://telegra.ph/file/608f10571c79cd270684b.mp4",
                "https://telegra.ph/file/b11cdf32f93712fcd4d78.mp4",
                "https://telegra.ph/file/72bb4bc30d2d75e2b0b77.mp4",
                "https://telegra.ph/file/a1f4856876d4cb47fc215.mp4",
                "https://telegra.ph/file/866708c964801c6af880a.mp4",
                "https://telegra.ph/file/c917c16f143f4716488ca.mp4",
                "https://telegra.ph/file/663990556cd3b872b670e.mp4",
                "https://telegra.ph/file/638e353bcbd343581aa5f.mp4",
                "https://telegra.ph/file/6770b65c4b7a43840735a.mp4",
                "https://telegra.ph/file/7172540125b1b5754f12f.mp4",
                "https://telegra.ph/file/13468fc5ca601483a1c38.mp4",
                "https://telegra.ph/file/3463d0e205b5d5dc7a075.mp4",
                "https://telegra.ph/file/4b135cfda8a32f3c6d83c.mp4",
                "https://telegra.ph/file/4b135cfda8a32f3c6d83c.mp4",
                "https://telegra.ph/file/6577e0445dd4b3ac15465.mp4",
                "https://telegra.ph/file/88891992448b401b6763a.mp4",
              ];
              randomp = lss[Math.floor(Math.random() * lss.length)];
              jrq = await getBuffer(randomp);
              await miwa.sendMessage(
                from,
                {
                  video: jrq,
                  gifPlayback: true,
                  caption: susp,
                  mentions: [menc_os2],
                },
                { quoted: info }
              );
              break;

            // COMANDOS DE BRINCADEIRA, CRIAR EMPRESA, FAMÍLIA, ETC

            case "criarfamilia": //criador: Ryuufranky x
              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              const nomeFamilia = args.join(" ");
              if (!nomeFamilia)
                return reply("Por favor, forneça um nome para a família.");
              const criarFamiliaMsg = criarFamilia(sender, nomeFamilia);
              reply(criarFamiliaMsg);
              break;
            case "vertodasfamilia": //criador: Ryuufranky x
              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              const verTodasFamiliasMsg = verTodasFamilias();
              reply(verTodasFamiliasMsg, null, {
                contextInfo: {
                  mentionedJid: loadFamilias().familias.flatMap(
                    (f) => f.membros
                  ),
                },
              });
              break;
            case "adicionarfamilia": //criador: Ryuufranky x
            case "addfamilia":
              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              if (!menc_os2 || menc_jid2[1]) return reply("❕Marque a pessoa");
              if (!menc_os2)
                return reply(
                  "Por favor, mencione um membro para adicionar à família."
                );
              const adicionarFamiliaMsg = adicionarFamilia(sender, menc_os2);
              reply(adicionarFamiliaMsg);
              break;
            case "sairfamilia": //criador: Ryuufranky x
              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              const sairFamiliaMsg = sairFamilia(sender);
              reply(sairFamiliaMsg);
              break;
            case "verfamilia": //criador: Ryuufranky x
              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              const verFamiliaMsg = verFamilia(sender);
              reply(verFamiliaMsg, null, {
                contextInfo: {
                  mentionedJid: loadFamilias().familias.find((f) =>
                    f.membros.includes(sender)
                  ).membros,
                },
              });
              break;

            case "criarempresa":
              if (!isModobn) return reply("Modo brincadeira está desativado.");
              const nomeEmpresa = args[0];
              const tipoEmpresa = args[1] || "basica";
              if (!nomeEmpresa)
                return reply("Por favor, forneça um nome para a empresa.");
              const criarEmpresaMsg = criarEmpresa(
                sender,
                nomeEmpresa,
                tipoEmpresa
              );
              reply(criarEmpresaMsg);
              break;

            case "verempresa":
              if (!isModobn) return reply("Modo brincadeira está desativado.");
              const verEmpresaMsg = verEmpresa(sender);
              reply(verEmpresaMsg);
              break;

            case "adicionarproduto":
              if (!isModobn) return reply("Modo brincadeira está desativado.");
              const [nomeProduto, valorProdutoStr] = args.join(" ").split("/");
              if (!nomeProduto || !valorProdutoStr) {
                return reply(
                  "Por favor, forneça um nome e valor para o produto no formato: nomeProduto/valorProduto"
                );
              }
              const valorProduto = parseInt(valorProdutoStr.trim(), 10);
              if (isNaN(valorProduto) || valorProduto > 300) {
                return reply(
                  "O valor do produto deve ser um número e não pode exceder 300 reais."
                );
              }
              const adicionarProdutoMsg = adicionarProduto(
                sender,
                nomeProduto.trim(),
                valorProduto
              );
              reply(adicionarProdutoMsg);
              break;

            case "venderproduto":
              if (!isModobn) return reply("Modo brincadeira está desativado.");
              const nomeProdutoVenda = args[0];
              if (!nomeProdutoVenda)
                return reply(
                  "Por favor, forneça o nome do produto a ser vendido."
                );
              const venderProdutoMsg = venderProduto(sender, nomeProdutoVenda);
              reply(venderProdutoMsg);
              break;

            case "venderempresa":
              if (!isModobn) return reply("Modo brincadeira está desativado.");
              const venderEmpresaMsg = venderEmpresa(sender);
              reply(venderEmpresaMsg);
              break;

            case "vertodasempresas":
              if (!isModobn) return reply("Modo brincadeira está desativado.");
              const verTodasEmpresasMsg = verTodasEmpresas();
              reply(verTodasEmpresasMsg, null, {
                contextInfo: {
                  mentionedJid: loadEmpresas().empresas.flatMap((e) => e.dono),
                },
              });
              break;


            case "trabalhar":
              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              MT = Math.floor(Math.random() * 200);
              var foda = [
                `Você estava minerando nas ilhas savitas e encontrou em seu caminho *R$ ${Number(
                  MT
                ).toFixed(2)}* em minerais preciosos! 💰`,
                `🗣💰 Você invadiu uma mina proibida e quando estava fazendo a mineração achou *R$ ${Number(
                  MT
                ).toFixed(2)}* em troca de ouro!`,
                `💎👷🏻‍♀️ Você invadiu uma mina de diamantes proibida, enquanto você estava fazendo a mineração, encontrou 2 diamantes equivalentes à *R$ ${Number(
                  MT
                ).toFixed(2)}*.`,
                `⛏️👷🏻‍♀️ Você escavou uma mina de ouro subterrânea em Minas Gerais e encontrou *R$ ${Number(
                  MT
                ).toFixed(2)}*!`,
                `🛫 Em uma de suas viagens para o interior da Flórida, você embarcou uma busca ao tesouro perdido e encontrou em seu caminho um cordão de ouro perdido avaliado em *R$ ${Number(
                  MT
                ).toFixed(2)}*.`,
                `😱🌟 Você invadiu a casa do vizinho e encontrou *R$ ${Number(
                  MT
                ).toFixed(2)}* escavando o quintal dele.`,
                `⛏️👷🏻‍♀️✨️ Você acaba de invadir em uma mina de esmeraldas desconhecida e encontrou *R$ ${Number(
                  MT
                ).toFixed(2)}*`,
                `🛥️💰 Você encontrou nas profundezas do oceanos, um tesouro em um navio antigo equivalente à *R$ ${Number(
                  MT
                ).toFixed(2)}*.`,
                `🌟 Você foi chamado para trabalhar na mina e encontrou milhares de resíduos! Como recompensa, você acaba de ganhar *R$ ${Number(
                  MT
                ).toFixed(2)}*. 😸`,
                `Você foi chamado para trabalhar na mina e encontrou muitos tesouros perdidos!👷🏼🌟 Como recompensa, você acaba de ganhar *R$ ${Number(
                  MT
                ).toFixed(2)}*.`,
              ];

              var sinkqkqsina = foda[Math.floor(Math.random() * foda.length)];

              await miwa
                .sendMessage(
                  from,
                  {
                    interactiveMessage: {
                      body: {
                        text: `
${sinkqkqsina}
                    `,
                      },
                      nativeFlowMessage: {
                        buttons: [
                          {
                            name: "quick_reply",
                            buttonParamsJson: JSON.stringify({
                              display_text: "Trabalhar novamente",
                              id: `${prefix}trabalhar`,
                            }),
                          },
                          {
                            name: "quick_reply",
                            buttonParamsJson: JSON.stringify({
                              display_text: "Ver banco",
                              id: `${prefix}banco`,
                            }),
                          },
                        ],
                        messageParamsJson: "",
                      },
                    },
                  },
                  {}
                )
                .then((r) => console.log(r));
              addKoinUser(sender, +MT);
              break;

              case "arma":
              case "comprararma":
              {
                if (!isModobn)
                  return reply(
                    `❌ *Modo Brincadeira está OFF, peça ao adm para ativar!* ❌`
                  );
                if (arma.includes(sender)) return reply("*VOCÊ JÁ TEM UMA ARMA*");
            
                const dinheiro = checkATMuser(sender); // Verifica o saldo no perfil do usuário
                const quantidader = 8000; // Preço da arma
            
                if (dinheiro < quantidader)
                  return reply(
                    `*${pushname} VOCÊ NÃO TEM DINHEIRO SUFICIENTE PARA COMPRAR UMA ARMA*\n\n*PREÇO: ${quantidader}*`
                  );
            
                // Registrar a compra da arma
                arma.push(`${sender}`);
                fs.writeFileSync(
                  "./funções_rpg/arma/arma.json",
                  JSON.stringify(arma)
                );
            
                // Atualizar o saldo do usuário (subtraindo o preço da arma)
                addKoinUser(sender, -quantidader);
            
                miwa.sendMessage(
                  from,
                  {
                    text: `*ARMA COMPRADA COM SUCESSO 🔫*\n\n*CUSTO 💰: ${quantidader}*`,
                  },
                  { quoted: info }
                );
              }
              break;
        
            case "comprarvip":
            case "cv":
              {
                if (!isModobn)
                  return reply(
                    `❌ *Modo Brincadeira está OFF, peça ao adm para ativar!* ❌`
                  );
                if (premium.includes(sender)) return reply("*VOCE JA TEM VIP*");
                const dinheiro = checkATMuser(sender);
                const quantidader = 15000; // preço do vip
                if (dinheiro < quantidader)
                  return reply(
                    `*${pushname} VC NAO TEM DINHEIRO SUFICIENTE PARA COMPRAR O VIP*\n\n*PREÇO: ${quantidader}*`
                  );
                premium.push(`${sender}`);
                fs.writeFileSync(
                  "./settings/media/premium.json",
                  JSON.stringify(premium)
                );
                addKoinUser(sender, -quantidader);
                miwa.sendMessage(
                  from,
                  {
                    text: `*VIP COMPRADO COM SUCESSO *\n\n*CUSTO 💰: ${quantidader}*`,
                  },
                  { quoted: info }
                );
              }
              break;

              case "venderarma": {
                if (!isModobn) {
                  return reply(`❌ *Modo Brincadeira está OFF, peça ao adm para ativar!* ❌`);
                }
                
                if (!arma.includes(sender)) {
                  return reply(`Você ainda nem tem uma arma.`);
                }
              
                const index = arma.indexOf(sender);
                
                if (index > -1) {
                  // Remove a arma do inventário do usuário
                  arma.splice(index, 1);
                  fs.writeFileSync(
                    "./funções_rpg/arma/arma.json",
                    JSON.stringify(arma)
                  );
                  
                  // Adiciona 6000 ao saldo do usuário
                  addKoinUser(sender, 6000); // valor de venda da arma
                  
                  // Envia a mensagem de sucesso
                  miwa.sendMessage(
                    from,
                    {
                      text: `*ARMA VENDIDA COM SUCESSO 🔫*\n\n*GANHO 💰: 6000*`,
                    },
                    { quoted: info }
                  );
                } else {
                  // Envia uma mensagem de erro caso o processo falhe
                  return reply(`Erro ao vender a arma.`);
                }
              
                break;
              }
              
            case "loteria": {
              if (!isModobn)
                return reply(
                  `Modo brincadeira está off, peça para o administrador ligar`
                );

              const resultado = Math.random();
              if (resultado < 0.1) {
                // 10% de chance de ganhar
                const premio = 10000; // Prêmio é 100 vezes o valor da aposta
                addKoinUser(sender, premio);
                return reply(
                  `Parabéns! Você ganhou na loteria e recebeu R$ ${premio} como prêmio.`
                );
              } else {
                return reply(
                  `Infelizmente você não ganhou na loteria. Boa sorte na próxima! Perdeu: 7 R$ por comprar o ticket`
                );
                addKoinUser(sender, -`7`);
              }
              break;
            }

            case "apostaresportes": {
              if (!isModobn)
                return reply(
                  `Modo brincadeira está off, peça para o administrador ligar`
                );
              if (args.length < 2)
                return reply(
                  `Modo certo de se usar ${prefix}apostaresportes <time> <valor>\nExemplo: ${prefix}apostaresportes barcelona 500`
                );

              const timeApostado = args[0].toLowerCase();
              const valorAposta = parseInt(args[1]);

              if (isNaN(valorAposta) || valorAposta <= 0)
                return reply(
                  "Por favor, insira um valor válido para a aposta."
                );

              const chancesVitoria = Math.random();
              const chancesEmpate = Math.random();
              const chancesDerrota = Math.random();

              let mensagem = "";

              if (chancesVitoria > 0.33) {
                const valorGanho = Math.floor(Math.random() * 1000) + 1;
                addKoinUser(sender, valorGanho);
                mensagem = `Parabéns! Você ganhou a aposta e recebeu R$ ${valorGanho}.`;
              } else {
                mensagem = `Infelizmente, você perdeu a aposta e não recebeu nenhum dinheiro.`;
              }

              return reply(mensagem);
              break;
            }

            case "investir": {
              // Criador: ryuu

              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              if (args.length < 2)
                return reply(
                  `Modo certo de se usar ${prefix}investir <tipo> <valor>\nExemplo: ${prefix}investir ações 1000\n\ntipos: criptomoedas,imóveis,fundos,ações`
                );

              const tiposInvestimento = [
                "ações",
                "fundos",
                "imóveis",
                "criptomoedas",
              ];
              const tipoInvestimento = args[0].toLowerCase();
              const valorInvestimento = parseInt(args[1]);

              if (!tiposInvestimento.includes(tipoInvestimento))
                return reply(
                  `Tipo de investimento inválido. Tipos disponíveis: ${tiposInvestimento.join(
                    ", "
                  )}`
                );
              if (isNaN(valorInvestimento) || valorInvestimento <= 0)
                return reply(
                  "Por favor, insira um valor válido para investir."
                );

              const chance = Math.random();
              let mensagem = "";

              if (chance < 0.5) {
                confirmATM(sender, valorInvestimento);
                mensagem = `Seu investimento em ${tipoInvestimento} não deu certo e você perdeu R$ ${valorInvestimento}.`;
              } else {
                const retorno = Math.floor(Math.random() * 1000) + 1;
                addKoinUser(sender, retorno);
                mensagem = `Seu investimento em ${tipoInvestimento} deu certo e você ganhou R$ ${retorno}!`;
              }

              await btncomfoto(
                from,
                mensagem,
                "",
                "",
                "Clique para investir novamente",
                { url: "https://telegra.ph/file/4319894a76630c5a3f034.jpg" },
                "image",
                info,
                {},
                [
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Investir novamente",
                      id: `${prefix}investir ${tipoInvestimento} ${valorInvestimento}`,
                    }),
                  },
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Ver banco",
                      id: `${prefix}banco`,
                    }),
                  },
                ]
              );
              break;
            }

            case 'vab':
              if (!isGroup) return reply("Este comando só pode ser usado em grupos.");
              if (!isModobn) return reply("Modo brincadeira não está ativo.");
            
              psycatgames().then(async (array) => {
                const { nsfw, questions } = array[Math.floor(Math.random() * array.length)];
                const { pergunta1, pergunta2 } = questions[Math.floor(Math.random() * questions.length)];
            
                // Enviar enquete usando `miwa`
                await miwa.sendMessage(from, {
                  poll: {
                    name: "Você prefere..",
                    values: [pergunta1, pergunta2],
                    selectableCount: 1 // Número de opções que o usuário pode selecionar
                  }
                }).catch(error => {
                  console.error("Erro ao enviar enquete:", error);
                  reply("Ocorreu um erro ao enviar a enquete.");
                });
              }).catch(error => {
                console.error("Erro ao processar psycatgames:", error);
                reply("Ocorreu um erro ao buscar as perguntas.");
              });
              break;

            case "roubarbanco": {
              if (!arma.includes(sender)) {
                return reply("Você ainda nem tem uma arma.");
              }
            
              if (!isModobn) {
                return reply("Modo brincadeira está desativado. Peça ao administrador para ativá-lo.");
              }
            
              // Definindo o tempo de cooldown (em milissegundos)
              const cooldownTime = 60 * 60 * 1000; // 1 hora
            
              // Verificando a última vez que o usuário tentou roubar
              const lastRobbery = cooldown[sender] || 0;
              const currentTime = Date.now();
            
              // Se o usuário tentar antes do cooldown terminar, mostre uma mensagem
              if (currentTime - lastRobbery < cooldownTime) {
                const remainingTime = ((cooldownTime - (currentTime - lastRobbery)) / (1000 * 60)).toFixed(0);
                return reply(`Aguarde mais ${remainingTime} minutos antes de tentar roubar novamente.`);
              }
            
              // Atualiza o tempo de última tentativa de roubo
              cooldown[sender] = currentTime;
            
              // Definir valor mínimo e máximo do roubo
              const valorMinimo = 500;
              const valorMaximo = 5000;
            
              // Gerar o valor do roubo entre o mínimo e o máximo
              const roubo = Math.floor(Math.random() * (valorMaximo - valorMinimo + 1)) + valorMinimo;
            
              // Diminuir a chance de sucesso para 30%
              const chance = Math.random();
            
              let message = "";
              if (chance < 0.7) { // 70% de chance de falha
                message = `🚓 Você foi pego tentando roubar o banco e perdeu R$ ${roubo}.`;
                addKoinUser(sender, -roubo);
              } else { // 30% de chance de sucesso
                message = `💰 Você conseguiu roubar o banco e ganhou R$ ${roubo}!`;
                addKoinUser(sender, +roubo);
              }
            
              // Envia a mensagem com as opções de ação como texto
              const optionsMessage = `\n\nEscolha o que deseja fazer a seguir:\n- Digite *${prefix}roubarbanco* para tentar roubar novamente.\n- Digite *${prefix}minhacarteira* para ver seu saldo no banco.`;
            
              // Envia a resposta ao usuário
              await miwa.sendMessage(from, { text: message + optionsMessage }, { quoted: info });
            
              break;
            }                        
            case "churrasqueira":
              case "comprarchurrasqueira":
                {
                  if (!isModobn)
                    return reply(
                      `O modo brincadeira está desligado, peça ao administrador para ligá-lo`
                    );
              
                  // Verifica se o usuário já possui uma churrasqueira
                  const hasChurrasqueira = churrasqueira.includes(sender);
                  if (hasChurrasqueira)
                    return reply("*VOCÊ JÁ TEM UMA CHURRASQUEIRA*");
              
                  // Localiza o usuário no miwarpg.json para verificar o saldo
                  const userIndex = miwarpg.findIndex((user) => user.id === sender);
                  if (userIndex === -1) {
                    return reply(`Você não está registrado no sistema de RPG.`);
                  }
              
                  const dinheiro = miwarpg[userIndex].money;
                  const quantidader = 1000; // Preço da churrasqueira
              
                  // Verifica se o usuário tem saldo suficiente
                  if (dinheiro < quantidader)
                    return reply(
                      `*${pushname}, você não tem dinheiro suficiente para comprar uma churrasqueira*\n\n*PREÇO: R$${quantidader}*`
                    );
              
                  // Adiciona a churrasqueira ao usuário
                  churrasqueira.push(`${sender}`);
                  fs.writeFileSync(
                    "./funções_rpg/churrasqueira/churrasqueira.json",
                    JSON.stringify(churrasqueira)
                  );
              
                  // Deduz o valor da compra do saldo do usuário
                  miwarpg[userIndex].money -= quantidader;
                  fs.writeFileSync(
                    "./database/usuarios/SystemRPG/miwarpg.json",
                    JSON.stringify(miwarpg)
                  );
              
                  // Mensagem de sucesso
                  miwa.sendMessage(
                    from,
                    {
                      text: `*CHURRASQUEIRA COMPRADA COM SUCESSO 🍖*\n\n*CUSTO 💰: R$${quantidader}*`,
                    },
                    { quoted: info }
                  );
                }
                break;
              
              case "venderchurrasqueira":
                {
                  if (!isModobn)
                    return reply(
                      `O modo brincadeira está desligado, peça ao administrador para ligá-lo`
                    );
              
                  if (!churrasqueira.includes(sender))
                    return reply(`VOCÊ AINDA NÃO TEM UMA CHURRASQUEIRA`);
              
                  const indksbex = churrasqueira.indexOf(sender);
                  if (indksbex > -1) {
                    // Remove a churrasqueira do usuário
                    churrasqueira.splice(indksbex, 1);
                    fs.writeFileSync(
                      "./funções_rpg/churrasqueira/churrasqueira.json",
                      JSON.stringify(churrasqueira)
                    );
              
                    // Encontra o índice do usuário no miwarpg.json
                    let userIdx = miwarpg.findIndex((user) => user.id === sender);
                    if (userIdx !== -1) {
                      // Adiciona o valor da venda ao saldo do usuário
                      miwarpg[userIdx].money += 1000; // Valor da venda da churrasqueira
                      fs.writeFileSync(
                        "./database/usuarios/SystemRPG/miwarpg.json",
                        JSON.stringify(miwarpg)
                      );
                      reply(`*VOCÊ VENDEU SUA CHURRASQUEIRA POR R$ 10000*`);
                    } else {
                      reply("Você não está registrado no sistema de RPG.");
                    }
                  }
                }
                break;
              
            case "minerardiamante":
            case "minerardima":
              if (!isModobn)
                return reply(
                  `modo brincadeira está off, peça ao admin para ativar`
                );
              const mineDiamondsMsg = mineDiamonds(sender);
              reply(mineDiamondsMsg);
              break;

            case "venderdiamante":
            case "venderdima":
              if (!isModobn)
                return reply(
                  `modo brincadeira está off, peça ao admin para ativar`
                );
              const sellDiamondsMsg = sellDiamonds(sender);
              reply(sellDiamondsMsg);
              break;

            case "gerarcarro": {
              //criador: ryuu Akiyamax
              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);

              const marcas = [
                "Toyota",
                "Honda",
                "Ford",
                "Chevrolet",
                "BMW",
                "Mercedes",
                "Audi",
                "Volkswagen",
                "Nissan",
                "Hyundai",
                "Kia",
                "Mazda",
                "Subaru",
                "Dodge",
                "Jeep",
                "Lexus",
                "Acura",
                "Infiniti",
                "Lincoln",
                "Volvo",
                "Mitsubishi",
                "Buick",
                "Cadillac",
                "Chrysler",
                "Jaguar",
                "Land Rover",
                "Porsche",
                "Tesla",
                "Fiat",
                "Alfa Romeo",
                "Peugeot",
                "Renault",
                "Citroen",
                "Ferrari",
                "Lamborghini",
                "Maserati",
                "Bentley",
                "Rolls-Royce",
                "Aston Martin",
                "McLaren",
                "Pagani",
                "Bugatti",
                "Koenigsegg",
                "Mini",
                "Smart",
                "Saab",
                "Opel",
                "Vauxhall",
                "Seat",
                "Skoda",
                "Dacia",
                "Lancia",
                "Lotus",
                "MG",
                "Rover",
                "SsangYong",
                "Proton",
                "Geely",
                "Tata",
                "Mahindra",
                "Maruti Suzuki",
                "Holden",
                "HSV",
                "Scion",
                "Ram",
                "GMC",
                "Hummer",
                "Saturn",
                "Pontiac",
                "Oldsmobile",
                "Plymouth",
                "Studebaker",
                "DeLorean",
                "Fisker",
                "Lucid",
                "Rivian",
                "Polestar",
                "Genesis",
                "BYD",
                "Chery",
                "Great Wall",
                "Haval",
                "Zotye",
                "BAIC",
                "Nio",
                "XPeng",
                "Wuling",
                "Hongqi",
                "Aiways",
                "VinFast",
              ]; //AkiyamaX
              const modelos = [
                "Corolla",
                "Civic",
                "Mustang",
                "Camaro",
                "X5",
                "C-Class",
                "A4",
                "Golf",
                "Altima",
                "Elantra",
                "Sorento",
                "CX-5",
                "Impreza",
                "Challenger",
                "Wrangler",
                "RX",
                "TLX",
                "Q50",
                "Navigator",
                "XC90",
                "Outlander",
                "Enclave",
                "Escalade",
                "Pacifica",
                "XF",
                "Range Rover",
                "911",
                "Model S",
                "500",
                "Giulia",
              ];
              const anos = [
                "1995",
                "1996",
                "1997",
                "1998",
                "1999",
                "2000",
                "2001",
                "2002",
                "2003",
                "2004",
                "2005",
                "2006",
                "2007",
                "2008",
                "2009",
                "2010",
                "2011",
                "2012",
                "2013",
                "2014",
                "2015",
                "2016",
                "2017",
                "2018",
                "2019",
                "2020",
                "2021",
                "2022",
                "2023",
                "2024",
              ]; //franky
              const cores = [
                "Vermelho",
                "Azul",
                "Preto",
                "Branco",
                "Prata",
                "Cinza",
                "Verde",
                "Amarelo",
                "Rosa",
                "Roxo",
                "Marrom",
                "Bege",
                "Dourado",
                "Laranja",
                "Turquesa",
                "Ciano",
                "Magenta",
                "Lavanda",
                "Coral",
                "Marinho",
                "Vinho",
                "Oliva",
                "Amarelo Canário",
                "Cobre",
                "Cinza Chumbo",
                "Grafite",
                "Cinza Claro",
                "Azul Bebê",
                "Pérola",
                "Prata Metálico",
              ];
              //ryuu x
              const marca = marcas[Math.floor(Math.random() * marcas.length)];
              const modelo =
                modelos[Math.floor(Math.random() * modelos.length)];
              const ano = anos[Math.floor(Math.random() * anos.length)];
              const renavam = Math.floor(Math.random() * 10000000000)
                .toString()
                .padStart(11, "0");
              const placa = `${String.fromCharCode(
                65 + Math.floor(Math.random() * 26)
              )}${String.fromCharCode(
                65 + Math.floor(Math.random() * 26)
              )}${String.fromCharCode(
                65 + Math.floor(Math.random() * 26)
              )}-${Math.floor(Math.random() * 10)}${Math.floor(
                Math.random() * 10
              )}${Math.floor(Math.random() * 10)}${Math.floor(
                Math.random() * 10
              )}`;
              const cor = cores[Math.floor(Math.random() * cores.length)];

              const mensagem = `
┏━── *「 🚗 GERADOR DE CARROS 🚗 」*  ─━┓
│
│ 🏎️ *Marca:* ${marca}
│ 🚘 *Modelo:* ${modelo}
│ 📅 *Ano:* ${ano}
│ 🔖 *RENAVAM:* ${renavam}
│ 🚓 *Placa:* ${placa}
│ 🎨 *Cor:* ${cor}
│
┗━───────────────────────────━┛
`;
              await btncomfoto(
                from,
                mensagem,
                "",
                "",
                "Clique para gerar um novo carro",
                { url: "https://telegra.ph/file/e7f95b1b557a53ffc96a6.jpg" },
                "image",
                info,
                {},
                [
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Gerar novo carro",
                      id: `${prefix}gerarcarro`,
                    }),
                  },
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Ver banco",
                      id: `${prefix}banco`,
                    }),
                  },
                ]
              );
              break;
            } //ryuu

            case "tigrinho": {
              if (!isModobn) return reply(`modo brincadeira está off, peça ao admin para ativá-lo`);
            
              // Capturando o valor da aposta do usuário
              if (!q) return reply(`Digite o valor que deseja apostar no Tigrinho!`);
              if (!Number(args[0])) return reply(`${args[0]} não é um valor válido.`);
            
              const aposta = Number(args[0]);
              
              // Verificando se o valor apostado é permitido
              if (aposta < 10) return reply(`O valor mínimo para apostar é R$ 10.`);
              if (aposta > 10000) return reply(`O valor máximo para apostar é R$ 10.000.`);
            
              // Verificando se o usuário tem saldo suficiente para apostar
              AB = miwarpg.map((i) => i.id).indexOf(sender);
              if (Number(aposta) > Number(miwarpg[AB].money)) {
                return reply(`Você não possui saldo suficiente para apostar.`);
              }
            
              // Definindo o resultado da aposta
              const resultadoAleatorio = Math.floor(Math.random() * 100);
              let textoResposta, imagem, valorFinal;
            
              if (resultadoAleatorio > 20) {
                // Usuário perde a aposta
                const mensagensPerda = [
                  "Parece que tu se fudeu kkkk perdeu tudo paizão",
                  "Tigrinho te extorquiu e tu perdeu tudo!",
                  "Infelizmente, tu mamou desta vez.",
                ];
                textoResposta = `🐯 ${mensagensPerda[Math.floor(Math.random() * mensagensPerda.length)]}\nVocê perdeu R$ ${aposta.toFixed(2)}.`;
            
                // Atualizando o saldo do usuário
                miwarpg[AB].money = Number(miwarpg[AB].money) - aposta;
            
                imagem = 'https://i.imgur.com/bIGnzTO.jpeg'; // Imagem para perda
              } else {
                // Usuário ganha a aposta
                const multiplicador = Math.random() * (5 - 1.2) + 1.2; // Multiplicador entre 1.2 e 2
                const ganho = aposta * multiplicador;
            
                const mensagensGanho = [
                  "Tigrinho fez a boa, vai tomando!",
                  "Você forrou com o Tigrinho!",
                  "O Tigrinho pagou seu combão!",
                ];
                textoResposta = `🐯 ${mensagensGanho[Math.floor(Math.random() * mensagensGanho.length)]}\nVocê ganhou R$ ${ganho.toFixed(2)}!`;
            
                // Atualizando o saldo do usuário
                miwarpg[AB].money = Number(miwarpg[AB].money) + ganho;
            
                imagem = 'https://i.imgur.com/TSbPg7G.jpeg'; // Imagem para ganho
              }
            
              // Salvando o novo saldo
              fs.writeFileSync(
                "./database/usuarios/SystemRPG/miwarpg.json",
                JSON.stringify(miwarpg)
              );
            
              // Enviando a mensagem com a imagem e o resultado
              await miwa.sendMessage(
                from,
                { image: { url: imagem }, caption: textoResposta },
                { quoted: info }
              );
            
              break;
            }
                                                
            case "pintarcasa": {
              // Criador: ryuu Akiyamax

              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              const cores = [
                "vermelha",
                "azul",
                "verde",
                "amarela",
                "branca",
                "preta",
              ];
              const tempo = Math.floor(Math.random() * 60) + 1;
              const salario = Math.floor(Math.random() * 500) + 100;
              reply(
                `🖌️ Iniciando pintura de casa...\n\n🎨 Cor da tinta: ${
                  cores[Math.floor(Math.random() * cores.length)]
                }\n⏳ Tempo estimado: ${tempo} minutos\n\nAguarde enquanto pintamos a casa...`
              );
              await sleep(tempo * 1000);
              const sucesso = Math.random() < 0.8;
              let mensagem = "";
              if (sucesso) {
                addKoinUser(sender, salario);
                mensagem = `
┏━── *「️ 🏠 PINTURA DE CASA 🏠 」*  ─━┓
│▢ Cor da casa: ${cores[Math.floor(Math.random() * cores.length)]}
│▢ Tempo gasto: ${tempo} minutos
│▢ Salário recebido: R$ ${salario.toFixed(2)}
┗━── *「️ 🏠 PINTURA DE CASA 🏠 」*  ─━┛
        `;
              } else {
                mensagem = `❌ Infelizmente, a pintura da casa falhou e você não recebeu nenhum salário.`;
              }
              await btncomfoto(
                from,
                mensagem,
                "",
                "",
                "Clique para pintar outra casa",
                { url: "https://telegra.ph/file/970c3b7f3750294ab76c7.jpg" },
                "image",
                info,
                {},
                [
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Pintar outra casa",
                      id: `${prefix}pintarcasa`,
                    }),
                  },
                  {
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                      display_text: "Ver banco",
                      id: `${prefix}banco`,
                    }),
                  },
                ]
              );
              break;
            }

            case "casar":
              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              if (!menc_os2 || menc_jid2[1]) return reply("❕Marque a pessoa");
              if (!menc_os2)
                return reply("Por favor, mencione um parceiro para casar.");
              const casarMsg = casar(sender, menc_os2);
              reply(casarMsg);
              break;

            case "dupla":
            case "vercasamento":
              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              const verCasamentoMsg = verCasamento(sender);
              reply(verCasamentoMsg, null, {
                contextInfo: {
                  mentionedJid: [
                    sender,
                    loadCasamentos().casamentos.find(
                      (c) => c.parte1 === sender || c.parte2 === sender
                    ).parte2,
                  ],
                },
              });
              break;

            case "divorciar":
              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              const divorciarMsg = divorciar(sender);
              reply(divorciarMsg);
              break;

            case "vertodoscasamentos":
              if (!isModobn)
                return reply(`modo brincadeira ta off, pede pro adm`);
              const verTodosCasamentosMsg = verTodosCasamentos();
              reply(verTodosCasamentosMsg, null, {
                contextInfo: {
                  mentionedJid: loadCasamentos().casamentos.flatMap((c) => [
                    c.parte1,
                    c.parte2,
                  ]),
                },
              });
              break;

            case "criarperfil":
              const nomePerfil = args[0];
              const descricao = args.slice(1).join(" ");
              if (!nomePerfil || !descricao)
                return reply(
                  "Por favor, forneça um nome e uma descrição para o perfil."
                );
              const criarPerfilMsg = criarPerfilTinder(
                sender,
                nomePerfil,
                descricao
              );
              reply(criarPerfilMsg);
              break;

            case "excluirperfil":
              const excluirPerfilMsg = excluirPerfilTinder(sender);
              reply(excluirPerfilMsg);
              break;

            case "todosperfis":
              const todosPerfisMsg = todosPerfisTinder();
              reply(todosPerfisMsg);
              break;

            case "vermeuperfil":
              const verMeuPerfilMsg = verMeuPerfilTinder(sender);
              reply(verMeuPerfilMsg);
              break;

            case "curtirperfil":
              const perfilCurtido = args.join(" ");
              if (!perfilCurtido)
                return reply(
                  "Por favor, forneça o nome do perfil que deseja curtir."
                );
              const curtirPerfilMsg = curtirPerfilTinder(sender, perfilCurtido);
              reply(curtirPerfilMsg);
              break;

            case "descurtirperfil":
              const perfilDescurtido = args.join(" ");
              if (!perfilDescurtido)
                return reply(
                  "Por favor, forneça o nome do perfil que deseja descurtir."
                );
              const descurtirPerfilMsg = descurtirPerfilTinder(
                sender,
                perfilDescurtido
              );
              reply(descurtirPerfilMsg);
              break;

            case "comentarperfil":
              const perfilComentado = args[0];
              const textoComentario = args.slice(1).join(" ");
              if (!perfilComentado || !textoComentario)
                return reply(
                  "Por favor, mencione o perfil e forneça o texto do comentário."
                );
              const comentarPerfilMsg = comentarPerfilTinder(
                sender,
                perfilComentado,
                textoComentario
              );
              reply(comentarPerfilMsg);
              break;

            case "tinder":
              const perfilAleatorioMsg = todosPerfisTinder();
              reply(perfilAleatorioMsg);
              break;

            case "vermeutinder":
              const verMeuPerfilTinderMsg = verMeuPerfilTinder(sender);
              reply(verMeuPerfilTinderMsg);
              break;

            // FIM

            //CRÉDITO: ᴷᴷᴳᴿ𝐄𝐑𝐈𝐂𝐊 | 𝟔𝟔𝟔 𖤐
            // FLW FAZUL
            //KKKKKK

            case "cpf":
            case "cnpj":
            case "cep":
            case "tel":
            case "tel2":
            case "score":
            case "nome":
            case "nome2":
            case "placa":
            case "placa2":
            case "score":
            case "bin":
            case "operadora":
              try {
                if (!isPremium) return reply(enviar.msg.premium);
                if (!q)
                  return reply(
                    `Desculpe, parece que você esqueceu de informar o que deseja consultar`
                  );
                miwa.sendMessage(
                  from,
                  {
                    text: `➠ Consultando : ${q}\n*🕵🏻 BOT MIWA - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*`,
                  },
                  { quoted: info }
                );
                consulta = await fetchJson(
                  `https://miwa-apis.online/premium/consultas?type=${command}&query=${q}&apikey=` +
                    API_KEY_MIWA
                );
                await miwa.sendMessage(
                  from,
                  {
                    extendedTextMessage: {
                      text:
                        consulta.resultado +
                        `\n\n• 𝐌𝐈𝐖𝐀 𝐁𝐎𝐓 𝐏𝐔𝐗𝐀𝐃𝐀𝐒 - 𝐂𝐎𝐏𝐘𝐑𝐈𝐆𝐇𝐓 𝐑𝐘𝐔𝐔`,
                      contextInfo: {
                        expiration: info.message[type].contextInfo?.expiration,
                        mentionedJid: [from],
                        forwardingScore: 0x100,
                        isForwarded: true,
                        participant: info.key.participant,
                        stanzaId: info.key.id,
                        remoteJid: info.remoteJid,
                        quotedMessage: info.message,
                      },
                    },
                  },
                  {}
                );
                if (!q) {
                  await sleep(1500);
                  miwa.sendMessage(
                    from,
                    {
                      text: `➠ A consulta foi enviado em seu privado.
🕵🏻 BOT MIWA-BOT - PUXADAS
✅ CONSULTA REALIZADA ✅`,
                    },
                    { quoted: info }
                  );
                }
              } catch (e) {
                console.log(e);
                reply("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;

            case "miwa":
              {
                //By Tzn gostoso dos 17cm
                if (!q)
                  return reply(
                    `ola sou miwa kasume to aqui pra te ajudar agora descreva oque você porra`
                  );
                ia = await fetchJson(
                  `https://nodz.xyz/api/gpt/3-5?query=${q}&apitoken=nodz`
                );
                reply(`${ia.resultado}`);
              } //By Tzn
              break;

            case "branca":
              if (!isGroup) return reply("Apenas em grupos");
              reply(
                `${pushname} ➮ Pesquisando a ficha de Macaca branco: @${
                  sender_ou_n.split("@")[0]
                } aguarde...`
              );
              await sleep(3000);
              miwa.sendMessage(
                from,
                {
                  image: {
                    url: "https://telegra.ph/file/2983673e1672bfe9a3d6b.png",
                  },
                  gifPlayback: false,
                  caption: `🙈 *Resultado da Pesquisa* 🐵\n\n @${
                    sender_ou_n.split("@")[0]
                  } você é: \n\n❰ *${Math.floor(
                    Math.random() * 105
                  )}%* ❱ Macaca branca 🤍 \n`,
                  mentions: [sender],
                },
                { quoted: info }
              );
              break;

            case "branco":
              if (!isGroup) return reply("Apenas em grupos");
              reply(
                `${pushname} ➮ Pesquisando a ficha de macaco branco: @${
                  sender_ou_n.split("@")[0]
                } aguarde...`
              );
              await sleep(3000);
              miwa.sendMessage(
                from,
                {
                  image: {
                    url: "https://telegra.ph/file/129c668ffa2012db3fb5c.png",
                  },
                  gifPlayback: false,
                  caption: `🐵 *Resultado da Pesquisa* 🙈\n\n @${
                    sender_ou_n.split("@")[0]
                  } você é: \n\n❰ *${Math.floor(
                    Math.random() * 105
                  )}%* ❱ Macaco branco 🤍 \n`,
                  mentions: [sender],
                },
                { quoted: info }
              );
              break;

            //BY ᴷᴷᴳᴿ𝐄𝐑𝐈𝐂𝐊 | 𝟔𝟔𝟔 𖤐
            //ESSA CASE E DO MEU BOT, FAZ U L KSKSKSKSK

            case "feriados2": {
              //nunu que fez essa case (deixa os créditos por favor)
              if (!isPremium)
                return reply(
                  "🔒 *Acesso Restrito:* Você precisa ser um usuário premium para acessar esta funcionalidade."
                );
              const ano = q;
              if (!ano || isNaN(ano) || ano.length !== 4) {
                return reply(
                  "❗ *Erro:* Por favor, forneça um ano válido (4 dígitos)."
                );
              }
              try {
                const response = await fetch(
                  `https://brasilapi.com.br/api/feriados/v1/${ano}`
                );
                const data = await response.json();
                if (!data || data.length === 0) {
                  return reply(
                    "🔍 *Nenhum feriado encontrado:* Não foram encontrados dados para o ano solicitado."
                  );
                }
                const holidays = data
                  .map(
                    (holiday) => `
📅 *Data:* ${new Date(holiday.date).toLocaleDateString("pt-BR")}
🗓️ *Nome:* ${holiday.name}
🌍 *Tipo:* ${holiday.type}
        `
                  )
                  .join("\n\n");
                const message = `
📅 *Feriados Nacionais de ${ano}:*
${holidays}
        `;
                reply(message);
              } catch (error) {
                console.error(error);
                reply(
                  "⚠️ *Erro:* Não foi possível consultar os feriados. Tente novamente mais tarde."
                );
              }
              break; //nunu que fez essa case (deixa os créditos por favor)
            }

            case "miwa": //Mano.wass
              miwa.sendMessage(from, { react: { text: "🕒", key: info.key } });
              api = await fetchJson(
                `https://nodz.xyz/api/gpt/3-5?query=${q}&apitoken=ryuu`
              );
              teks = `
*CRIADOR*: Ets de Vaginas 
*CRIADOR*: LB MODS 
*NICK-BOT*: MIWA KASUME 
*RESULTADO*: *${api.resultado}*
`;
              miwa.sendMessage(from, { text: teks });

              break;


            case "npm": {
              //nunu x franky
              if (!q)
                return reply(
                  "Por favor, forneça o termo de pesquisa para npm."
                );

              try {
                const searchQuery = encodeURIComponent(q.trim());
                const searchUrl = `https://registry.npmjs.org/-/v1/search?text=${searchQuery}&size=5`;

                axios
                  .get(searchUrl)
                  .then((response) => {
                    const packages = response.data.objects;

                    if (!packages || packages.length === 0) {
                      return reply(
                        `Nenhum resultado encontrado para "${q}" na pesquisa do npm.`
                      );
                    }
                    //nunu x franky
                    let results = packages.map((pkg) => ({
                      name: pkg.package.name,
                      description:
                        pkg.package.description || "Descrição não disponível",
                      author: pkg.package.author
                        ? pkg.package.author.name
                        : "Autor desconhecido",
                      version: pkg.package.version,
                      link: `https://www.npmjs.com/package/${pkg.package.name}`,
                    }));

                    let message = `🔍 Resultados da pesquisa npm para "${q}":\n\n`;
                    results.forEach((result) => {
                      message += `📦 *Nome:* ${result.name}\n`;
                      message += `📄 *Descrição:* ${result.description}\n`;
                      message += `👤 *Autor:* ${result.author}\n`;
                      message += `🔖 *Versão:* ${result.version}\n`;
                      message += `🔗 *Link:* ${result.link}\n\n`;
                    });

                    nunu(message);
                  })
                  .catch((error) => {
                    console.error(error);
                    reply(
                      "Erro ao realizar a pesquisa no npm. Por favor, tente novamente mais tarde."
                    );
                  });
              } catch (error) {
                console.error(error);
                reply("Ocorreu um erro ao processar sua solicitação para npm.");
              }

              break; //nunu akame npm
            }

            case "boquetedele":
            case "mamadadele":
            case "boquetedela":
            case "mamadadela": //by Tzn
              if (!isGroup) return reply("Só em Grupo");
              reagir(from, "🍼"); //by Tzn Modas
              if (!menc_os2 || menc_jid2[1])
                return reply(
                  "marque a pessoa que você quer que lhe de uma mamada, a mensagem ou o @"
                );
              miwa.sendMessage(
                from,
                {
                  video: {
                    url: `https://telegra.ph/file/122956e858e161baf3173.mp4`,
                  },
                  gifPlayback: true,
                  caption: `*O(a) @${
                    menc_os2.split("@")[0]
                  } acabou de te dar uma mamadinha [🍼]*`,
                  mentions: [menc_os2],
                },
                { quoted: info }
              );
              break; //by tzn

            case "boquete":
            case "mamada":
              if (!isGroup) return reply("Só em Grupo");
              reagir(from, "🍼"); //by tzn
              if (!menc_os2 || menc_jid2[1])
                return reply(
                  "marque a pessoa que você quer pagar um boquete, a mensagem ou o @"
                );
              miwa.sendMessage(
                from,
                {
                  video: {
                    url: `https://telegra.ph/file/a027ace564e6b01daefc7.mp4`,
                  },
                  gifPlayback: true,
                  caption: `*Você Acabou de pagar um boquete gostosinho no(a): @${
                    menc_os2.split("@")[0]
                  } [🍼]*`,
                  mentions: [menc_os2],
                },
                { quoted: info }
              );
              break; //by : Tzn

            case "sexo":
            case "sex":
            case "Sexo": //by Tzn
              if (!isGroup) return reply("Só em Grupo");
              if (!menc_os2 || menc_jid2[1])
                return reply(
                  "marque a pessoa que você quer fazer sexo, a mensagem ou o @"
                );
              sexo = `${Math.floor(Math.random() * 120)}`;
              fioteh = `${Math.floor(Math.random() * 100)}`;
              reagir(from, "🤱"); //by Tzn modas
              miwa.sendMessage(
                from,
                {
                  video: {
                    url: `https://telegra.ph/file/6060d62a642f78d9375d3.mp4`,
                  },
                  gifPlayback: true,
                  caption: `*[👤] Olá, ${pushname}. Você Acabou de fazer sexo com(a) @${
                    menc_os2.split("@")[0]
                  } 🥵*\n
*[💦] Chance de você ter ejaculado dentro:* _${sexo}%_\n\n*[🤱] Possíveis chances do @${
                    menc_os2.split("@")[0]
                  } ter engravidado é:* _${fioteh}%_`,
                  mentions: [menc_os2],
                },
                { quoted: info }
              );
              break; //by Tzn modas

            case "masturbarele":
            case "masturbaçãodele":
            case "masturbarela":
            case "masturbaçãodela":
              if (!isGroup) return reply("Só em Grupo"); //by Tzn
              if (!menc_os2 || menc_jid2[1])
                return reply("❕Marque o @ do alvo que você quer ver a força.");
              masturbar = `${Math.floor(Math.random() * 100)}`;
              reagir(from, "💦");
              miwa.sendMessage(
                from,
                {
                  image: {
                    url: `https://telegra.ph/file/d4c37346be169994c6f4f.jpg`,
                  },
                  caption: `*[👤] Olá, ${pushname}. Você acabou de masturbar o(a) @${
                    menc_os2.split("@")[0]
                  } 🥵*\n
*[💦] Chance de você ter feito o(a) @${
                    menc_os2.split("@")[0]
                  } gozar foi de:* _${masturbar}%_`,
                  mentions: [menc_os2],
                },
                { quoted: info }
              );
              break; //by Tzn

            case "masturbar":
            case "masturbação":
            case "masturbacao": //by tzn
              if (!isGroup) return reply("Só em Grupo");
              masturbar2 = `${Math.floor(Math.random() * 100)}`;
              reagir(from, "💦"); //by tzn
              miwa.sendMessage(
                from,
                {
                  image: {
                    url: `https://telegra.ph/file/577f33732f4678311466f.jpg`,
                  },
                  caption: `[👤] *Olá, ${pushname}. Você acabou de se masturbar🥵*\n
*[💦] Chance de você ter gozado:* _a chance de vc ter gozado é de ${masturbar2}%_`,
                },
                { quoted: info }
              );
              break;

            case "vasco":
              if (!q.includes("|"))
                return reply(
                  `* Você precisa usar no seguinte formato: (Ex: ${
                    prefixo + command
                  } Nome | Posição que você quer jogar)*`
                );
              var [txt1, txt2] = q.split("|");
              tx = await getBuffer(
                `https://tohka.tech/api/canvas/vasco?titulo1=${txt2}&nome=${txt1}&perfil=${ppurl.data}&apikey=nduok4MPQR`
              );
              miwa
                .sendMessage(from, { image: tx }, { quoted: jin })
                .catch((e) => {
                  reply(
                    "*Um erro foi detectado, Verifique se está usando da maneira correta (obs: Não usem palavras com acentos e nem emojis).*"
                  );
                  reagir("✖️");
                });
              break;

            case "ultplv":
            case "ultimas-palavras":
              {
                try {
                  if (!isGroup)
                    return reply("*Vai usar saporra no teu pv pra quê?*");
                  if (!isBotGroupAdmins)
                    return reply("*O Bot precisa ser adm, seu corno*");
                  if (!isGroupAdmins && !isDono)
                    return reply(
                      "*Coé kkkkk, quer usar esse comando? nem adm tu é, fdp*"
                    );
                  if (!menc_os2 || menc_jid2[1])
                    return reply(
                      "Marque a mensagem do usuário ou marque o @ dele.., lembre de só marcar um usuário..."
                    );
                  if (!JSON.stringify(groupMembers).includes(menc_os2))
                    return reply(
                      "Este usuário já foi removido do grupo ou saiu."
                    );
                  if (JSON.stringify(numeroDono).indexOf(menc_os2) >= 0)
                    return reply("Não posso remover meu dono 🤧");
                  if (BotNumber.includes(menc_os2))
                    return reply(
                      "Não sou besta de remover eu mesmo né 🙁, mas estou decepcionado com você"
                    );
                  if (JSON.stringify(groupAdmins).indexOf(menc_os2) >= 0)
                    return reply("Não posso remover um (a) Administrador (a).");
                  reply("*Elx tem 30s para falar suas últimas palavras!*");
                  await delay(30000);
                  miwa.sendMessage(from, {
                    text: `@${menc_os2.split("@")[0]} foi Removido (a) 👾`,
                    mentions: [menc_os2],
                  });
                  miwa.groupParticipantsUpdate(from, [menc_os2], "remove");
                } catch (e) {
                  console.log(e);
                }
              }
              break;

            case "ranknazista":
            case "ranknazistas":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              ABC = `*💂‍♂RANK DOS 5 MAIS NAZISTAS DO GRUPO 卐🤡*\n\n`;
              for (var i = 0; i < 5; i++) {
                ABC += `${Math.floor(Math.random() * 100)}% @${
                  somembros[Math.floor(Math.random() * somembros.length)].split(
                    "@"
                  )[0]
                }\n\n`;
              }
              mencionarIMG(ABC, rnknazista);
              break;

            case "rankotaku":
            case "rankotakus":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              ABC = `*㊙ RANK DOS 5 MAIS OTAKU DO GRUPO ( ˶•̀ _•́ ˶)*\n\n`;
              for (var i = 0; i < 5; i++) {
                ABC += `${Math.floor(Math.random() * 100)}% @${
                  somembros[Math.floor(Math.random() * somembros.length)].split(
                    "@"
                  )[0]
                }\n\n`;
              }
              mencionarIMG(ABC, rnkotaku);
              break;

            case "rankpau":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              ABC = `*RANK DOS 5 PAU MAIOR DO GRUPO 📏*\n\n`;
              TMPAU = [
                "Pequeno pra cact, se mata maluco 🥴",
                `Pequenininho chega ser até fofo 🥺`,
                `Menor que meu dedo mindinho pequeno demais 😑`,
                `Até que dá sentir, tá na média 😌`,
                `Grandinho 🥵`,
                `Grande até `,
                `Gigantesco igual meu braço 😖`,
                `Enorme quase chega no útero 🤧`,
                `Grandão demais em, e uii 🤯`,
                `Vara de pegar manga, grande demais, como sai na rua assim??`,
                "Que grandão em, nasceu metade animal 😳",
              ];
              for (var i = 0; i < 5; i++) {
                ABC += `${
                  TMPAU[Math.floor(Math.random() * TMPAU.length)]
                } _- @${
                  somembros[Math.floor(Math.random() * somembros.length)].split(
                    "@"
                  )[0]
                }\n\n`;
              }
              mencionarIMG(ABC, rnkpau);
              break;

            case "dianatal": {
              if (!isGroup)
                return reply("Este comando só pode ser usado em grupos.");
              if (!isModobn) return reply("Modo brincadeira está desligado.");
              const natal = new Date("2024-12-25");
              const hoje = new Date();
              const diasRestantes = Math.ceil(
                (natal - hoje) / (1000 * 60 * 60 * 24)
              );
              const nununatalcu = `
🎄 *Contador Regressivo para o Natal* 🎄

Faltam apenas ${diasRestantes} dias para o Natal! 🎅

Vamos nos preparar para as festividades!

`;
              await miwa.sendMessage(
                from,
                { text: nununatalcu },
                { quoted: info }
              );
              setInterval(async () => {
                const hojeAtual = new Date();
                const diasRestantesAtualizados = Math.ceil(
                  (natal - hojeAtual) / (1000 * 60 * 60 * 24)
                );
                const nununatalcuAtualizada = `
🎄 *Contador Regressivo para o Natal* 🎄

Faltam apenas ${diasRestantesAtualizados} dias para o Natal! 🎅

Vamos nos preparar para as festividades!
`;
                await miwa.sendMessage(
                  from,
                  { text: nununatalcuAtualizada },
                  { quoted: info }
                );
              }, 24 * 60 * 60 * 1000);
              break;
            }

            case "totalcmd":
            case "totalcomando":
              {
                fs.readFile("./index.js", "utf8", (err, data) => {
                  if (err) throw err;
                  let regex = /case\s'(\w+)'/g;
                  let match;
                  let caseNames = [];
                  while ((match = regex.exec(data)) !== null) {
                    caseNames.push(match[1]);
                  }
                  let output = "" + caseNames.join("\n• ");
                  let totalCount = caseNames.length;
                  reply(
                    `Ola ${pushname} atualmente eu tenho um total de: ${totalCount} comandos.`
                  );
                });
              }
              break;

            case "addcase": {
              //Feita Lux mods
              if (!q) return reply("Está faltando nada não??");
              if (!SoDono) return;
              const pula = [
                fs
                  .readFileSync("index.js", "utf8")
                  .slice(
                    0,
                    fs.readFileSync("index.js", "utf8").lastIndexOf("break") + 5
                  ),
                q,
                fs
                  .readFileSync("index.js", "utf8")
                  .slice(
                    fs.readFileSync("index.js", "utf8").lastIndexOf("break") + 5
                  ),
              ].join("\n\n\n\n");
              fs.writeFileSync("index.js", pula);
              reply("Nova case adicionada com sucesso!");
              break;
            }

            case "mencionar":
              if (!q)
                return reply(
                  `Você usou o comando de forma incorreta, use a correta: ${prefix}mencionar corno`
                );
              if (!isGroup)
                return reply(`Esta brincadeira só funciona em grupos.`);
              if (!isModobn) return reply(mess.onlyGroupFun(prefix));
              d = [];
              teks = `- Estou mencionando o *${q}* do grupo: `;
              for (i = 0; i < 1; i++) {
                r = Math.floor(
                  Math.random() * groupMetadata.participants.length + 0
                );
                teks += `@${groupMembers[r].id.split("@")[0]}`;
                d.push(groupMembers[r].id);
              }
              await mentions(teks, d, true);
              break;

            case "jogodavelha":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!menc_jid2)
                return reply(
                  "Marque junto com o comando, o @ do usuário que deseja desafiar.."
                );
              joguinhodavelhajs.push(sender);
              fs.writeFileSync(
                "./database/usuarios/joguinhodavelha.json",
                JSON.stringify(joguinhodavelhajs)
              );
              joguinhodavelhajs2.push(from);
              fs.writeFileSync(
                "./database/usuarios/joguinhodavelha2.json",
                JSON.stringify(joguinhodavelhajs2)
              );
              if (fs.existsSync(`./arquivos/tictactoe/db/${from}.json`)) {
                const boardnow = setGame(`${from}`);
                const matrix = boardnow._matrix;
                const chatMove = `*🎮Ꮐ̸Ꭺ̸Ꮇ̸Ꭼ̸ Ꭰ̸Ꭺ̸ Ꮩ̸Ꭼ̸Ꮮ̸Ꮋ̸Ꭺ̸🕹️*
     
[❗] Alguém está jogando no momento...\n\n@${boardnow.X} VS @${boardnow.O}
     
❌ : @${boardnow.X}
⭕ : @${boardnow.O}
     
 Sua vez : @${boardnow.turn == "X" ? boardnow.X : boardnow.O}
     
${matrix[0][0]}  ${matrix[0][1]}  ${matrix[0][2]}
${matrix[1][0]}  ${matrix[1][1]}  ${matrix[1][2]}
${matrix[2][0]}  ${matrix[2][1]}  ${matrix[2][2]}
`;
                miwa.sendMessage(
                  from,
                  { text: chatMove },
                  {
                    quoted: info,
                    mentions: [
                      boardnow.X + "@s.whatsapp.net",
                      boardnow.O + "@s.whatsapp.net",
                    ],
                  }
                );
                return;
              }
              if (argss.length === 1)
                return reply(`*⟅❗⟆ Jogue com Alguem!!!!*
*para inicar a partida : ${prefix + command} @membro do gp*`);
              const boardnow = setGame(`${from}`);
              console.log(`Start No jogodavelha ${boardnow.session}`);
              boardnow.status = false;
              boardnow.X = sender.replace("@s.whatsapp.net", "");
              boardnow.O = argss[1].replace("@", "");
              var blabord = [`${boardnow.X}`, `${boardnow.O}`];
              fs.writeFileSync(
                `./arquivos/tictactoe/db/${from}.json`,
                JSON.stringify(boardnow, null, 2)
              );
              const strChat = `*『📌ᎬՏᏢᎬᎡᎪΝᎠϴ ϴ ϴᏢϴΝᎬΝͲᎬ⚔️』*
     
@${sender.replace(
                "@s.whatsapp.net",
                ""
              )} _está te desafiando para uma partida de jogo da velha..._
_[ ${
                argss[1]
              } ] Use *『S』* para aceitar ou *『N』* para não aceitar..._\n\nEm caso de problemas, marque algum administrador para resetar o jogo com o comando ${prefix}rv`;
              b = [sender, menc_jid];
              mentions(strChat, b, true);
              break;

            case "resetarvelha":
            case "resetavelha":
            case "resetarv":
            case "resetav":
            case "resetvelha":
            case "rv":
              if (!isJoguin && !isGroupAdmins)
                return reply(
                  `Fale com quem iniciou o jogo, só ele pode resetar, ou então algum admin.`
                );
              if (fs.existsSync("./arquivos/tictactoe/db/" + from + ".json")) {
                DLT_FL("./arquivos/tictactoe/db/" + from + ".json");
                reply(`Jogo da velha resetado com sucesso nesse grupo!`);
                joguinhodavelhajs.splice([]);
                fs.writeFileSync(
                  "./database/usuarios/joguinhodavelha.json",
                  JSON.stringify(joguinhodavelhajs)
                );
                joguinhodavelhajs2.splice([]);
                fs.writeFileSync(
                  "./database/usuarios/joguinhodavelha2.json",
                  JSON.stringify(joguinhodavelhajs2)
                );
              } else {
                reply(`Não a nenhuma sessão em andamento...`);
              }
              break;

            case "ppt":
              if (args.length < 1)
                return reply(
                  `Você deve digitar ${prefix}ppt pedra, ${prefix}ppt papel ou ${prefix}ppt tesoura`
                );
              ppt = ["pedra", "papel", "tesoura"];
              ppy = ppt[Math.floor(Math.random() * ppt.length)];
              ppg = Math.floor(Math.random() * 1) + 10;
              pptb = ppy;
              if (
                (pptb == "pedra" && args == "papel") ||
                (pptb == "papel" && args == "tesoura") ||
                (pptb == "tesoura" && args == "pedra")
              ) {
                var vit = "vitoria";
              } else if (
                (pptb == "pedra" && args == "tesoura") ||
                (pptb == "papel" && args == "pedra") ||
                (pptb == "tesoura" && args == "papel")
              ) {
                var vit = "derrota";
              } else if (
                (pptb == "pedra" && args == "pedra") ||
                (pptb == "papel" && args == "papel") ||
                (pptb == "tesoura" && args == "tesoura")
              ) {
                var vit = "empate";
              } else if ((vit = "undefined")) {
                return reply(
                  `Você deve digitar ${prefix}ppt pedra, ${prefix}ppt papel ou ${prefix}ppt tesoura`
                );
              }
              if (vit == "vitoria") {
                var tes = "Vitória do jogador";
              }
              if (vit == "derrota") {
                var tes = "A vitória é do BOT";
              }
              if (vit == "empate") {
                var tes = "O jogo terminou em empate";
              }
              reply(
                `${NomeDoBot} jogou: ${pptb}\nO jogador jogou: ${args}\n\n${tes}`
              );
              break;

            case "anagrama":
              if (!isGroup) return reply(mess.onlyGroup());
              const anaaleatorio = Math.floor(
                Math.random() * palavrasANA.length
              );
              if (!isGroupAdmins) return reply("Comando apenas para admins..");
              if (args.length == 0)
                return reply(
                  "Use 1 para ativar o jogo do anagrama, ou seja, para desativar utilize o valor numérico 0"
                );
              if (args.join(" ") === "1") {
                if (fs.existsSync(`./arquivos/games/anagrama/${from}.json`)) {
                  let dataAnagrama2 = JSON.parse(
                    fs.readFileSync(`./arquivos/games/anagrama/${from}.json`)
                  );
                  reply(`O jogo já foi iniciado neste grupo:
Anagrama: ${dataAnagrama2.embaralhada}
Uma dica: ${dataAnagrama2.dica}
`);
                } else {
                  fs.writeFileSync(
                    `./arquivos/games/anagrama/${from}.json`,
                    `${JSON.stringify(palavrasANA[anaaleatorio])}`
                  );
                  miwa.sendMessage(from, {
                    text: `╭━━ ⪩「 Descubra a palavra 」
▢ ⌁ ⚠︎ Anagrama: ${palavrasANA[anaaleatorio].embaralhada}
▢ ⌁ ⚠︎ Dica: ${palavrasANA[anaaleatorio].dica}
╰━━━ ⪨ 「 ${NomeDoBot} 」`,
                  });
                }
              } else if (args.join(" ") === "0") {
                if (!fs.existsSync(`./arquivos/games/anagrama/${from}.json`))
                  return reply(
                    "Não tem como desativar o jogo do anagrama pôs ele não foi ativado"
                  );
                fs.unlinkSync(`./arquivos/games/anagrama/${from}.json`);
                reply("Desativado com sucesso.");
              }
              break;

            case "quizanimais":
              if (!isGroup) return reply(mess.onlyGroup());
              const animaisquiz = Math.floor(
                Math.random() * quizanimais.length
              );
              if (!isGroupAdmins) return reply("Comando apenas para admins..");
              if (args.length == 0)
                return reply(
                  "Use 1 para ativar o quiz animais, ou seja, para desativar utilize o valor numérico 0"
                );
              if (args.join(" ") === "1") {
                if (
                  fs.existsSync(`./arquivos/games/quiz-animais/${from}.json`)
                ) {
                  let dataAnagrama2 = JSON.parse(
                    fs.readFileSync(
                      `./arquivos/games/quiz-animais/${from}.json`
                    )
                  );
                  imagemtexto = `╭━━ ⪩ 「 Descubra o animal 」
▢ ⌁ ⚠︎ *Jogador:* ${pushname}
╰━━━ ⪨ 「 ${NomeDoBot} 」`;
                  wew = await getBuffer(`${dataAnagrama2.foto}`);
                  await miwa.sendMessage(
                    from,
                    { image: wew, caption: imagemtexto, thumbnail: wew },
                    { quoted: selo }
                  );
                } else {
                  fs.writeFileSync(
                    `./arquivos/games/quiz-animais/${from}.json`,
                    `${JSON.stringify(quizanimais[animaisquiz])}`
                  );
                  imagemtexto = `╭━━ ⪩ 「 Descubra o animal 」
▢ ⌁ ⚠︎ *Jogador:* ${pushname}
╰━━━ ⪨ 「 ${NomeDoBot} 」`;
                  wew = await getBuffer(`${dataAnagrama2.foto}`);
                  await miwa.sendMessage(
                    from,
                    { image: wew, caption: imagemtexto, thumbnail: wew },
                    { quoted: selo }
                  );
                }
              } else if (args.join(" ") === "0") {
                if (
                  !fs.existsSync(`./arquivos/games/quiz-animais/${from}.json`)
                )
                  return reply(
                    "Não tem como desativar o jogo pôs ele não foi ativado"
                  );
                fs.unlinkSync(`./arquivos/games/quiz-animais/${from}.json`);
                reply("Desativado com sucesso.");
              }
              break;

            case "cassino":
              reply(
                `Olá ${pushname} - Aguarde 9 segundos para sair o resultado da roleta..`
              );
              const soto = [
                "🍊 : 🍒 : 🍐",
                "🍒 : 🔔 : 🍊",
                "🍇 : 🍇 : 🍇",
                "🍊 : 🍋 : 🔔",
                "🔔 : 🍒 : 🍐",
                "🔔 : 🍒 : 🍊",
                "🍊 : 🍋 : 🍊",
                "🍐 : 🍒 : 🍋",
                "🍐 : 🍐 : 🍐",
                "🍊 : 🍒 : 🍒",
                "🔔 : 🔔 : 🍇",
                "🍌 : 🍒 : 🔔",
                "🍐 : 🔔 : 🔔",
                "🍊 : 🍋 : 🍒",
                "🍋 : 🍋 : 🍌",
                "🔔 : 🔔 : 🍇",
                "🔔 : 🍐 : 🍇",
                "🔔 : 🔔 : 🔔",
                "🍒 : 🍒 : 🍒",
                "🍌 : 🍌 : 🍌",
              ];
              const somtoy2 = sotoy[Math.floor(Math.random() * sotoy.length)];
              if (
                somtoy2 == "🥑 : 🥑 : 🥑" ||
                somtoy2 == "🍉 : 🍉 : 🍉" ||
                somtoy2 == "🍓 : 🍓 : 🍓" ||
                somtoy2 == "🍎 : 🍎 : 🍎" ||
                somtoy2 == "🍍 : 🍍 : 🍍" ||
                somtoy2 == "🥝 : 🥝 : 🥝" ||
                somtoy2 == "🍑 : 🍑 : 🍑" ||
                somtoy2 == "🥥 : 🥥 : 🥥" ||
                somtoy2 == "🍋 : 🍋 : 🍋" ||
                somtoy2 == "🍐 : 🍐 : 🍐" ||
                somtoy2 == "🍌 : 🍌 : 🍌" ||
                somtoy2 == "🍒 : 🍒 : 🍒" ||
                somtoy2 == "🔔 : 🔔 : 🔔" ||
                somtoy2 == "🍊 : 🍊 : 🍊" ||
                somtoy2 == "🍇 : 🍇 : 🍇"
              ) {
                var Vitória =
                  "Canta comigo é o brazzino... *Você ganhou! Parabéns amigo!*";
              } else {
                var Vitória =
                  "*Você perdeu..* Que pena! Não desista, tente novamente.";
              }
              setTimeout(async function () {
                const cassino = `Depois de 9 segundos passados, aqui está o resultado da roleta, vamos ver?
*➬ Resultado da Roleta -* ${somtoy2}

${Vitória}`;
                msgSemQuoted(cassino);
              }, 9000);
              break;

            //==(AUDIOS/DE-MUSICA/ZOUEIRA/ETC..)===\\

            //case 'bot':
            //const soundft = fs.readFileSync('./database/audios/qviado.mp3')
            //miwa.sendMessage(from, {audio: soundft, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
            //break

            //=======================================\\

            //=====(ALTERADOR-DE-AUDIO/VIDEO)=======\\

            case "adolesc":
            case "vozmenino":
              if (
                (isMedia &&
                  !info.message.imageMessage &&
                  !info.message.videoMessage) ||
                isQuotedAudio
              ) {
                reply(`espera ai, vou mandar rapaz`);
                muk = isQuotedAudio
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .audioMessage
                  : info.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec(
                  `ffmpeg -i ${gem} -filter:a atempo=1.06,asetrate=44100*1.25 ${ran}`,
                  (err, stderr, stdout) => {
                    DLT_FL(gem);
                    if (err)
                      return reply(
                        "Ocorreu um erro ao adicionar o *efeito sonoro* no áudio."
                      );
                    hah = fs.readFileSync(ran);
                    kaic.sendMessage(
                      from,
                      { audio: hah, mimetype: "audio/mpeg", ptt: true },
                      { quoted: kaiczin }
                    );
                    DLT_FL(ran);
                  }
                );
              } else {
                reply("Marque o áudio..");
              }
              break;

            case "videolento":
            case "slowvid":
              if (
                ((isMedia && info.message.videoMessage) || !isQuotedImage) &&
                !q.length <= 1
              ) {
                reply(`espera ai, vou mandar rapaz`);
                encmedia = isQuotedVideo
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .videoMessage
                  : info.message.videoMessage;
                rane = getRandom("." + (await getExtension(encmedia.mimetype)));
                buffimg = await getFileBuffer(encmedia, "video");
                fs.writeFileSync(rane, buffimg);
                media = rane;
                ran = getRandom(".mp4");
                exec(
                  `ffmpeg -i ${media} -filter_complex "[0:v]setpts=2*PTS[v];[0:a]atempo=0.5[a]" -map "[v]" -map "[a]" ${ran}`,
                  (err) => {
                    DLT_FL(media);
                    if (err) return reply(`Err: ${err}`);
                    buffer453 = fs.readFileSync(ran);
                    kaic.sendMessage(
                      from,
                      { video: buffer453, mimetype: "video/mp4" },
                      { quoted: kaiczin }
                    );
                    DLT_FL(ran);
                  }
                );
              } else {
                reply("Marque um vídeo..");
              }
              break;

            case "estourar":
              if (
                (isMedia &&
                  !info.message.imageMessage &&
                  !info.message.videoMessage) ||
                isQuotedAudio
              ) {
                reply(`ESTOURADO E COMIGO MESMO`);
                muk = isQuotedAudio
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .audioMessage
                  : info.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec(
                  `ffmpeg -i ${gem} -af equalizer=f=90:width_type=o:width=2:g=30 ${ran}`,
                  (err, stderr, stdout) => {
                    if (err)
                      return reply(
                        "Ocorreu um erro ao adicionar o *efeito sonoro* no áudio."
                      );
                    hah = fs.readFileSync(ran);
                    miwa.sendMessage(
                      from,
                      { audio: hah, mimetype: "audio/mpeg", ptt: true },
                      { quoted: info }
                    );
                    DLT_FL(ran);
                  }
                );
              } else {
                reply("To acelerando maninho...");
              }
              break;

              case "audiorapido":
                if (
                    (isMedia &&
                        !info.message.imageMessage &&
                        !info.message.videoMessage) ||
                    isQuotedAudio
                ) {
                    reply(`Acelerando o áudio em 25%...`);
                    
                    // Verifica se o áudio foi marcado
                    muk = isQuotedAudio
                        ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage
                        : info.message.audioMessage;
            
                    // Gera um nome aleatório para o arquivo de saída
                    rane = getRandom("." + (await getExtension(muk.mimetype)));
            
                    // Extrai o áudio para processar
                    buffimg = await getFileBuffer(muk, "audio");
                    fs.writeFileSync(rane, buffimg);
            
                    // Gera um nome aleatório para o arquivo modificado
                    ran = getRandom(".mp3");
            
                    // Comando FFMPEG para acelerar o áudio em 25%
                    exec(
                        `ffmpeg -i ${rane} -filter:a "atempo=1.25" ${ran}`,
                        (err, stderr, stdout) => {
                            if (err) {
                                return reply("Ocorreu um erro ao acelerar o áudio.");
                            }
            
                            // Lê o arquivo de saída com o efeito aplicado
                            hah = fs.readFileSync(ran);
            
                            // Envia o áudio acelerado
                            miwa.sendMessage(
                                from,
                                { audio: hah, mimetype: "audio/mpeg", ptt: true },
                                { quoted: info }
                            );
            
                            // Remove os arquivos temporários
                            DLT_FL(ran);
                            DLT_FL(rane);
                        }
                    );
                } else {
                    reply("Marque o áudio para acelerar.");
                }
                break;

                case "audiolento":
                  if (
                      (isMedia &&
                          !info.message.imageMessage &&
                          !info.message.videoMessage) ||
                      isQuotedAudio
                  ) {
                      reply(`Fica lento ae kk`);
                      
                      // Verifica se o áudio foi marcado
                      muk = isQuotedAudio
                          ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage
                          : info.message.audioMessage;

                      // Gera um nome aleatório para o arquivo de saída
                      rane = getRandom("." + (await getExtension(muk.mimetype)));

                      // Extrai o áudio para processar
                      buffimg = await getFileBuffer(muk, "audio");
                      fs.writeFileSync(rane, buffimg);

                      // Gera um nome aleatório para o arquivo modificado
                      ran = getRandom(".mp3");

                      // Comando FFMPEG para desacelerar o áudio em 25%
                      exec(
                          `ffmpeg -i ${rane} -filter:a "atempo=0.75" ${ran}`,
                          (err, stderr, stdout) => {
                              if (err) {
                                  return reply("Ocorreu um erro ao desacelerar o áudio.");
                              }

                              // Lê o arquivo de saída com o efeito aplicado
                              hah = fs.readFileSync(ran);

                              // Envia o áudio desacelerado
                              miwa.sendMessage(
                                  from,
                                  { audio: hah, mimetype: "audio/mpeg", ptt: true },
                                  { quoted: info }
                              );

                              // Remove os arquivos temporários
                              DLT_FL(ran);
                              DLT_FL(rane);
                          }
                      );
                  } else {
                      reply("Marque o áudio para desacelerar.");
                  }
                  break;

              case "vibrato":
                if (
                  (isMedia &&
                    !info.message.imageMessage &&
                    !info.message.videoMessage) ||
                  isQuotedAudio
                ) {
                  reply(`Deixa co pai`);
                  
                  // Verifica se o áudio foi marcado
                  muk = isQuotedAudio
                    ? info.message.extendedTextMessage.contextInfo.quotedMessage
                        .audioMessage
                    : info.message.audioMessage;
                  
                  // Gera um nome aleatório para o arquivo de saída
                  rane = getRandom("." + (await getExtension(muk.mimetype)));
                  
                  // Extrai o áudio para processar
                  buffimg = await getFileBuffer(muk, "audio");
                  fs.writeFileSync(rane, buffimg);
                  
                  // Gera um nome aleatório para o arquivo modificado
                  ran = getRandom(".mp3");
                  
                  // Comando FFMPEG para aplicar o efeito Vibrato
                  exec(
                    `ffmpeg -i ${rane} -af "vibrato=f=10.0:d=0.7" ${ran}`,
                    (err, stderr, stdout) => {
                      if (err) {
                        return reply("Ocorreu um erro ao aplicar o *efeito vibrato* no áudio.");
                      }
                      
                      // Lê o arquivo de saída com o efeito aplicado
                      hah = fs.readFileSync(ran);
                      
                      // Envia o áudio com o efeito Vibrato
                      miwa.sendMessage(
                        from,
                        { audio: hah, mimetype: "audio/mpeg", ptt: true },
                        { quoted: info }
                      );
                      
                      // Remove o arquivo temporário
                      DLT_FL(ran);
                    }
                  );
                } else {
                  reply("Marque o áudio para aplicar o efeito vibrato.");
                }
                break;
                                                                

            case "videorapido":
            case "fastvid":
              if (
                ((isMedia && info.message.videoMessage) || !isQuotedImage) &&
                !q.length <= 1
              ) {
                reply(`TOU FAZENDO AQUI PRA VOCE`);
                encmedia = isQuotedVideo
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .videoMessage
                  : info.message.videoMessage;
                rane = getRandom("." + (await getExtension(encmedia.mimetype)));
                buffimg = await getFileBuffer(encmedia, "video");
                fs.writeFileSync(rane, buffimg);
                media = rane;
                ran = getRandom(".mp4");
                exec(
                  `ffmpeg -i ${media} -filter_complex "[0:v]setpts=0.5*PTS[v];[0:a]atempo=2[a]" -map "[v]" -map "[a]" ${ran}`,
                  (err) => {
                    if (err) return reply(`Err: ${err}`);
                    buffer453 = fs.readFileSync(ran);
                    miwa.sendMessage(
                      from,
                      { video: buffer453, mimetype: "video/mp4" },
                      { quoted: info }
                    );
                    DLT_FL(ran);
                  }
                );
              } else {
                reply("Marque o vídeo..");
              }
              break;

            case "antispam":
              if (!isGroup) return reply(mess.onlyGroup());
              if (!isGroupAdmins)
                return reply(
                  "esse comando so pode ser utilizado por administradores"
                );
              if (!isBotGroupAdmins)
                return reply("preciso ser adm para ativar esse comando");
              if (args.length < 1) return reply("1 pra ligar / 0 pra desligar");
              if (Number(args[0]) === 1) {
                if (isAntiSpam) return reply("Ja esta ativo");
                dataGp[0].antispam = true;
                setGp(dataGp);
                reply(
                  "🌀 Ativou com sucesso o recurso de ANTI SPAM neste grupo 📝"
                );
              } else if (Number(args[0]) === 0) {
                if (!isAntiSpam) return reply("Ja esta Desativado");
                dataGp[0].antispam = false;
                setGp(dataGp);
                reply(
                  "‼️ Desativou com sucesso o recurso de ANTI SPAM neste grupo✔️"
                );
              } else {
                reply("1 para ativar, 0 para desativar");
              }
              break;

            case "grave2":
              if (
                (isMedia &&
                  !info.message.imageMessage &&
                  !info.message.videoMessage) ||
                isQuotedAudio
              ) {
                reply(`PERA PONHA`);
                muk = isQuotedAudio
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .audioMessage
                  : info.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec(
                  `ffmpeg -i ${gem} -filter:a "atempo=1.6,asetrate=22100" ${ran}`,
                  (err, stderr, stdout) => {
                    if (err)
                      return reply(
                        "Ocorreu um erro ao adicionar o *efeito sonoro* no áudio."
                      );
                    hah = fs.readFileSync(ran);
                    miwa.sendMessage(
                      from,
                      { audio: hah, mimetype: "audio/mpeg", ptt: true },
                      { quoted: info }
                    );
                    DLT_FL(ran);
                  }
                );
              } else {
                reply("Marque o áudio..");
              }
              break;

            case "grave":
              if (
                (isMedia &&
                  !info.message.imageMessage &&
                  !info.message.videoMessage) ||
                isQuotedAudio
              ) {
                reply(`AGUARDA`);
                muk = isQuotedAudio
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .audioMessage
                  : info.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec(
                  `ffmpeg -i ${gem} -filter:a "atempo=0.9,asetrate=44100" ${ran}`,
                  (err, stderr, stdout) => {
                    if (err)
                      return reply(
                        "Ocorreu um erro ao adicionar o *efeito sonoro* no áudio."
                      );
                    hah = fs.readFileSync(ran);
                    miwa.sendMessage(
                      from,
                      { audio: hah, mimetype: "audio/mpeg", ptt: true },
                      { quoted: info }
                    );
                    DLT_FL(ran);
                  }
                );
              } else {
                reply("Marque o áudio..");
              }
              break;

            case "bass":
              if (
                (isMedia &&
                  !info.message.imageMessage &&
                  !info.message.videoMessage) ||
                isQuotedAudio
              ) {
                reply(`JA VOU FAZER`);
                muk = isQuotedAudio
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .audioMessage
                  : info.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec(
                  `ffmpeg -i ${gem} -af equalizer=f=20:width_type=o:width=2:g=15 ${ran}`,
                  (err, stderr, stdout) => {
                    if (err)
                      return reply(
                        "Ocorreu um erro ao adicionar o *efeito sonoro* no áudio."
                      );
                    hah = fs.readFileSync(ran);
                    miwa.sendMessage(
                      from,
                      { audio: hah, mimetype: "audio/mpeg", ptt: true },
                      { quoted: info }
                    );
                    DLT_FL(ran);
                  }
                );
              } else {
                reply("Marque o áudio...");
              }
              break;

            case "bass2":
              if (
                (isMedia &&
                  !info.message.imageMessage &&
                  !info.message.videoMessage) ||
                isQuotedAudio
              ) {
                reply(`PERA PERA`);
                muk = isQuotedAudio
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .audioMessage
                  : info.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec(
                  `ffmpeg -i ${gem} -af equalizer=f=94:width_type=o:width=2:g=30 ${ran}`,
                  (err, stderr, stdout) => {
                    if (err)
                      return reply(
                        "Ocorreu um erro ao adicionar o *efeito sonoro* no áudio."
                      );
                    hah = fs.readFileSync(ran);
                    miwa.sendMessage(
                      from,
                      { audio: hah, mimetype: "audio/mpeg", ptt: true },
                      { quoted: info }
                    );
                    DLT_FL(ran);
                  }
                );
              } else {
                reply("Marque o áudio..");
              }
              break;

            case "tomp3":
              if ((isMedia && !info.message.imageMessage) || isQuotedVideo) {
                post = isQuotedImage
                  ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                      .message.extendedTextMessage.contextInfo.message
                      .imageMessage
                  : info.message.videoMessage;
                reply(mess.wait());
                encmedia = isQuotedVideo
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .videoMessage
                  : info.message.videoMessage;
                rane = getRandom("." + (await getExtension(encmedia.mimetype)));
                buffimg = await getFileBuffer(encmedia, "video");
                fs.writeFileSync(rane, buffimg);
                media = rane;
                ran = getRandom(".mp4");
                exec(`ffmpeg -i ${media} ${ran}`, (err) => {
                  DLT_FL(media);
                  if (err)
                    return reply("❌ Falha ao converter vídeo para mp3 ❌");
                  buffer = fs.readFileSync(ran);
                  miwa.sendMessage(
                    from,
                    { audio: buffer, mimetype: "audio/mpeg" },
                    { quoted: info }
                  );
                  DLT_FL(ran);
                });
              } else {
                reply("Marque o vídeo para transformar em áudio por favor..");
              }
              break;

            case "esquilo":
              reply(`AGUARDE 3 MINUTOS`);
              if (
                (isMedia &&
                  !info.message.imageMessage &&
                  !info.message.videoMessage) ||
                isQuotedAudio
              ) {
                muk = isQuotedAudio
                  ? info.message.extendedTextMessage.contextInfo.quotedMessage
                      .audioMessage
                  : info.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec(
                  `ffmpeg -i ${gem} -filter:a "atempo=0.7,asetrate=65100" ${ran}`,
                  (err, stderr, stdout) => {
                    if (err) return reply("Erro!");
                    hah = fs.readFileSync(ran);
                    miwa.sendMessage(
                      from,
                      { audio: hah, mimetype: "audio/mpeg", ptt: true },
                      { quoted: info }
                    );
                    DLT_FL(ran);
                  }
                );
              } else {
                reply("Marque o áudio...");
              }
              break;

            //==========(EFEITOS-MARCAR)==========\\

            case "togif":
              if (!isQuotedSticker) return reply("Marque a figurinha animada!");
              try {
                if (
                  ((isMedia && !info.message.videoMessage) ||
                    isQuotedSticker) &&
                  !q.length <= 1
                ) {
                  buff = await getFileBuffer(
                    info.message.extendedTextMessage.contextInfo.quotedMessage
                      .stickerMessage,
                    "sticker"
                  );
                  reply(
                    "『❗』 Aguarde, estou convertendo a figurinha para o formato gif."
                  );
                  a = await webp_mp4(buff);
                  miwa
                    .sendMessage(
                      from,
                      {
                        video: { url: a },
                        gifPlayback: true,
                        fileName: `stick.gif`,
                      },
                      { quoted: info }
                    )
                    .catch((e) => {
                      reply("ERROR!!!");
                    });
                  DLT_FL(buff);
                }
              } catch {
                reply("Erro..");
              }
              break;

            case "convite":
              if (!budy.includes("chat.whatsapp.com"))
                return reply(
                  "Cadê o link do grupo que você deseja que eu entre?"
                );
              cnvt = args.join(" ");
              reply(
                `O convite para o bot entrar em seu grupo, foi enviado, espere o dono aceitar..`
              );
              miwa.sendMessage(nmrdn, {
                text: `Foi enviado um convite para o bot entrar neste grupo.\nNúmero dele(a) : wa.me/${
                  sender.split("@")[0]
                }\n\nLink-Grupo: ${cnvt}\n\nPara me autorizar a entrar no grupo, use o seguinte comando: ${prefix}entrar e o link do grupo enviado em cima.\nExemplo : ${prefix}entrar ${cnvt}\n\nPara recursar ou avisar o usuário que enviou o link que o convite foi recusado, use: ${prefix}recusar e número do usuário.\nExemplo : ${prefix}recusar ${
                  sender.split("@")[0]
                }`,
              });
              break;

            case "recusar":
              if (!SoDono) return reply(mess.onlyOwner());
              miwa.sendMessage(`${q}@s.whatsapp.net`, {
                text: `Olá amigo(a), sinto muito dizer, mas seu convite foi recusado.`,
              });
              break;

            case "join":
            case "entrar":
              if (!SoDono) return reply(mess.onlyOwner());
              string = args.join(" ");
              if (!string)
                return reply("Insira um link de convite ao lado do comando.");
              if (
                string.includes("chat.whatsapp.com/") ||
                reply("Ops, verifique o link que você inseriu.")
              ) {
                link = string.split("app.com/")[1];
                try {
                  miwa.groupAcceptInvite(`${link}`);
                } catch (erro) {
                  if (String(erro).includes("resource-limit")) {
                    reply("O grupo já está com o alcance de 257 membros.");
                  }
                  if (String(erro).includes("not-authorized")) {
                    reply(
                      "Não foi possível entrar no grupo.\nMotivo: Banimento."
                    );
                  }
                }
              }
              break;

            //=======(COMANDOS-SCRAPER)=========\\

            case "portalzacarias":
              {
                try {
                  const url = "https://portaldozacarias.com.br/site/";
                  const response = await fetch(url);
                  const html = await response.text();
                  const $ = cheerio.load(html);
                  const manchetes = [];
                  $(".container-manchete").each((i, element) => {
                    if (i >= 5) return;
                    const foto = $(element)
                      .find(".foto-manchete img")
                      .attr("src");
                    const titulo = $(element).find(".titulo-manchete a").text();
                    const link = $(element)
                      .find(".titulo-manchete a")
                      .attr("href");
                    if (foto && titulo && link) {
                      manchetes.push({
                        foto: url + foto,
                        titulo,
                        link: "https://portaldozacarias.com.br" + link,
                      });
                    }
                  });
                  $(".container-noticia").each((i, element) => {
                    if (manchetes.length >= 5) return;
                    const foto = $(element)
                      .find(".foto-manchete2 img")
                      .attr("src");
                    const titulo = $(element)
                      .find(".titulo-manchete2 a")
                      .text();
                    const link = $(element)
                      .find(".titulo-manchete2 a")
                      .attr("href");
                    if (foto && titulo && link) {
                      manchetes.push({
                        foto: url + foto,
                        titulo,
                        link: "https://portaldozacarias.com.br" + link,
                      });
                    }
                  });
                  if (manchetes.length > 0) {
                    for (const { foto, titulo, link } of manchetes) {
                      const fullImageUrl = foto.startsWith("http")
                        ? foto
                        : `https:${foto}`;
                      await miwa.sendMessage(
                        from,
                        {
                          image: { url: fullImageUrl },
                          caption: `${titulo}\n${link}`,
                        },
                        { quoted: info }
                      );
                    }
                  } else {
                    await reply(
                      "Desculpe, não consegui encontrar manchetes no Portal do Zacarias."
                    );
                  }
                } catch (e) {
                  console.error(e);
                  await reply(
                    "Ocorreu um erro ao buscar as manchetes. Tente novamente mais tarde."
                  );
                }
              }
              break;

            case "wallpaper":
              {
                const query = encodeURIComponent(q);
                const url = `https://unsplash.com/pt-br/s/fotografias/${query}`;
                try {
                  const response = await fetch(url);
                  const html = await response.text();
                  const $ = cheerio.load(html);
                  const imageUrl = $("img").first().attr("src");
                  if (imageUrl) {
                    const fullImageUrl = imageUrl.startsWith("http")
                      ? imageUrl
                      : `https:${imageUrl}`;
                    await miwa.sendMessage(
                      from,
                      {
                        image: { url: fullImageUrl },
                        caption: `Aqui está o wallpaper que você procurou: ${query}`,
                      },
                      { quoted: info }
                    );
                  } else {
                    await reply(
                      "Desculpe, não consegui encontrar um wallpaper com essa pesquisa."
                    );
                  }
                } catch (e) {
                  console.error(e);
                  await reply(
                    "Ocorreu um erro ao buscar o wallpaper. Tente novamente mais tarde."
                  );
                }
              }
              break;

            case "mrcoferta": {
              try {
                const { data } = await axios.get(
                  "https://www.mercadolivre.com.br/ofertas"
                );
                const $ = cheerio.load(data);
                const ofertas = [];
                $(".promotion-item").each((index, element) => {
                  if (index >= 5) return;
                  const titulo = $(element)
                    .find(".promotion-item__title")
                    .text()
                    .trim();
                  const precoAnterior = $(element)
                    .find(".andes-money-amount--previous")
                    .text()
                    .trim();
                  const desconto = $(element)
                    .find(".promotion-item__discount-text")
                    .text()
                    .trim();
                  const link = $(element)
                    .find("a.promotion-item__link-container")
                    .attr("href");

                  if (titulo && link) {
                    ofertas.push({
                      titulo,
                      precoAnterior,
                      desconto,
                      link,
                    });
                  }
                });
                let mensagem = "🛍️ *Ofertas do Dia no Mercado Livre:*\n\n";
                ofertas.forEach((oferta) => {
                  mensagem +=
                    `🌟 *Título:* ${oferta.titulo}\n` +
                    `🛒 *Preço Anterior:* ${oferta.precoAnterior}\n` +
                    `🔖 *Desconto:* ${oferta.desconto}\n` +
                    `🔗 *Link:* ${oferta.link}\n\n`;
                });

                reply(mensagem);
              } catch (error) {
                console.error(
                  "Erro ao buscar ofertas do Mercado Livre:",
                  error
                );
                reply(
                  "⚠️ Não foi possível buscar as ofertas do Mercado Livre no momento."
                );
              }
              break;
            }

            case "g1pes": {
              try {
                const ryuuUrl = `https://g1.globo.com/busca/?q=${encodeURIComponent(
                  q
                )}`;
                const { data: ryuuData } = await axios.get(ryuuUrl);
                const ryuu$ = cheerio.load(ryuuData);
                const ryuuResultados = [];
                ryuu$(".widget--info").each((ryuuIndex, ryuuElement) => {
                  const ryuuTitulo = ryuu$(ryuuElement)
                    .find(".widget--info__title")
                    .text()
                    .trim();
                  const ryuuDescricao = ryuu$(ryuuElement)
                    .find(".widget--info__description")
                    .text()
                    .trim();
                  const ryuuLink = ryuu$(ryuuElement).find("a").attr("href");
                  const ryuuCategoria = ryuu$(ryuuElement)
                    .find(".widget--info__header")
                    .text()
                    .trim();
                  const ryuuTempo = ryuu$(ryuuElement)
                    .find(".widget--info__meta")
                    .text()
                    .trim();
                  if (ryuuTitulo && ryuuLink) {
                    ryuuResultados.push({
                      titulo: ryuuTitulo,
                      descricao: ryuuDescricao,
                      link: `https:${ryuuLink}`,
                      categoria: ryuuCategoria,
                      tempo: ryuuTempo,
                    });
                  }
                });
                console.log(ryuuResultados);
                let ryuuMensagem = "🔍 *Resultados da Busca no G1:*\n\n";
                ryuuResultados.forEach((ryuuResultado) => {
                  ryuuMensagem +=
                    `📌 *${ryuuResultado.titulo}*\n` +
                    `🗂️ *Categoria:* ${ryuuResultado.categoria}\n` +
                    `🕒 *Publicado:* ${ryuuResultado.tempo}\n` +
                    `📝 *Descrição:* ${ryuuResultado.descricao}\n` +
                    `🔗 *Link:* ${ryuuResultado.link}\n\n`;
                });
                await miwa.sendMessage(
                  from,
                  { text: ryuuMensagem },
                  { quoted: info }
                );
              } catch (error) {
                console.error("Erro ao buscar notícias no G1:", error);
                reply(
                  "⚠️ Não foi possível buscar as notícias no G1 no momento."
                );
              }
              break;
            }

            case "tekmod":
            case "teksmod":
            case "teksmods":
            case "tekmods": {
              try {
                if (!q) return reply(`cade o nome`);
                const { data: ryuualamevdata } = await axios.get(
                  `https://tekmods.com/?s=${q}`
                );
                const $ = cheerio.load(ryuualamevdata);
                const recunucu = [];
                $(".hentry").each((index, element) => {
                  const titulo = $(element).find("h3").text().trim();
                  const link = $(element).find("a").attr("href");
                  const descricao = $(element).find("div.small").text().trim();

                  if (titulo && link) {
                    recunucu.push({
                      titulo,
                      link,
                      descricao,
                    });
                  }
                });
                let elecumame = "🔍 *Resultados da busca no TekMods:*\n\n";
                recunucu.forEach((resultado, index) => {
                  elecumame +=
                    `🫑 *Título:* ${resultado.titulo}\n` +
                    `🥬 *Descrição:* ${resultado.descricao}\n` +
                    `🍞 *Link:* ${resultado.link}\n\n`;
                });
                if (recunucu.length > 0) {
                  await miwa.sendMessage(
                    from,
                    { text: elecumame },
                    { quoted: info }
                  );
                } else {
                  reply("🔍 Nenhum resultado encontrado para a pesquisa.");
                }
              } catch (error) {
                console.error("Erro ao buscar dados do TekMods:", error);
                reply(
                  "⚠️ Não foi possível buscar os resultados do TekMods no momento."
                );
              }
              break;
            }

            case "gato2": {
              const racagato = args.join("-").toLowerCase();
              if (!racagato) {
                reply("⚠️ Por favor, forneça o nome da raça de gato.");
                break;
              }
              try {
                const { data } = await axios.get(
                  `https://www.zooplus.pt/magazine/resultado-da-pesquisa?str=${racagato}`
                );
                const $ = cheerio.load(data);

                // Extraindo informações
                const artigo = $(".content-intro").first(); // Pega o primeiro artigo
                const titulo = artigo.find(".content-intro__title a").text();
                const descricao = artigo.find(".content-intro__body").text();
                const imagem = artigo
                  .find(".bg-pic")
                  .css("background-image")
                  .replace(/^url\(["']?/, "")
                  .replace(/["']?\)$/, "");

                if (titulo && descricao) {
                  const mensagem =
                    `🐱 *Informações sobre a raça ${racagato}:*\n\n` +
                    `📜 ${descricao}\n` +
                    `🔗 https://www.zooplus.pt/magazine/resultado-da-pesquisa?str=${racagato}\n`;
                  if (imagem) {
                    await miwa.sendMessage(
                      from,
                      {
                        image: { url: imagem },
                        caption: mensagem,
                      },
                      { quoted: info }
                    );
                  } else {
                    await miwa.sendMessage(
                      from,
                      { text: mensagem },
                      { quoted: info }
                    );
                  }
                } else {
                  reply(
                    "⚠️ Não foi possível encontrar informações para a raça fornecida."
                  );
                }
              } catch (error) {
                console.error(
                  "Erro ao buscar informações sobre a raça de gato:",
                  error
                );
                reply(
                  "⚠️ Não foi possível buscar as informações sobre a raça de gato no momento."
                );
              }
              break;
            }

            case "gato": {
              const racagato = args.join("-");
              if (!racagato) {
                reply("⚠️ Por favor, forneça o nome da raça de gato.");
                break;
              }
              try {
                const { data } = await axios.get(
                  `https://www.peritoanimal.com.br/racas-de-gatos/${racagato}.html`
                );
                const $ = cheerio.load(data);
                const titulo = $('meta[property="og:title"]').attr("content");
                const descricao = $('meta[property="og:description"]').attr(
                  "content"
                );
                const imagem = $('meta[property="og:image"]').attr("content");
                if (titulo && descricao) {
                  const mensagem =
                    `🐱 *Informações sobre a raça ${racagato}:*\n\n` +
                    `📜 ${descricao}\n` +
                    `🔗 https://www.peritoanimal.com.br/racas-de-gatos/${racagato}.html\n`;
                  if (imagem) {
                    await miwa.sendMessage(
                      from,
                      {
                        image: { url: imagem },
                        caption: mensagem,
                      },
                      { quoted: info }
                    );
                  } else {
                    await miwa.sendMessage(
                      from,
                      { text: mensagem },
                      { quoted: info }
                    );
                  }
                } else {
                  reply(
                    "⚠️ Não foi possível encontrar informações para a raça fornecida."
                  );
                }
              } catch (error) {
                console.error(
                  "Erro ao buscar informações sobre a raça de gato:",
                  error
                );
                reply(
                  "⚠️ Não foi possível buscar as informações sobre a raça de gato no momento."
                );
              }
              break;
            }

            case "celular": {
              try {
                if (!q) {
                  reply("⚠️ Por favor, forneça o nome do celular para buscar.");
                  break;
                }
                const url = `https://www.tudocelular.com/?sName=${encodeURIComponent(
                  q
                )}`;
                const { data } = await axios.get(url);
                const $ = cheerio.load(data);
                const celulares = [];
                console.log("HTML retornado:", data);
                $(".autocomplete-search ul li").each((index, element) => {
                  let titulo = $(element).find("a span").text().trim();
                  const link = $(element).find("a").attr("href");
                  const preco = $(element).find(".price").text().trim();
                  titulo = titulo
                    .replace(/Video Review/g, "")
                    .replace(/R\$/g, "")
                    .trim();
                  if (titulo && link && preco) {
                    celulares.push({
                      titulo,
                      link,
                      preco,
                    });
                  }
                });
                console.log("Celulares encontrados:", celulares);
                let mensagem = "📱 *Resultados de Pesquisa de Celular:*\n\n";
                celulares.forEach((celular, index) => {
                  mensagem +=
                    `🔹 *Título:* ${celular.titulo}\n` +
                    `💲 *Preço:* ${celular.preco}\n` +
                    `🔗 *Link:* ${celular.link}\n`;
                  mensagem += "\n";
                });
                if (celulares.length > 0) {
                  await miwa.sendMessage(
                    from,
                    { text: mensagem },
                    { quoted: info }
                  );
                } else {
                  reply("⚠️ Nenhum celular encontrado com o nome fornecido.");
                }
              } catch (error) {
                console.error("Erro ao buscar informações do celular:", error);
                reply(
                  "⚠️ Não foi possível buscar as informações do celular no momento."
                );
              }
              break;
            }

            case "carro": {
              if (args.length == 0)
                return await reply(
                  `Cadê o nome do carro que você deseja ver informações?`
                );
              try {
                const modelo = args.join(" ");
                const apiUrl = `https://www.carqueryapi.com/api/0.3/?cmd=getTrims&keyword=${encodeURIComponent(
                  modelo
                )}`;
                const response = await axios.get(apiUrl);
                const carros = response.data.Trims;
                if (carros.length == 0)
                  return reply("Nenhum resultado encontrado.");
                const carro = carros[0];
                const marca = carro.make_display || "Não disponível";
                const combustivel = carro.model_engine_fuel || "Não disponível";
                const criado = carro.make_country || "Não disponível";
                const tipoDeMotor = carro.model_engine_type || "Não disponível";

                const dataToSave = {
                  marca,
                  combustivel,
                  criado,
                  tipoDeMotor,
                };
                let existingData = [];
                if (fs.existsSync("./ryuu/caruo.json")) {
                  existingData = JSON.parse(
                    fs.readFileSync("./ryuu/caruo.json", "utf8")
                  );
                }
                existingData.push(dataToSave);
                fs.writeFile(
                  "./ryuu/caruo.json",
                  JSON.stringify(existingData, null, 2),
                  (err) => {
                    if (err) {
                      console.error("Erro ao salvar o arquivo JSON:", err);
                      return reply("Erro ao salvar as informações.");
                    }
                  }
                );

                const caption = `
🚗 *Modelo:* ${modelo}
🏭 *Marca:* ${dataToSave.marca}
⛽ *Combustível:* ${dataToSave.combustivel}
👨‍🔧 *Criador:* ${dataToSave.criado}
🔋 *Tipo de Motor:* ${dataToSave.tipoDeMotor}
🗃️ *fonte:* https://www.carqueryapi.com/downloads/
`;

                await miwa.sendMessage(from, { text: caption }).catch((e) => {
                  console.error("Erro ao enviar a mensagem:", e);
                  return reply("Erro ao buscar o carro");
                });
              } catch (error) {
                console.error("Erro ao buscar informações do carro:", error);
                return reply("Erro ao buscar o carro");
              }
              break;
            }

            case "nba": {
              //criador: ryuu (deixe meus credito pfv)
              try {
                const { data } = await axios.get(
                  "https://www.espn.com.br/nba/"
                );
                const $ = cheerio.load(data);
                const noticias = [];
                $(".contentItem__content--fullWidth").each((index, element) => {
                  const titulo = $(element)
                    .find(".contentItem__title")
                    .text()
                    .trim();
                  const descricao = $(element)
                    .find(".contentItem__contentMeta span")
                    .text()
                    .trim();
                  const link = $(element).find("a").attr("href");

                  if (titulo && link) {
                    noticias.push({
                      titulo,
                      descricao,
                      link: `https://www.espn.com.br${link}`,
                    });
                  }
                });
                let mensagem = "🏀 *Últimas Notícias da NBA:*\n\n";
                noticias.forEach((noticia) => {
                  mensagem +=
                    `⛱️ *Título:* ${noticia.titulo}\n` +
                    `📝 *Dia:* ${noticia.descricao}\n` +
                    `🔗 *Link:* ${noticia.link}\n\n`;
                });
                await miwa.sendMessage(
                  from,
                  { text: mensagem },
                  { quoted: info }
                );
              } catch (error) {
                console.error("Erro ao buscar notícias da NBA:", error);
                reply(`erro`);
              }
              break; //criador: ryuu (deixe meus credito pfv)
            }

            case "internacional": {
              //ryuu que fez, nao tira os credito pfv
              try {
                const baseURL = "https://www.estadao.com.br/internacional/";
                const { data } = await axios.get(baseURL);
                const $ = cheerio.load(data);
                const noticias = [];
                $(".noticia-single-block").each((index, element) => {
                  if (index >= 5) return;
                  const titulo = $(element).find(".headline").text().trim();
                  const link = $(element).find("a").attr("href");
                  const imagem = $(element).find("img").attr("data-src");
                  if (link && !link.startsWith("http")) {
                    link = `https://www.estadao.com.br${link}`;
                  }
                  if (imagem && !imagem.startsWith("http")) {
                    imagem = `https://www.estadao.com.br${imagem}`;
                  }

                  if (titulo && link) {
                    noticias.push({
                      titulo,
                      link,
                      imagem: imagem || null,
                    });
                  }
                });
                let mensagem = "🌍 *Últimas Notícias Internacionais:*\n\n";
                noticias.forEach((noticia) => {
                  mensagem +=
                    `🧭 *Título:* ${noticia.titulo}\n` +
                    `🪐 *Link:* ${noticia.link}\n\n`;
                });
                if (noticias.length > 0 && noticias[0].imagem) {
                  await miwa.sendMessage(
                    from,
                    {
                      image: { url: noticias[0].imagem },
                      caption: mensagem,
                    },
                    { quoted: info }
                  );
                } else {
                  await miwa.sendMessage(
                    from,
                    { text: mensagem },
                    { quoted: info }
                  );
                } //ryuu que fez, nao tira os credito pfv
              } catch (error) {
                console.error("Erro ao buscar notícias internacionais:", error);
                reply(
                  "⚠️ Não foi possível buscar as notícias internacionais no momento."
                );
              }
              break; //ryuu que fez, nao tira os credito pfv
            }

            case "noticiatempo": {
              try {
                const { data } = await axios.get(
                  "https://www.climatempo.com.br/noticias"
                );
                const $ = cheerio.load(data);
                const ryuunoticias = [];

                $(".wrapper-news").each((index, element) => {
                  const titulo = $(element).find(".title").text().trim();
                  const descricao = $(element)
                    .find(".-font-base")
                    .text()
                    .trim();
                  const link = $(element).find("a").attr("data-link");
                  const imagem =
                    $(element).find("img").attr("data-src") ||
                    $(element).find("img").attr("data-fallback");

                  if (titulo && link) {
                    ryuunoticias.push({
                      titulo,
                      descricao,
                      link: `https://www.climatempo.com.br/noticias/${link}`,
                      imagem,
                    });
                  }
                });
                let mensagem = "🌦️ *Últimas Notícias do Climatempo:*\n\n";

                ryuunoticias.forEach((noticia, index) => {
                  mensagem +=
                    `🔹 *Título:* ${noticia.titulo}\n` +
                    `📝 *Descrição:* ${noticia.descricao}\n` +
                    `🔗 *Link:* ${noticia.link}\n`;
                  mensagem += "\n";
                });
                if (ryuunoticias.length > 0 && ryuunoticias[0].imagem) {
                  await miwa.sendMessage(
                    from,
                    {
                      image: { url: ryuunoticias[0].imagem },
                      caption: mensagem,
                    },
                    { quoted: info }
                  );
                } else {
                  await miwa.sendMessage(
                    from,
                    { text: mensagem },
                    { quoted: info }
                  );
                }
              } catch (error) {
                console.error("Erro ao buscar notícias do Climatempo:", error);
                reply(
                  "⚠️ Não foi possível buscar as notícias do Climatempo no momento."
                );
              }
              break;
            }

            case "localizar": {
              if (!q) {
                reply(
                  "⚠️ Por favor, digite o local que deseja pesquisar no PicapauMap."
                );
                return; //picapau
              }

              try {
                const termo = q.trim();
                const picapau = encodeURIComponent(termo);
                const searchUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${picapau}`;

                const response = await axios.get(searchUrl);
                const data = response.data;

                if (data && data.length > 0) {
                  const local = data[0];
                  const tipo = local.type;
                  const titulo = local.display_name;
                  const endCompleto = local.address
                    ? Object.values(local.address).join(", ")
                    : "Não disponível";
                  const descricao = `
├⪧⬆️ *Latitude:* ${local.lat}
├⪧➡️ *Longitude* ${local.lon}`;
                  reply(`╭───「 ${nomebot} 」
├⪧🔎 *LOCAL:* ${titulo}
├⪧🧭 *cordenadas* ${descricao}
├⪧📥 *Tipo* ${tipo}
├⪧🔖 *Referencia:* PicapauMap
├⪧⏰ *Hora:* ${hora}
╰──────────────────
`);
                } else {
                  reply(
                    "❌ Não foi possível encontrar informações para o local pesquisado."
                  );
                } //Zenitsu
              } catch (error) {
                console.error(
                  "Erro ao buscar informações no PicapauMap:",
                  error
                );
                reply("❌ Erro ao buscar informações no PicapauMap.");
              } //Zenitsu
              break;
            }

            case "jovempan": {
              try {
                const { data } = await axios.get("https://jovempan.com.br/");
                const $ = cheerio.load(data);
                const dados = [];
                const unescapeHtml = (text) =>
                  typeof text === "string"
                    ? text
                        .replace(/&amp;/g, "&")
                        .replace(/&quot;/g, '"')
                        .replace(/&gt;/g, ">")
                        .replace(/&#39;/g, "'")
                        .replace(/lt;/g, "<")
                        .replace(/&#8216;/g, "‘")
                        .replace(/&#8217;/g, "’")
                        .trim()
                    : undefined;
                $("div.featured-news").each((i, e) => {
                  dados.push({
                    noticia: unescapeHtml($(e).find("p.title").text()?.trim()),
                    imagem: $(e).find("img").attr("src"),
                    link: $(e).find("a").attr("href"),
                  });
                });
                $("div.news-small").each((i, e) => {
                  if ($(e).find("a").attr("href")) {
                    dados.push({
                      noticia: unescapeHtml(
                        $(e).find("p.title").text() ||
                          $(e).find("p.title-edicase").text()
                      ),
                      imagem: $(e).find("img").attr("src"),
                      categoria:
                        $(e).find("h6.category").text()?.trim() ||
                        $(e).find("h6.category-edicase").text()?.trim(),
                      link: $(e).find("a").attr("href"),
                    });
                  }
                });
                $("a.item").each((i, e) => {
                  dados.push({
                    noticia: unescapeHtml($(e).find("p.title").text()?.trim()),
                    imagem: $(e).find("img").attr("src"),
                    categoria: $(e).find("h6.category").text()?.trim(),
                    link: $(e).attr("href"),
                  });
                });
                let replyMessage = dados
                  .map((dado) => {
                    return ` 🫕 Notícia: ${dado.noticia}\n 🏧 Link: ${dado.link}\n\n`;
                  })
                  .join("\n");

                reply(replyMessage);
              } catch (error) {
                console.error(error);
                reply(
                  "Ocorreu um erro ao tentar buscar as notícias da Jovem Pan."
                );
              }
              break;
            }

            case "sbt":
              {
                try {
                  const { data } = await axios.get(
                    "https://sbtnews.sbt.com.br/noticias"
                  );
                  const $ = cheerio.load(data);
                  let noticias = [];
                  $(".LatestNews_lastestNewsPageItems__jCdvo > div > a").each(
                    (index, element) => {
                      const titulo = $(element).find(".if-title").text().trim();
                      const link = `https://sbtnews.sbt.com.br${$(element).attr(
                        "href"
                      )}`;
                      const descricao = $(element)
                        .find(".if-subtitle")
                        .text()
                        .trim();
                      noticias.push({
                        titulo,
                        link,
                        descricao,
                      });
                    }
                  );
                  let mensagem = "📰 *Últimas Notícias do SBT News:*\n\n";
                  noticias.forEach((noticia) => {
                    mensagem +=
                      `🌟 *${noticia.titulo}*\n` +
                      `📝 ${noticia.descricao}\n` +
                      `🔗 ${noticia.link}\n\n`;
                  });
                  ryuu(mensagem);
                } catch (error) {
                  console.error("Erro ao buscar notícias:", error);
                  reply(
                    "🚨 Não foi possível buscar as notícias no SBT News no momento."
                  );
                }
              }
              break;

            case "ringtone": {
              const title = q;
              if (!title) {
                reply(
                  "⚠️ Por favor, forneça um título para buscar o ringtone."
                );
                break;
              }

              reply("🔍 Aguarde, estou buscando o ringtone...");

              try {
                const response = await axios.get(
                  "https://meloboom.com/en/search/" + encodeURIComponent(title)
                );
                let $ = cheerio.load(response.data);
                let resultados = [];

                $(
                  "#__next > main > section > div.jsx-2244708474.container > div > div > div > div:nth-child(4) > div > div > div > ul > li"
                ).each(function () {
                  resultados.push({
                    titulo: $(this).find("h4").text(),
                    audio: $(this).find("audio").attr("src"),
                  });
                });

                if (resultados.length > 0) {
                  let resultado = "🎵 Ringtones encontrados:\n\n";
                  resultados.forEach((item, index) => {
                    resultado += `🎶 *${index + 1}. ${item.titulo}*\n`;
                    resultado += item.audio ? `🔊  ${item.audio}\n` : "";
                    resultado += "\n";
                  });
                  reply(resultado);
                } else {
                  reply(
                    "🔍 Não foram encontrados ringtones para o título fornecido."
                  );
                }
              } catch (error) {
                reply(`⚠️ Erro ao buscar ringtones: ${error.message}`);
              }
              break;
            }

            case "mediafire":
              {
                async function mediafire(url) {
                  // by hiudy
                  return new Promise((resolve, reject) => {
                    axios
                      .get(url)
                      .then(({ data }) => {
                        const $ = cheerio.load(data);
                        const judul = $(
                          "body > div.mf-dlr.page.ads-alternate > div.content > div.center > div > div.dl-btn-cont > div.dl-btn-labelWrap > div.promoDownloadName.notranslate > div"
                        ).text();
                        const size = $(
                          "body > div.mf-dlr.page.ads-alternate > div.content > div.center > div > div.dl-info > ul > li:nth-child(1) > span"
                        ).text();
                        const upload_date = $(
                          "body > div.mf-dlr.page.ads-alternate > div.content > div.center > div > div.dl-info > ul > li:nth-child(2) > span"
                        ).text();
                        const link = $("#downloadButton").attr("href");
                        const hsil = {
                          status: true,
                          judul: link.split("/")[5],
                          upload_date: upload_date,
                          size: size,
                          mime: link.split("/")[5].split(".")[1],
                          link: link,
                        };
                        resolve(hsil);
                      })
                      .catch((error) => {
                        console.log(error);
                        resolve({ status: false });
                      });
                  });
                }

                if (!q) {
                  return reply(
                    "⚠️ Cade o link? Por favor, forneça um link do MediaFire."
                  );
                }

                try {
                  const result = await mediafire(q);

                  if (result.status) {
                    const output = `
📁 *Título:* ${result.judul}
🗂️ *Tipo de Arquivo:* ${result.mime}
🔗 *Link de Download:* ${result.link}
            `;
                    reply(output);
                    await miwa.sendMessage(
                      from,
                      {
                        document: { url: result.link },
                        mimetype: "text/plain",
                        fileName: result.judul,
                      },
                      { quoted: info }
                    );
                  } else {
                    reply("⚠️ Não foi possível obter as informações do link.");
                  }
                } catch (error) {
                  console.error(error);
                  reply(
                    "⚠️ Erro ao processar o link. Tente novamente mais tarde."
                  );
                }
              }
              break;

            case "playvideom":
              if (!q) return reply("Coloque o nome da música também");
              reply("🧺 aguarde irei mandar");
              const ydl = require("@distube/ytdl-core");
              fetch(
                `https://www.youtube.com/results?search_query=${encodeURIComponent(
                  q
                )}`
              )
                .then((response) => response.text())
                .then((body) => {
                  const videoId = body.match(/"videoId":"(.*?)"/)[1];
                  const videoUrl = `http://www.youtube.com/watch?v=${videoId}`;
                  return ydl(videoUrl, {
                    filter: (format) => format.container === "mp4",
                    quality: "highestvideo",
                  });
                })
                .then((stream) => {
                  const chunks = [];
                  stream.on("data", (chunk) => chunks.push(chunk));
                  stream.on("end", () => {
                    const videoBuffer = Buffer.concat(chunks);
                    miwa.sendMessage(
                      from,
                      {
                        video: videoBuffer,
                        mimetype: "video/mp4",
                        seconds: 10000000,
                        contextInfo: {
                          forwardingScore: 100000,
                          isForwarded: true,
                        },
                      },
                      { quoted: info }
                    );
                  });
                })
                .catch((err) => {
                  console.error(err);
                  reply("scraper deu erro");
                });
              break;

            case "playmodules":
            case "play-modules":
            case "playaudiom": //criador da case: ryuu & franky x
              const ytdl = require("@distube/ytdl-core");

              if (!q) return reply("Coloque o nome da música também");
              reply("🗡 consegue esperar 2 minutos? mandando..."); //criador da case: ryuu & franky x

              const searchUrl = `https://www.youtube.com/results?search_query=${encodeURIComponent(
                q
              )}`;
              fetch(searchUrl)
                .then((response) => response.text())
                .then((body) => {
                  const videoId = body.match(/"videoId":"(.*?)"/)[1];
                  const videoUrl = `http://www.youtube.com/watch?v=${videoId}`;
                  return ytdl(videoUrl, { filter: "audioonly" });
                }) //criador da case: ryuu & franky x
                .then((stream) => {
                  const chunks = [];
                  stream.on("data", (chunk) => chunks.push(chunk));
                  stream.on("end", () => {
                    const audioBuffer = Buffer.concat(chunks);
                    miwa.sendMessage(
                      from,
                      {
                        audio: audioBuffer,
                        mimetype: "audio/mpeg",
                        seconds: 360000000,
                        contextInfo: {
                          forwardingScore: 100000,
                          isForwarded: true,
                          forwardedNewsletterMessageInfo: {
                            newsletterJid: "120363144038483540@newsletter",
                          },
                        }, //criador da case: ryuu & franky x
                      },
                      {
                        quoted: {
                          key: { fromMe: false, participant: `${sender}` },
                          message: { conversation: `Ets de Vaginas ` },
                        },
                      }
                    );
                  });
                })
                .catch((err) => {
                  console.error(err);
                  reply("SCRAPER FALHOY");
                }); //criador da case: ryuu & franky x
              break; //criador da case: ryuu & franky x

            case "github":
              {
                if (!q)
                  return reply("⚠️ Por favor, forneça um termo de pesquisa.");
                const searchQuery = encodeURIComponent(q);
                const githubSearchUrl = `https://api.github.com/search/repositories?q=${searchQuery}&sort=stars&order=desc`;
                try {
                  const response = await fetch(githubSearchUrl, {
                    headers: { Accept: "application/vnd.github.v3+json" },
                  });
                  const data = await response.json();
                  const repositories = data.items.slice(0, 5);
                  const results = repositories.map((repo) => {
                    const name = repo.name;
                    const description = repo.description || "📝 Sem descrição";
                    const link = repo.html_url;
                    return `🔹 *${name}*\n🔸 ${description}\n🔗 ${link}`;
                  });
                  if (results.length === 0) {
                    reply("🔍 Nenhum repositório encontrado.");
                  } else {
                    const output = results.join("\n\n⏳ –\n\n");
                    reply(
                      `📚 Aqui estão os 5 principais resultados para "${q}":\n\n${output}`
                    );
                  }
                } catch (error) {
                  console.error(
                    "❌ Erro ao buscar resultados no GitHub:",
                    error
                  );
                  reply("⚠️ Ocorreu um erro ao buscar os resultados.");
                }
              }
              break;

            case "capitais":
              if (!q)
                return reply(
                  `Por favor, escolha um continente válido: Europa, América, Ásia, África ou Oceania.`
                );
              try {
                const scrapeCapitais = async (q) => {
                  const url = `https://www.dadosmundiais.com/capitais.php#${q}`;
                  const response = await axios.get(url);
                  const $ = cheerio.load(response.data);
                  const capitais = [];
                  $("table tbody tr").each((i, element) => {
                    const pais = $(element)
                      .find("td:nth-of-type(1)")
                      .text()
                      .trim();
                    const capital = $(element)
                      .find("td:nth-of-type(2)")
                      .text()
                      .trim();

                    if (pais && capital) {
                      capitais.push({ pais, capital });
                    }
                  });

                  return capitais;
                };
                const capitais = await scrapeCapitais(q);
                let replyMessage = `🌍 *Capitais da ${
                  q.charAt(0).toUpperCase() + q.slice(1)
                }* 🌍\n\n`;
                capitais.forEach((item, index) => {
                  replyMessage += `🔹 *País:* ${item.pais}\n`;
                  replyMessage += `🏙️ *Capital:* ${item.capital}\n\n`;
                });
                if (capitais.length === 0) {
                  replyMessage += "Não há informações disponíveis no momento.";
                }
                reply(replyMessage);
              } catch (error) {
                console.error(error);
                reply(
                  "🚨 Erro ao buscar as capitais. Tente novamente mais tarde."
                );
              }
              break;

            case "techbusca":
              {
                if (!q) {
                  return reply(
                    "🔍 Por favor, forneça um termo de busca. Exemplo: " +
                      prefix +
                      "techbusca samsung"
                  );
                }
                try {
                  const scrapeTechBusca = async (query) => {
                    const url = `https://www.techtudo.com.br/busca/?q=${encodeURIComponent(
                      query
                    )}+18&page=1`;
                    const response = await axios.get(url);
                    const $ = cheerio.load(response.data);
                    const articles = [];
                    $(".widget--info").each((i, element) => {
                      if (i >= 5) return;
                      const title = $(element)
                        .find(".widget--info__title")
                        .text()
                        .trim();
                      const summary = $(element)
                        .find(".widget--info__description")
                        .text()
                        .trim();
                      const date = $(element)
                        .find(".widget--info__meta")
                        .text()
                        .trim();

                      articles.push({ title, summary, date });
                    });

                    return articles;
                  };
                  const articles = await scrapeTechBusca(q);
                  let replyMessage =
                    "🔍 *Resultados da Busca no TechTudo* 🔍\n\n";
                  articles.forEach((article, index) => {
                    replyMessage += `🔹 *Resultado ${index + 1}*\n`;
                    replyMessage += `📝 *Título:* ${article.title}\n`;
                    replyMessage += `🗒️ *Resumo:* ${article.summary}\n`;
                    replyMessage += `🗓️ *Data:* ${article.date}\n\n`;
                  });

                  if (articles.length === 0) {
                    replyMessage +=
                      "Não foram encontrados resultados para a busca.";
                  }

                  reply(replyMessage);
                } catch (error) {
                  console.error(error);
                  reply(
                    "🚨 Erro ao buscar os resultados. Tente novamente mais tarde."
                  );
                }
              }
              break;

            case "techtudo":
              try {
                const scrapeTechtudo = async () => {
                  const response = await axios.get(
                    "https://www.techtudo.com.br/ultimas/"
                  );
                  const $ = cheerio.load(response.data);
                  const articles = [];
                  $(".feed-post").each((i, element) => {
                    if (i >= 5) return;
                    const title = $(element)
                      .find(".feed-post-body-title .feed-post-link")
                      .text()
                      .trim();
                    const link = $(element)
                      .find(".feed-post-body-title .feed-post-link a")
                      .attr("href");
                    const summary = $(element)
                      .find(".feed-post-body-resumo")
                      .text()
                      .trim();

                    articles.push({ title, link, summary });
                  });
                  return articles;
                };
                const articles = await scrapeTechtudo();
                let replyMessage = "📰 *Últimas Notícias do TechTudo* 📰\n\n";

                articles.forEach((article, index) => {
                  replyMessage += `🔹 *Notícia ${index + 1}*\n`;
                  replyMessage += `🔗 *Leia mais:* ${article.link}\n`;
                  replyMessage += `🗒️ *Resumo:* ${article.summary}\n\n`;
                });

                if (articles.length === 0) {
                  replyMessage += "Não há notícias disponíveis no momento.";
                }

                reply(replyMessage);
              } catch (error) {
                console.error(error);
                reply(
                  "🚨 Erro ao buscar as notícias do TechTudo. Tente novamente mais tarde."
                );
              }
              break;

            case "metro":
              try {
                const url = "https://www.metrocptm.com.br/ultimas-noticias/";
                const { data } = await axios.get(url);
                const $ = cheerio.load(data);
                const noticias = [];
                $(".post").each((i, element) => {
                  const titulo = $(element).find(".cs-entry__title a").text();
                  const link = $(element)
                    .find(".cs-entry__title a")
                    .attr("href");
                  const imagem = $(element)
                    .find(".cs-entry__thumbnail img")
                    .attr("src");
                  if (titulo && link) {
                    noticias.push({ titulo, link, imagem });
                  }
                });
                const msgNoticias = `📰 Últimas Notícias do Metro CPTM 📰\n\n${noticias
                  .slice(0, 5)
                  .map(
                    (noticia) =>
                      `📍 *${noticia.titulo}*\n🔗 *Link:* ${noticia.link} `
                  )
                  .join("\n\n")}`;
                await miwa.sendMessage(
                  from,
                  { text: msgNoticias },
                  { quoted: selo }
                );
              } catch (error) {
                console.error("Erro ao buscar notícias:", error);
                await miwa.sendMessage(
                  from,
                  {
                    text: "Desculpe, ocorreu um erro ao buscar as últimas notícias.",
                  },
                  { quoted: selo }
                );
              }
              break;

            case "aviao":
              {
                try {
                  const { data } = await axios.get("https://aeroin.net/?amp");
                  const $ = cheerio.load(data);
                  let noticias = [];
                  $(".td_module_mob_1").each((i, element) => {
                    const titulo = $(element).find(".entry-title a").text();
                    const autor = $(element)
                      .find(".td-post-author-name a")
                      .text();
                    const dataPublicacao = $(element)
                      .find(".td-post-date time")
                      .attr("datetime");
                    const imagem = $(element)
                      .find(".td-module-thumb amp-img")
                      .attr("src");
                    const link = $(element).find(".entry-title a").attr("href");

                    noticias.push({
                      titulo,
                      autor,
                      dataPublicacao,
                      imagem,
                      link,
                    });
                  });
                  noticias.shift();
                  let resposta = noticias
                    .map((noticia) => {
                      return `💨 *Título:* ${noticia.titulo}\n🍊 *Autor:* ${noticia.autor}\n🕖 *Data:* ${noticia.dataPublicacao}\n🍷 *Link:* ${noticia.link}\n`;
                    })
                    .join("\n");

                  reply(resposta || "Nenhuma notícia encontrada.");
                } catch (error) {
                  console.error(error);
                  reply("Erro ao acessar o site. Tente novamente mais tarde.");
                }
              }
              break;

            case "pin": {
              if (q.length < 1)
                return ryuu(
                  "Por favor, forneça uma consulta para buscar imagens no Pinterest."
                );

              try {
                async function pinterest(querry) {
                  return new Promise((resolve, reject) => {
                    axios
                      .get(
                        "https://id.pinterest.com/search/pins/?autologin=true&q=" +
                          encodeURIComponent(querry),
                        {
                          headers: {
                            cookie:
                              '_auth=1; _b="AVna7S1p7l1C5I9u0+nR3YzijpvXOPc6d09SyCzO+DcwpersQH36SmGiYfymBKhZcGg="; _pinterest_sess=TWc9PSZHamJOZ0JobUFiSEpSN3Z4a2NsMk9wZ3gxL1NSc2k2NkFLaUw5bVY5cXR5alZHR0gxY2h2MVZDZlNQalNpUUJFRVR5L3NlYy9JZkthekp3bHo5bXFuaFZzVHJFMnkrR3lTbm56U3YvQXBBTW96VUgzVUhuK1Z4VURGKzczUi9hNHdDeTJ5Y2pBTmxhc2owZ2hkSGlDemtUSnYvVXh5dDNkaDN3TjZCTk8ycTdHRHVsOFg2b2NQWCtpOWxqeDNjNkk3cS85MkhhSklSb0hwTnZvZVFyZmJEUllwbG9UVnpCYVNTRzZxOXNJcmduOVc4aURtM3NtRFo3STlmWjJvSjlWTU5ITzg0VUg1NGhOTEZzME9SNFNhVWJRWjRJK3pGMFA4Q3UvcHBnWHdaYXZpa2FUNkx6Z3RNQjEzTFJEOHZoaHRvazc1c1UrYlRuUmdKcDg3ZEY4cjNtZlBLRTRBZjNYK0lPTXZJTzQ5dU8ybDdVS015bWJKT0tjTWYyRlBzclpiamdsNmtpeUZnRjlwVGJXUmdOMXdTUkFHRWloVjBMR0JlTE5YcmhxVHdoNzFHbDZ0YmFHZ1VLQXU1QnpkM1FqUTNMTnhYb3VKeDVGbnhNSkdkNXFSMXQybjRGL3pyZXRLR0ZTc0xHZ0JvbTJCNnAzQzE0cW1WTndIK0trY05HV1gxS09NRktadnFCSDR2YzBoWmRiUGZiWXFQNjcwWmZhaDZQRm1UbzNxc21pV1p5WDlabm1UWGQzanc1SGlrZXB1bDVDWXQvUis3elN2SVFDbm1DSVE5Z0d4YW1sa2hsSkZJb1h0MTFpck5BdDR0d0lZOW1Pa2RDVzNySWpXWmUwOUFhQmFSVUpaOFQ3WlhOQldNMkExeDIvMjZHeXdnNjdMYWdiQUhUSEFBUlhUVTdBMThRRmh1ekJMYWZ2YTJkNlg0cmFCdnU2WEpwcXlPOVZYcGNhNkZDd051S3lGZmo0eHV0ZE42NW8xRm5aRWpoQnNKNnNlSGFad1MzOHNkdWtER0xQTFN5Z3lmRERsZnZWWE5CZEJneVRlMDd2VmNPMjloK0g5eCswZUVJTS9CRkFweHc5RUh6K1JocGN6clc1JmZtL3JhRE1sc0NMTFlpMVErRGtPcllvTGdldz0=; _ir=0',
                          },
                        }
                      )
                      .then(({ data }) => {
                        const $ = cheerio.load(data);
                        const result = [];
                        const hasil = [];
                        $("div > a")
                          .get()
                          .map((b) => {
                            const link = $(b).find("img").attr("src");
                            result.push(link);
                          });
                        result.forEach((v) => {
                          if (v == undefined) return;
                          hasil.push(v.replace(/236/g, "736"));
                        });
                        hasil.shift();
                        resolve(hasil);
                      })
                      .catch((e) => {
                        reject(e);
                      });
                  });
                }

                const imagens = await pinterest(q);

                if (imagens.length > 0) {
                  const imageMessages = [];
                  for (let i = 0; i < Math.min(3, imagens.length); i++) {
                    const imageBuffer = await getbuffer(imagens[i]);
                    const preparedImage = await prepareWAMessageMedia(
                      { image: imageBuffer },
                      { upload: miwa.waUploadToServer }
                    );
                    imageMessages.push({
                      imageMessage: preparedImage.imageMessage,
                      url: imagens[i],
                    });
                  }

                  await miwa.sendMessage(
                    from,
                    {
                      viewOnceMessage: {
                        message: {
                          messageContextInfo: {
                            deviceListMetadata: {},
                            deviceListMetadataVersion: 2,
                          },
                          interactiveMessage:
                            proto.Message.InteractiveMessage.create({
                              body: {},
                              footer: { text: "Ets de Vaginas" },
                              carouselMessage:
                                proto.Message.InteractiveMessage.CarouselMessage.fromObject(
                                  {
                                    cards: imageMessages.map(
                                      ({ imageMessage, url }) => ({
                                        header: {
                                          imageMessage: imageMessage,
                                          hasMediaAttachment: true,
                                        },
                                        body: {
                                          text: `Aqui está a sua foto 📸 🚄🤖`,
                                        },
                                        nativeFlowMessage: {
                                          buttons: [],
                                        },
                                      })
                                    ),
                                  }
                                ),
                            }),
                        },
                      },
                    },
                    { quoted: info }
                  );

                  await miwa.sendMessage(
                    from,
                    {
                      text: `Imagens de ${q} no Pinterest`,
                      footer: "Clique no botão abaixo para ver outras imagens.",
                      buttons: [
                        {
                          buttonId: `${prefix}pin ${q}`,
                          buttonText: { displayText: "Ver Outro" },
                          type: 1,
                        },
                      ],
                      headerType: 1,
                    },
                    { quoted: info }
                  );
                } else {
                  ryuu("Nenhuma imagem encontrada para a consulta fornecida.");
                }
              } catch (error) {
                console.error(error);
                ryuu(
                  "Ocorreu um erro ao buscar as imagens. Tente novamente mais tarde."
                );
              }

              break;
            }

            case "xvideos": {
              if (q.length < 1)
                return ryuu(
                  "Por favor, forneça a consulta para buscar vídeos."
                );

              const XvideosSearch = (q) =>
                new Promise((resolve, reject) => {
                  axios
                    .get(
                      `https://www.xvideos.com/?k=${removerAcentos(
                        q
                      ).replaceAll(" ", "+")}`,
                      {
                        headers: {
                          "User-Agent":
                            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                          Connection: "keep-alive",
                        },
                      }
                    )
                    .then((res) => {
                      const $ = cheerio.load(res.data);
                      const dados = [];
                      $("div.thumb-block").each((i, e) => {
                        if (i < 5) {
                          dados.push({
                            titulo: $(e)
                              .find(".thumb-under > p > a")
                              .attr("title"),
                            duracao: $(e)
                              .find(".thumb-under > p > a > span")
                              .text(),
                            link:
                              "https://www.xvideos.com" +
                              $(e).find(".thumb-under > p > a").attr("href"),
                          });
                        }
                      });
                      resolve({
                        status: res.status,
                        criador: "default_criador",
                        resultado: dados,
                      });
                    })
                    .catch((e) => {
                      reject(e);
                    });
                });

              try {
                const { resultado } = await XvideosSearch(q);
                if (resultado.length > 0) {
                  let resposta = "🎥 *Resultados da Busca no Xvideos:*\n\n";
                  resultado.forEach((video, index) => {
                    resposta += `📹 *Título ${index + 1}:* ${video.titulo}\n`;
                    resposta += `⏱️ *Duração:* ${video.duracao}\n`;
                    resposta += `🔗 *Link:* ${video.link}\n\n`;
                  });
                  console.log(resposta);
                  reply(resposta);
                } else {
                  ryuu("Nenhum vídeo encontrado para a consulta fornecida.");
                }
              } catch (error) {
                console.error(error);
                ryuu(
                  "Ocorreu um erro ao processar a busca. Tente novamente mais tarde."
                );
              }

              break;
            }

            case "terra":
              try {
                const useragent_2024 = {
                  "User-Agent":
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                };

                const Terra = () =>
                  new Promise((resolve, reject) => {
                    axios
                      .get("https://www.terra.com.br/noticias/", {
                        headers: {
                          ...useragent_2024,
                        },
                      })
                      .then((res) => {
                        const $ = cheerio.load(res.data);
                        const dados = [];
                        $(
                          "div.card.card-news.card-h-small.card-has-image"
                        ).each((i, e) => {
                          if (i < 10) {
                            dados.push({
                              noticia: $(e)
                                .find("a.card-news__text--title")
                                .text()
                                .trim(),
                              link: $(e)
                                .find("a.card-news__text--title")
                                .attr("href"),
                            });
                          }
                        });
                        resolve({
                          status: res.status,
                          fonte: "https://www.terra.com.br/noticias/",
                          criador: "default_criador",
                          resultado: dados,
                        });
                      })
                      .catch((e) => {
                        reject(e);
                      });
                  });
                const { resultado } = await Terra();
                let resposta = "🗞️ *Últimas Notícias do Terra:*\n\n";
                resultado.forEach((noticia, index) => {
                  resposta += `🛃 *Notícia ${index + 1}:* ${noticia.noticia}\n`;
                  resposta += `${
                    noticia.link ? `🔗 Link: ${noticia.link}` : ""
                  }\n\n`;
                });
                console.log(resposta);
                reply(resposta);
              } catch (e) {
                console.log(e);
                reply(
                  "⚠️ Erro ao buscar notícias do Terra. Tente novamente mais tarde."
                );
              }
              break;

            case "poder360":
              try {
                const useragent_1 = {
                  "User-Agent":
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                };
                const Poder360 = () =>
                  new Promise((resolve, reject) => {
                    axios
                      .get("https://www.poder360.com.br/", {
                        headers: {
                          ...useragent_1,
                        },
                      })
                      .then((res) => {
                        const $ = cheerio.load(res.data);
                        const dados = [];
                        $(".box-news-list__news").each((i, e) => {
                          if (i < 4) {
                            dados.push({
                              noticia: $(e).find("h2 > a").text(),
                              link: $(e).find("h2 > a").attr("href"),
                            });
                          }
                        });
                        resolve({
                          status: res.status,
                          fonte: "https://www.poder360.com.br/",
                          criador: ``,
                          resultado: dados,
                        });
                      })
                      .catch((e) => {
                        reject(e);
                      });
                  });
                const { resultado } = await Poder360();
                let resposta = "🗞️ *Últimas Notícias do Poder360:*\n\n";
                resultado.forEach((noticia, index) => {
                  resposta += `🚰 *Notícia ${index + 1}:* ${noticia.noticia}\n`;
                  resposta += `${
                    noticia.link ? `🔗 Link: ${noticia.link}` : ""
                  }\n\n`;
                });
                console.log(resposta);
                reply(resposta);
              } catch (e) {
                console.log(e);
                reply(
                  "⚠️ Erro ao buscar notícias do Poder360. Tente novamente mais tarde."
                );
              }
              break;

            case "kid": {
              if (args.length > 0) {
                const text = args.join(" ");

                const kidAudioURL = `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodeURIComponent(
                  text
                )}&tl=en&client=tw-ob`;

                reply("Aguarde, gerando o áudio infantil...");

                fetch(kidAudioURL)
                  .then((response) => response.buffer())
                  .then((buffer) => {
                    const tempFileName = getRandom(".mp3");
                    fs.writeFileSync(tempFileName, buffer);
                    miwa.sendMessage(
                      from,
                      {
                        audio: fs.readFileSync(tempFileName),
                        mimetype: "audio/mpeg",
                        ptt: true,
                      },
                      { quoted: info }
                    );
                    DLT_FL(tempFileName);
                  })
                  .catch((err) => {
                    reply("Ocorreu um erro ao gerar o áudio infantil.");
                    console.error(err);
                  });
              } else {
                reply("Por favor, forneça o texto para o áudio infantil.");
              }
              break;
            }

            case "wiki":
            case "wikipedia": {
              if (!q) {
                return reply(
                  "Por favor, forneça um termo para busca. Exemplo: wiki JavaScript"
                );
              }

              reply("Buscando informações, por favor, aguarde...");

              // Função wiki dentro da case
              const wiki = async (query) => {
                try {
                  const res = await axios.get(
                    `https://pt.m.wikipedia.org/wiki/${query}`
                  );
                  const $ = cheerio.load(res.data);
                  let wiki = $("#mf-section-0").find("p").text();
                  let thumb = $("#mf-section-0")
                    .find("div > div > a > img")
                    .attr("src");
                  thumb = thumb
                    ? thumb
                    : "//pngimg.com/uploads/wikipedia/wikipedia_PNG35.png";
                  let img = "https:" + thumb;
                  let título = $("h1#section_0").text();
                  return { wiki, img, título };
                } catch (error) {
                  throw new Error("Erro ao buscar informações na Wikipédia.");
                }
              };

              // Chamada da função wiki
              wiki(q)
                .then((data) => {
                  const { wiki, img, título } = data;
                  let message = `
      Título: ${título}
      Descrição: ${wiki}
      Imagem: ${img}
      `;

                  miwa.sendMessage(
                    from,
                    { image: { url: img }, caption: message },
                    { quoted: info }
                  );
                })
                .catch((err) => {
                  console.error(err);
                  reply(
                    "Erro ao buscar informações na Wikipédia. Por favor, tente novamente mais tarde."
                  );
                });

              break;
            }

            case "mercadolivre":
              {
                if (!q) {
                  return reply("Por favor, forneça um termo de busca.");
                }

                reply("🔍 Buscando no Mercado Livre, por favor aguarde...");

                try {
                  async function buscarMercadoLivre(query) {
                    try {
                      const response = await axios.get(
                        `https://lista.mercadolivre.com.br/${query}`,
                        {
                          headers: {
                            "User-Agent":
                              "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
                          },
                        }
                      );

                      const $ = cheerio.load(response.data);
                      const produtos = [];

                      $(".ui-search-result__content-wrapper").each(
                        (index, element) => {
                          const produto = $(element);
                          const titulo = produto
                            .find(".ui-search-item__title")
                            .text()
                            .trim();
                          const preco = produto
                            .find(".price-tag-fraction")
                            .text()
                            .trim();
                          const link = produto.find("a").attr("href");

                          produtos.push({
                            titulo,
                            preco,
                            link,
                          });
                        }
                      );

                      return produtos;
                    } catch (error) {
                      console.error(
                        "Erro ao buscar dados no Mercado Livre:",
                        error.message
                      );
                      throw error;
                    }
                  }
                  const produtos = await buscarMercadoLivre(q);

                  if (produtos.length === 0) {
                    return reply(
                      "❌ Não foram encontrados produtos para sua busca."
                    );
                  }

                  let mensagem = `
            ═════════✪═════════
            🛒 *Resultados da busca no Mercado Livre* 🛒
            ═════════✪═════════
        `;

                  produtos.slice(0, 5).forEach((produto) => {
                    mensagem += `
                📦 *Produto*: ${produto.titulo}
                💲 *Preço*: R$ ${produto.preco}
                🔗 *Link*: ${produto.link}
                ═════════✪═════════
            `;
                  });

                  mensagem += `
            🔄 *PRODUTO*
            ═════════✪═════════
        `;

                  reply(mensagem);
                } catch (error) {
                  reply(`❌ Erro ao buscar produtos: ${error.message}`);
                }
              }
              break;

            case "mandarcss": {
              //ryuu
              try {
                if (args.length < 2) {
                  return reply(
                    `Uso incorreto. Exemplo: ${prefix}mandarcss site`
                  );
                }
                const siteUrl = args[1];
                const response = await axios.get(siteUrl);
                const $ = cheerio.load(response.data);

                function extractCSS($) {
                  let css = "";
                  $("style").each((index, element) => {
                    css += $(element).html().trim() + "\n\n";
                  });
                  $('link[rel="stylesheet"]').each((index, element) => {
                    const cssUrl = $(element).attr("href");
                    axios
                      .get(cssUrl)
                      .then((res) => {
                        css += res.data.trim() + "\n\n";
                      })
                      .catch((err) => {
                        console.log("Erro ao obter arquivo CSS:", err);
                      });
                  });

                  return css;
                }

                const siteCSS = extractCSS($);

                // Verificar se o CSS tem mais de 30.099 palavras (aproximadamente)
                const wordsCount = siteCSS.split(/\s+/).length;
                if (wordsCount > 30099) {
                  return reply(
                    "O CSS deste site é muito extenso para ser enviado."
                  );
                }

                if (siteCSS.trim().length === 0) {
                  return reply("Nenhum CSS encontrado para este site.");
                }

                reply(`CSS do site ${siteUrl}:\n\`\`\`\n${siteCSS}\n\`\`\``);
              } catch (error) {
                console.log("Erro ao executar a função mandarcss:", error);
                reply(
                  "Ocorreu um erro ao tentar extrair o CSS do site. Verifique se você colocou https:// no começo."
                );
              }
              break;
            } //ryuu

            case "google":
              {
                //ryuu
                try {
                  let query = args.join(" ");
                  if (!query) {
                    return reply(
                      `Por favor, forneça um termo para buscar no Google.\nExemplo: ${prefix}google TESLA`
                    );
                  }
                  let url = `https://www.google.com/search?q=${encodeURIComponent(
                    query
                  )}`;
                  let response = await fetch(url, {
                    headers: {
                      "User-Agent":
                        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                    },
                  });
                  //ryuu
                  if (!response.ok) {
                    return reply(
                      "Não foi possível acessar o Google para buscar resultados."
                    );
                  }
                  let html = await response.text();
                  let $ = cheerio.load(html);

                  let resultados = [];

                  $(".tF2Cxc").each((i, el) => {
                    let titulo = $(el).find("h3").text().trim();
                    let link = $(el).find("a").attr("href");
                    let descricao = $(el).find(".VwiC3b").text().trim();
                    if (titulo && link && descricao) {
                      resultados.push({
                        titulo,
                        link,
                        descricao,
                      });
                    }
                  });

                  if (resultados.length === 0) {
                    return reply("Nenhum resultado encontrado para a busca.");
                  }

                  let mensagem = resultados
                    .slice(0, 5)
                    .map(
                      (res) =>
                        `🥷🏿 *Título:* ${res.titulo}\n💍 *Link:* ${res.link}\n🤖 *Descrição:* ${res.descricao}`
                    )
                    .join("\n\n");

                  reply(mensagem);
                } catch (e) {
                  console.error(e);
                  reply("Ocorreu um erro ao buscar resultados no Google.");
                }
              } //ryuu
              break; //ryuu

            case "versite":
              {
                try {
                  let site = args.join(" ");

                  if (!site) {
                    return reply(
                      `Por favor, forneça o URL de um site para verificar o status.\nExemplo: ${prefix}status https://www.exemplo.com`
                    );
                  }

                  let response = await fetch(site, { method: "HEAD" });

                  if (!response.ok) {
                    return reply(`O site ${site} está offline ou inacessível.`);
                  }

                  reply(`O site ${site} está online e acessível.`);
                } catch (e) {
                  console.error(e);
                  reply("Ocorreu um erro ao verificar o status do site.");
                }
              }
              break;

            case "adorocinema":
              {
                try {
                  let filme = args.join(" ");

                  if (!filme) {
                    return reply(
                      `Por favor, forneça o nome de um filme para buscar no AdoroCinema.\nExemplo: ${prefix}adorocinema Nome do Filme`
                    );
                  }

                  let url = `https://www.adorocinema.com/pesquisar/?q=${encodeURIComponent(
                    filme
                  )}`;
                  let response = await fetch(url, {
                    headers: {
                      "User-Agent":
                        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                      "Accept-Language": "en-US,en;q=0.9,pt-BR;q=0.8,pt;q=0.7",
                    },
                  });

                  if (!response.ok) {
                    return reply(
                      "Não foi possível acessar o AdoroCinema para buscar o filme."
                    );
                  }

                  let html = await response.text();
                  let $ = cheerio.load(html);
                  let title = $(".meta-title-link").first().text().trim();
                  let rating = $(".rating-item-content .stareval-note")
                    .first()
                    .text()
                    .trim();
                  let synopsis = $(".synopsis").first().text().trim();

                  if (!title || !rating || !synopsis) {
                    return reply("Filme não encontrado no AdoroCinema.");
                  }

                  reply(
                    `*Título:* ${title}\n*Nota do Público:* ${rating}\n*Sinopse:* ${synopsis}`
                  );
                } catch (e) {
                  console.error(e);
                  reply(
                    "Ocorreu um erro ao buscar informações do filme no AdoroCinema."
                  );
                }
              }
              break;

            case "raca":
              {
                //REI: ryuu Q FEZ
                try {
                  const query = args.join("-"); //REI: ryuu Q FEZ

                  if (!query) {
                    reply(
                      "Por favor, forneça o nome da raça. Exemplo: raca bulldog"
                    );
                    return;
                  }

                  const url = `https://www.portaldodog.com.br/indice-de-racas/${encodeURIComponent(
                    query
                  )}/`;

                  axios
                    .get(url) //REI: ryuu Q FEZ
                    .then((response) => {
                      const html = response.data;
                      const $ = cheerio.load(html);
                      const nomeRaca =
                        $('script[type="application/ld+json"]')
                          .get()
                          .map((el) => {
                            const json = JSON.parse($(el).html());
                            if (json["@type"] === "BreadcrumbList") {
                              const item = json.itemListElement.find(
                                (i) => i.position === 3
                              );
                              return item ? item.name : "";
                            } //REI: ryuu Q FEZ
                            return "";
                          })
                          .filter((name) => name)
                          .shift() || "";

                      const descricao = $('meta[name="description"]')
                        .attr("content")
                        .trim();
                      const expectativaVida = $(
                        'div.item:contains("Expectativa de vida") .values .min'
                      )
                        .text()
                        .trim();
                      const alturaMin = $(
                        'div.item:contains("Altura") .values .min'
                      )
                        .text()
                        .trim();
                      const alturaMax = $(
                        'div.item:contains("Altura") .values .max'
                      )
                        .text()
                        .trim();
                      const pesoMin = $(
                        'div.item:contains("Peso") .values .min'
                      )
                        .text()
                        .trim();
                      const pesoMax = $(
                        'div.item:contains("Peso") .values .max'
                      )
                        .text()
                        .trim();
                      const precoMin = $(
                        'div.item:contains("Preço de Venda") .values .min'
                      )
                        .text()
                        .trim();
                      const precoMax = $(
                        'div.item:contains("Preço de Venda") .values .max'
                      )
                        .text()
                        .trim(); //REI: ryuu Q FEZ

                      const racaInfo = {
                        nomeRaca,
                        descricao,
                        expectativaVida,
                        altura:
                          alturaMin && alturaMax
                            ? `${alturaMin} - ${alturaMax}`
                            : "",
                        peso:
                          pesoMin && pesoMax ? `${pesoMin} - ${pesoMax}` : "",
                        precoVenda:
                          precoMin && precoMax
                            ? `${precoMin} - ${precoMax}`
                            : "",
                      };

                      let mensagem = `🐶 *${query.replace(/-/g, " ")}* 🐾\n\n`; //REI: ryuu Q FEZ
                      mensagem += `*Descrição:* ${descricao}\n`;
                      if (expectativaVida)
                        mensagem += `*Expectativa de Vida:* ${expectativaVida}\n`;
                      if (racaInfo.altura)
                        mensagem += `*Altura:* ${racaInfo.altura}\n`;
                      if (racaInfo.peso)
                        mensagem += `*Peso:* ${racaInfo.peso}\n`;
                      if (racaInfo.precoVenda)
                        mensagem += `*Preço de Venda:* ${racaInfo.precoVenda}\n`;

                      reply(
                        `${mensagem}\n\nfonte: https://www.portaldodog.com.br/`
                      );
                    })
                    .catch((error) => {
                      console.error(
                        "Erro ao obter informações da raça:",
                        error
                      );
                      reply(
                        "Houve um erro ao buscar as informações sobre a raça. Tente novamente mais tarde.\n\nfonte: https://www.portaldodog.com.br/"
                      );
                    });
                } catch (error) {
                  console.error("Erro ao executar comando raca:", error);
                  reply(
                    "Houve um erro ao executar o comando. Por favor, tente novamente mais tarde."
                  );
                }
              }
              break; //REI: ryuu Q FEZ

            case "pensador": {
              if (!q)
                return reply("❌ Você precisa fornecer um termo de busca.");

              const searchQuery = q.split(" ").join("-");
              const searchUrl = `https://www.pensador.com/${searchQuery}/`;

              reply("🔍 Buscando citações no Pensador...");

              async function fetchPensadorResults(url) {
                try {
                  const { data } = await axios.get(url);
                  const $ = cheerio.load(data);

                  let results = [];
                  $(".thought-card").each((index, element) => {
                    const quote = $(element).find(".frase").text().trim();
                    const author = $(element)
                      .find(".author-name")
                      .text()
                      .trim();

                    if (quote && author) {
                      results.push({ quote, author });
                    }
                  });

                  return results.slice(0, 3);
                } catch (error) {
                  throw error;
                }
              }

              try {
                const results = await fetchPensadorResults(searchUrl);

                if (results.length > 0) {
                  let message = "📝 *Citações do Pensador:*\n\n";
                  results.forEach((result, index) => {
                    message += `*${index + 1}.* "${result.quote}"\n  — _${
                      result.author
                    }_\n\n`;
                  });

                  reply(message);
                } else {
                  reply("⚠️ Nenhuma citação encontrada.");
                }
              } catch (error) {
                console.log(error);
                reply("❌ Ocorreu um erro ao buscar citações no Pensador.");
              }
              break;
            }

            case "amazon": {
              //ryuu
              if (!q)
                return reply("❌ Você precisa fornecer um termo de busca.");

              const searchQuery = q.split(" ").join("&");
              const searchUrl = `https://www.amazon.com.br/s?k=${searchQuery}&crid=2Y0PNPKJ4UZ0&sprefix=${searchQuery}%2Caps%2C352&ref=nb_sb_noss_2`;

              reply("🔍 Buscando resultados na Amazon...");
              //ryuu
              async function fetchAmazonResults(url, retries = 3) {
                try {
                  const { data } = await axios.get(url);
                  const $ = cheerio.load(data);

                  let results = [];
                  $(".s-result-item").each((index, element) => {
                    const title = $(element).find("h2 a span").text().trim();
                    const link = $(element).find("h2 a").attr("href");
                    const priceWhole = $(element)
                      .find(".a-price-whole")
                      .text()
                      .trim();
                    const priceFraction = $(element)
                      .find(".a-price-fraction")
                      .text()
                      .trim();
                    const price = priceWhole
                      ? `R$ ${priceWhole},${priceFraction}`
                      : "Preço não disponível";

                    if (title && link) {
                      results.push({
                        title,
                        link: `https://www.amazon.com.br${link}`,
                        price,
                      });
                    }
                  });

                  return results.slice(0, 10);
                } catch (error) {
                  if (
                    retries > 0 &&
                    error.response &&
                    error.response.status === 503
                  ) {
                    console.log("Tentando novamente devido a erro 503...");
                    await new Promise((resolve) => setTimeout(resolve, 2000));
                    return fetchAmazonResults(url, retries - 1);
                  } else {
                    throw error;
                  }
                }
              }

              try {
                const results = await fetchAmazonResults(searchUrl);

                if (results.length > 0) {
                  let message = "🛒 *Resultados da Amazon:*\n\n";
                  results.forEach((result, index) => {
                    message += `*${index + 1}. ${result.title}*\n💲 *Preço:* ${
                      result.price
                    }\n🔗 *Link:* ${result.link}\n\n`;
                  });
                  //ryuu
                  reply(message);
                } else {
                  reply("⚠️ Nenhum resultado encontrado.");
                }
              } catch (error) {
                console.log(error);
                reply("❌ Ocorreu um erro ao buscar resultados na Amazon.");
              }
              break; //ryuu i frankyxfeitapor ryuuzinho
            }

            case "print": {
              //ryuu
              if (!q)
                return ryuu("Por favor, forneça a URL que deseja capturar.");

              try {
                const base = "https://www.screenshotmachine.com";
                const param = {
                  url: q,
                  device: "desktop",
                  cacheLimit: 0,
                };

                axios({
                  //ryuu
                  url: base + "/capture.php",
                  method: "POST",
                  data: new URLSearchParams(Object.entries(param)),
                  headers: {
                    "content-type":
                      "application/x-www-form-urlencoded; charset=UTF-8",
                  },
                })
                  .then((response) => {
                    const cookies = response.headers["set-cookie"];
                    if (response.data.status == "success") {
                      const screenshotUrl = base + "/" + response.data.link;
                      axios
                        .get(screenshotUrl, {
                          headers: {
                            cookie: cookies.join(""),
                          },
                          responseType: "arraybuffer",
                        })
                        .then(({ data }) => {
                          const buffer = Buffer.from(data, "binary");
                          miwa.sendMessage(
                            from,
                            {
                              image: buffer,
                              caption: `📸 *Captura de Tela da URL:* ${q}`,
                            },
                            { quoted: info }
                          );
                        })
                        .catch((error) => {
                          console.error(error);
                          reply(
                            "Erro ao obter a captura de tela. Tente novamente mais tarde."
                          );
                        });
                    } else {
                      reply(
                        "Erro ao capturar a tela. Verifique a URL e tente novamente."
                      );
                    }
                  })
                  .catch((error) => {
                    console.error(error);
                    reply(
                      "Erro ao solicitar a captura de tela. Tente novamente mais tarde."
                    );
                  });
              } catch (e) {
                console.error(e);
                reply("Ocorreu um erro ao processar sua solicitação.");
              }
              break; //ryuu
              //scraper base: tokyo
            }

            case "anime": {
              //ryuu e tokyo
              if (!q)
                return ryuu(
                  "Por favor, forneça o nome do anime que deseja pesquisar."
                );

              try {
                const searchQuery = encodeURIComponent(q);
                const searchUrl = `https://www.intoxianime.com/?s=${searchQuery}`;
                axios
                  .get(searchUrl)
                  .then((response) => {
                    const html = response.data;
                    const $ = cheerio.load(html);
                    const firstResultTitle = $("h2.post-title.entry-title")
                      .first()
                      .text()
                      .trim();
                    const firstResultThumbnail = $(".post-thumbnail img")
                      .first()
                      .attr("src");
                    const firstResultSummary = $(".entry.excerpt.entry-summary")
                      .first()
                      .text()
                      .trim();

                    if (
                      !firstResultTitle ||
                      !firstResultThumbnail ||
                      !firstResultSummary
                    ) {
                      return reply(
                        "Nenhum resultado encontrado para a pesquisa."
                      );
                    }
                    miwa.sendMessage(from, {
                      image: { url: firstResultThumbnail },
                      caption: `🌟 *Resultado da Pesquisa* 🌟\n\n🎬 *Título:* ${firstResultTitle}\n\n📖 *Resumo:* ${firstResultSummary}`,
                      quoted: info,
                    });
                  })
                  .catch((error) => {
                    console.error(error);
                    reply(
                      "Erro ao realizar a pesquisa. Tente novamente mais tarde."
                    );
                  });
              } catch (e) {
                console.error(e);
                reply("Ocorreu um erro ao processar sua solicitação.");
              }
              break; //ryuu e tokyo
            }

            case "npm": {
              //ryuu x franky
              if (!q)
                return reply(
                  "Por favor, forneça o termo de pesquisa para npm."
                );

              try {
                const searchQuery = encodeURIComponent(q.trim());
                const searchUrl = `https://registry.npmjs.org/-/v1/search?text=${searchQuery}&size=5`;

                axios
                  .get(searchUrl)
                  .then((response) => {
                    const packages = response.data.objects;

                    if (!packages || packages.length === 0) {
                      return reply(
                        `Nenhum resultado encontrado para "${q}" na pesquisa do npm.`
                      );
                    }
                    //ryuu x franky
                    let results = packages.map((pkg) => ({
                      name: pkg.package.name,
                      description:
                        pkg.package.description || "Descrição não disponível",
                      author: pkg.package.author
                        ? pkg.package.author.name
                        : "Autor desconhecido",
                      version: pkg.package.version,
                      link: `https://www.npmjs.com/package/${pkg.package.name}`,
                    }));

                    let message = `🔍 Resultados da pesquisa npm para "${q}":\n\n`;
                    results.forEach((result) => {
                      message += `📦 *Nome:* ${result.name}\n`;
                      message += `📄 *Descrição:* ${result.description}\n`;
                      message += `👤 *Autor:* ${result.author}\n`;
                      message += `🔖 *Versão:* ${result.version}\n`;
                      message += `🔗 *Link:* ${result.link}\n\n`;
                    });

                    ryuu(message);
                  })
                  .catch((error) => {
                    console.error(error);
                    reply(
                      "Erro ao realizar a pesquisa no npm. Por favor, tente novamente mais tarde."
                    );
                  });
              } catch (error) {
                console.error(error);
                reply("Ocorreu um erro ao processar sua solicitação para npm.");
              }
              break; //ryuu npm
            }

            case "wikimedia":
              if (!q) {
                return reply(
                  "Você precisa fornecer um título de pesquisa para encontrar imagens."
                );
              }
              axios
                .get(
                  `https://commons.wikimedia.org/w/index.php?search=${encodeURIComponent(
                    q
                  )}&title=Special:MediaSearch&go=Go&type=image`
                )
                .then(async (res) => {
                  let $ = cheerio.load(res.data);
                  let hasil = [];
                  $(".sdms-search-results__list-wrapper > div > a").each(
                    function (a, b) {
                      hasil.push({
                        titulo: $(b).find("img").attr("alt"),
                        source: $(b).attr("href"),
                        imagem:
                          $(b).find("img").attr("data-src") ||
                          $(b).find("img").attr("src"),
                      });
                    }
                  );

                  // Aleatorizar os resultados
                  hasil.sort(() => Math.random() - 0.5);

                  // Limitar para as primeiras 5 imagens
                  let limitedResult = hasil.slice(0, 5);

                  for (let image of limitedResult) {
                    await miwa.sendMessage(from, {
                      image: { url: image.imagem },
                      caption: `Imagem de "${q}" no Wikimedia Commons\nTítulo: ${image.titulo}\nFonte: ${image.source}`,
                      mentions: [sender],
                    });
                  }
                })
                .catch((error) => {
                  console.error("Erro ao buscar imagens:", error);
                  reply(
                    "Ocorreu um erro ao buscar imagens. Por favor, tente novamente mais tarde."
                  );
                });
              break;

            case "rooh":
              if (!q)
                return reply(
                  `🤖 *Atenção:* Por favor, informe sua pergunta para que o Gemini possa ajudar, você também pode mencionar uma imagem com o comando e fazer uma pergunta ao gemini sobre a imagem.\n\n*• Exemplo:* ${
                    prefix + command
                  } Olá tudo bem?\n\n*• Sobre:* Este comando utiliza o modelo Gemini 1.5 Flash.`
                );
              try {
                const emojis = [
                  "😺",
                  "😸",
                  "😽",
                  "😼",
                  "😈",
                  "🤔",
                  "🙀",
                  "😻",
                  "😾",
                  "🐱",
                  "💫",
                  "✅",
                ];
                const randomIndex = Math.floor(Math.random() * emojis.length);
                const randomEmoji = emojis[randomIndex];
                reagir(from, randomEmoji);

                const { GoogleGenerativeAI } = require("@google/generative-ai");
                const genAI = new GoogleGenerativeAI(
                  "AIzaSyAA9rJnbWVd0MRzhAiK7GTSxPrl4-cuA0E"
                );
                const modelText = genAI.getGenerativeModel({
                  model: "gemini-1.5-flash",
                });
                const modelImage = genAI.getGenerativeModel({
                  model: "gemini-1.5-flash-vision",
                });

                let imageData;
                let textResponse;
                const prompt = q;

                if (isQuotedImage || isMedia) {
                  let post;
                  if (isQuotedImage) {
                    post = isQuotedImage
                      ? JSON.parse(JSON.stringify(info).replace("quotedM", "m"))
                          .message.extendedTextMessage.contextInfo.message
                          .imageMessage
                      : info.message.imageMessage;
                  } else if (isMedia) {
                    post = info.message.imageMessage;
                  }

                  const imagem = await downloadContentFromMessage(
                    post,
                    "image"
                  );
                  if (!imagem || imagem.length === 0) {
                    return reply(
                      "🤖 _Erro ao processar a imagem. Por favor, tente novamente._"
                    );
                  }
                  let base64 = Buffer.from([]);
                  for await (const send of imagem) {
                    base64 = Buffer.concat([base64, send]);
                  }
                  imageData = {
                    inlineData: {
                      data: base64.toString("base64"),
                      mimeType: "image/png",
                    },
                  };
                  const imageName = `gemini_${Date.now()}.png`;
                  fs.writeFileSync(`./ryuu/${imageName}`, base64);
                  fs.unlinkSync(`./ryuu/${imageName}`);
                  const result = await modelImage.generateContent([
                    `verifique o que tem nessa foto e me responda, ${prompt}`,
                    imageData,
                  ]);
                  textResponse = result.response.text();
                  reply(textResponse);
                } else {
                  const { response } = await modelText.generateContent(
                    `${encodeURIComponent(q)}`
                  );
                  textResponse = response.text();
                  reply(textResponse);
                }
              } catch (e) {
                console.error(e);
                return reply(`ops teve 1 erro`);
              }
              break;

            case "dicionario": {
              if (!q) {
                reply("Por favor, forneça uma palavra para buscar.");
              } else {
                const url = `https://www.dicio.com.br/${encodeURIComponent(
                  q
                )}/`;

                axios
                  .get(url)
                  .then((response) => {
                    const html = response.data;
                    const $ = cheerio.load(html);

                    // Verifica se a palavra foi encontrada
                    const notFound = $(".not-found-title").text().trim();
                    if (notFound === "Palavra não encontrada") {
                      reply("Palavra não encontrada no dicionário.");
                      return;
                    }

                    // Extrai o significado da palavra
                    const significado = $(".significado").text().trim();
                    if (significado) {
                      reply(`Significado de *${q}*\n\n${significado}`);
                    } else {
                      reply(
                        "Não foi possível encontrar o significado da palavra."
                      );
                    }
                  })
                  .catch((error) => {
                    console.error(error);
                    reply("Ocorreu um erro ao buscar no dicionário.");
                  });
              }
              break;
            }

            case "playstore": {
              if (!q) {
                reply(
                  "🔍 Por favor, forneça um termo de pesquisa. Exemplo: !playstore Free fire"
                );
              } else {
                reply("🔎 Procurando na Play Store...");

                axios
                  .get(
                    `https://play.google.com/store/search?q=${encodeURIComponent(
                      q
                    )}&c=apps&hl=pt_BR`
                  )
                  .then((response) => {
                    const html = response.data;
                    const $ = cheerio.load(html);
                    const dados = [];

                    $(".VfPpkd-aGsRMb").each((i, e) => {
                      dados.push({
                        nome: $(e).find(".DdYX5:first").text().trim(),
                        desenvolvedor: $(e).find(".wMUdtb:first").text().trim(),
                        estrelas: $(e).find(".w2kbF:first").text().trim(),
                        link:
                          "https://play.google.com" +
                          $(e).find("a:first").attr("href"),
                      });
                    });

                    if (dados.length > 0) {
                      let message =
                        "📱 Aqui estão os resultados para sua pesquisa:\n";
                      dados.forEach((app, index) => {
                        message += `\n${index + 1}. 🌟 **${
                          app.nome
                        }**\n🔗 [Link](${app.link})\n👨‍💻 Desenvolvedor: ${
                          app.desenvolvedor
                        }\n⭐ Estrelas: ${app.estrelas}\n`;
                      });
                      reply(message);
                    } else {
                      reply("❌ Não encontrei resultados para sua pesquisa.");
                    }
                  })
                  .catch((error) => {
                    console.error(error);
                    reply("⚠️ Ocorreu um erro ao buscar na Play Store.");
                  });
              }
              break;
            }

            case "cinema": {
              reply("🎬 Aguarde enquanto busco os novos filmes... 🍿");

              const url =
                "https://www.adorocinema.com/filmes/em-cartaz/estreias/";

              axios
                .get(url)
                .then((response) => {
                  const data = response.data;
                  const $ = cheerio.load(data);

                  let movies = [];

                  $(".entity-card").each((index, element) => {
                    const title = $(element)
                      .find(".meta-title-link")
                      .text()
                      .trim();
                    const releaseDate = $(element)
                      .find(".meta-body-info .date")
                      .text()
                      .trim();
                    const genre = $(element)
                      .find(".meta-body-info .dark-grey-link")
                      .text()
                      .trim();
                    const rating =
                      $(element)
                        .find(".rating-star .tooltip-child")
                        .first()
                        .text()
                        .trim() || "N/A";
                    const synopsis = $(element)
                      .find(".synopsis .content-txt")
                      .text()
                      .trim();
                    const directors = $(element)
                      .find(".meta-body-direction .dark-grey-link")
                      .map((i, el) => $(el).text().trim())
                      .get()
                      .join(", ");
                    const cast = $(element)
                      .find(".meta-body-actor .dark-grey-link")
                      .map((i, el) => $(el).text().trim())
                      .get()
                      .join(", ");

                    if (title && releaseDate) {
                      movies.push({
                        title,
                        releaseDate,
                        genre,
                        rating,
                        synopsis,
                        directors,
                        cast,
                      });
                    }
                  });

                  if (movies.length > 0) {
                    let movieDetails = "🎬 **Novos Filmes em Cartaz** 🎬\n\n";
                    movies.forEach((movie, index) => {
                      movieDetails += `🍿 **${index + 1}. Título:** ${
                        movie.title
                      }\n`;
                      movieDetails += `📅 **Data de Lançamento:** ${movie.releaseDate}\n`;
                      movieDetails += `🎭 **Gênero:** ${movie.genre}\n`;
                      movieDetails += `⭐ **Avaliação:** ${movie.rating}\n`;
                      movieDetails += `📝 **Sinopse:** ${movie.synopsis}\n`;
                      movieDetails += `🎬 **Direção:** ${movie.directors}\n`;
                      movieDetails += `🎭 **Elenco:** ${movie.cast}\n\n`;
                    });

                    enviar(movieDetails);
                  } else {
                    reply("❌ Não foram encontrados novos filmes.");
                  }
                })
                .catch((error) => {
                  console.error("Erro ao buscar os novos filmes:", error);
                  reply(
                    "❌ Desculpe, ocorreu um erro ao buscar os novos filmes."
                  );
                });

              break;
            }

            case "movie":
              if (!q)
                return reply("Assim: " + prefix + command + " nome do filme");
              reagir(from, "🎬");
              if (!q.includes(`m.imdb.com`)) {
                try {
                  matheuzinho = await fetchJson(
                    `https://miwa-apis.online/api/search/imdb?query=${encodeURI(
                      q
                    )}&apikey=` + API_KEY_MIWA
                  );
                  linkM4 = matheuzinho.resultado[0].url;
                } catch {
                  return reply("Não foi possível encontrar o filme pedido");
                }
              } else {
                linkM4 = q;
              }
              try {
                ABC = await fetchJson(
                  `https://miwa-apis.online/api/search/imdb_info?url=${linkM4}&apikey=` +
                    API_KEY_MIWA
                );
                i = ABC.resultado;
                lançamento = i.dataLancamento;
                notas = i.nota;
                money = i.dinheiro.orcamento;
                escrito = `${money.valor}`;
                nmr = escrito.length;
                dindin =
                  nmr > 9
                    ? escrito.slice(0, nmr - 9) + "B"
                    : nmr > 6
                    ? escrito.slice(0, nmr - 6) + "M"
                    : nmr > 3
                    ? escrito.slice(0, nmr - 3) + "K"
                    : escrito;
                txt = `❪🎬ฺ࣭࣪͘ꕸ▸ 𝙽𝚘𝚖𝚎: ${i.titulo}
❪🧾ฺ࣭࣪͘ꕸ▸ 𝙽𝚘𝚖𝚎 𝙾𝚏𝚒𝚌𝚒𝚊𝚕: ${i.tituloOriginal}
❪💢ฺ࣭࣪͘ꕸ▸ 𝚃𝚒𝚙𝚘: ${i.tipo}
❪🎥ฺ࣭࣪͘ꕸ▸ 𝙶ê𝚗𝚎𝚛𝚘: ${i.genero.map((g) => g).join(", ")}
❪⏱️ฺ࣭࣪͘ꕸ▸ 𝙳𝚞𝚛𝚊çã𝚘: ${i.duracao}
❪📟ฺ࣭࣪͘ꕸ▸ 𝙻𝚊𝚗ç𝚊𝚖𝚎𝚗𝚝𝚘: ${
                  Number(lançamento.dia) < 10
                    ? `0${lançamento.dia}`
                    : lançamento.dia
                }/${
                  Number(lançamento.mes) < 10
                    ? `0${lançamento.mes}`
                    : lançamento.mes
                }/${lançamento.ano}
❪📊ฺ࣭࣪͘ꕸ▸ 𝙰𝚟𝚊𝚕𝚒𝚊çã𝚘: ${notas.ponto}/10 (${notas.total} votos)
❪💱ฺ࣭࣪͘ꕸ▸ 𝙾𝚛ç𝚊𝚖𝚎𝚗𝚝𝚘: ${money.moeda} ${dindin}
❪⚒️ฺ࣭࣪͘ꕸ▸ 𝙿𝚛𝚘𝚍𝚞çã𝚘: ${i.producao.map((p) => p).join(", ")}
❪👤ฺ࣭࣪͘ꕸ▸ 𝙳𝚒𝚛𝚎çã𝚘: ${i.diretores[0].direcao.map((d) => d).join(", ")}

〘 𝙀𝙇𝙀𝙉𝘾𝙊 〙`;
                for (e of i.elencoPrincipal) {
                  txt += `\n⇒ *${e.nome}* (${e.categoria} - ${e.personagem
                    .map((a) => a)
                    .join(", ")})`;
                }
                txt += `\n\n▧⃯⃟𝙎𝙄𝙉𝙊𝙋𝙎𝙀৴▸ ${i.trama}`;
                miwa.sendMessage(
                  from,
                  {
                    text: txt,
                    contextInfo: {
                      externalAdReply: {
                        title: `𝙈𝙊𝙑𝙄𝙀 𝙄𝙉𝙁𝙊 𝘽𝙔 𝙈𝙄𝙒𝘼`,
                        body: ``,
                        thumbnail: await getBuffer(i.capa),
                        mediaType: 1,
                        showAdAttribution: true,
                        sourceUrl: linkM4,
                      },
                    },
                  },
                  { quoted: info }
                );
              } catch (err) {
                console.log(err);
                reply(
                  "Não foi possível encontrar os dados desse filme, ou pode ser que a api de pesquisas caiu..."
                );
              }
              break;

            case "movie2":
              if (args.length == 0)
                return await reply(
                  `Cadê o nome do filme o qual você deseja ver informações?`
                );
              movieInfo = await axios.get(
                `https://api.themoviedb.org/3/search/movie?api_key=ddfcb99fae93e4723232e4de755d2423&query=${encodeURIComponent(
                  q
                )}&language=pt`
              );
              if (movieInfo.data.total_results == 0)
                return reply(
                  `Desculpe, não consegui encontrar o que você procurava utilizando essa forma, pode tentar de outra maneira?`
                );
              var ImageMovieLink = `https://image.tmdb.org/t/p/original${movieInfo.data.results[0].backdrop_path}`;
              var fotoFilme = await getBuffer(ImageMovieLink);
              miwa
                .sendMessage(from, {
                  image: fotoFilme,
                  caption: `*Nome do Filme:* ${
                    movieInfo.data.results[0].title
                  }\n*Nome original:* ${
                    movieInfo.data.results[0].original_title
                  }\n*Data de Lançamento:* ${
                    movieInfo.data.results[0].release_date
                  }\n*Avaliações:* ${
                    movieInfo.data.results[0].vote_average
                  } - (${
                    movieInfo.data.results[0].vote_count
                  } Votos)\n*Popularidade:* ${movieInfo.data.results[0].popularity.toFixed(
                    1
                  )}%\n*Classificação adulta?* ${
                    movieInfo.data.results[0].adult ? "Sim." : "Não."
                  }\n*Linguagem oficial:* ${
                    movieInfo.data.results[0].original_language
                  }\n\n*Sinopse:* ${movieInfo.data.results[0].overview}`,
                })
                .catch((e) => {
                  return reply(
                    `Desculpe, ocorreu um erro. Por favor, tente novamente mais tarde.`
                  );
                });
              break;

            case "serie":
              if (args.length == 0)
                return await reply(
                  `Cadê o nome da serie o qual você deseja ver informações?`
                );
              serieInfo = await axios.get(
                `https://api.themoviedb.org/3/search/tv?api_key=ddfcb99fae93e4723232e4de755d2423&query=${encodeURIComponent(
                  q
                )}&language=pt`
              );
              if (serieInfo.data.total_results == 0)
                return reply(
                  `Desculpe, não consegui encontrar o que você procurava utilizando essa forma, pode tentar de outra maneira?`
                );
              var ImageSerieLink = `https://image.tmdb.org/t/p/original${serieInfo.data.results[0].backdrop_path}`;
              var fotoSerie = await getBuffer(ImageSerieLink);
              miwa
                .sendMessage(from, {
                  image: fotoSerie,
                  caption: `*Nome da Série:* ${
                    serieInfo.data.results[0].name
                  }\n*Nome original:* ${
                    serieInfo.data.results[0].original_name
                  }\n*Data de Lançamento:* ${
                    serieInfo.data.results[0].first_air_date
                  }\n*Avaliações:* ${
                    serieInfo.data.results[0].vote_average
                  } - (${
                    serieInfo.data.results[0].vote_count
                  } Votos)\n*Popularidade:* ${serieInfo.data.results[0].popularity.toFixed(
                    1
                  )}%\n*Classificação adulta?* ${
                    serieInfo.data.results[0].adult ? "Sim." : "Não."
                  }\n*Linguagem oficial:* ${
                    serieInfo.data.results[0].original_language
                  }\n\n*Sinopse:* ${serieInfo.data.results[0].overview}`,
                })
                .catch((e) => {
                  return reply(
                    `Desculpe, ocorreu um erro. Por favor, tente novamente mais tarde.`
                  );
                });
              break;

            
            case "presente": {
              if (!isModobn)
                return reply(`modo brincadeira tá off, pede pro adm`);
              if (!isGroup)
                return reply(`Este comando só pode ser usado em grupos.`);
              if (!menc_os2 && !menc_jid2[1])
                return reply("Marque alguém para enviar um presente 🎁");
              setTimeout(() => {
                reagir(from, "🎁");
              }, 300);
              const mencutionesPresente = menc_os2.split("@")[0];
              const cioabPresente = sender.split("@")[0];
              const presenteMsg = `╔━━きৡৢ͜͡𝔬⃝Akiyama-ＢᎾ⃟Τ━━╗
┃🎁 Olá @${mencutionesPresente},
┃@${cioabPresente} está te enviando um presente!!
┃Espero que você goste! 🎉
╚━━━━━━━━🎁━━━━━━━━╝`;
              const presenteImageUrls = [
                "https://telegra.ph/file/27b14c2fad7bad67814d5.jpg",
                "https://telegra.ph/file/7d6478b7f65e491bd46a7.jpg",
                "https://telegra.ph/file/297458ec9d74894712275.jpg",
                "https://telegra.ph/file/004c5894cc40a4eda1892.jpg",
                "https://telegra.ph/file/f0c799a7b275f14ad70ff.jpg",
                "https://telegra.ph/file/fbe6572f06cb79de60021.jpg",
                "https://telegra.ph/file/b627a5293aaab8e14960c.jpg",
                "https://telegra.ph/file/0ac0a33dd76edeec0060c.jpg",
                "https://telegra.ph/file/af5cb0b971f3bbc7018b8.jpg",
                "https://telegra.ph/file/d27a7949f1071fe65e659.jpg",
                "https://telegra.ph/file/0d8d92d6cc7bb3c5d7f63.jpg",
                "https://telegra.ph/file/087262125d63151c6df54.jpg",
                "https://telegra.ph/file/b6a215a02aa4b9d1ebb86.jpg",
              ];
              const selectedPresenteImage =
                presenteImageUrls[
                  Math.floor(Math.random() * presenteImageUrls.length)
                ];

              miwa.sendMessage(
                from,
                {
                  text: `@${cioabPresente} está preparando um presente para @${mencutionesPresente}... 🎁`,
                  mentions: [menc_os2, sender],
                },
                { quoted: info }
              );
              setTimeout(() => {
                miwa.sendMessage(
                  from,
                  {
                    image: { url: selectedPresenteImage },
                    caption: presenteMsg,
                    mentions: [menc_os2, sender],
                  },
                  { quoted: info }
                );
              }, 3000);
              break;
            }

            case "youtube": {
              if (!q)
                return reply(
                  "❗ Por favor, forneça a URL do vídeo do YouTube."
                ); //canal youtube feito por ryuu
              try {
                const videoUrl = q.trim();
                reply("🔍 Aguarde, estou obtendo as informações do vídeo...");
                const { data } = await axios.get(videoUrl); //canal youtube feito por ryuu
                const $ = cheerio.load(data);
                const titulo =
                  $('meta[name="title"]').attr("content") ||
                  "Título não encontrado";
                const descricao =
                  $('meta[name="description"]').attr("content") ||
                  "Descrição não encontrada"; //canal youtube feito por ryuu
                const visualizacoes =
                  $('meta[itemprop="interactionCount"]').attr("content") ||
                  "Visualizações não encontradas";
                const scripts = $("script")
                  .map((i, script) => $(script).html())
                  .get();
                let autor = "Autor não encontrado";
                for (const script of scripts) {
                  const authorMatch = script.match(/"author":"([^"]+)"/);
                  if (authorMatch) {
                    autor = authorMatch[1];
                  }
                }

                ryuu(
                  `🎥 **Informações do Vídeo**\n\n📽️ **Título:** ${titulo}\n👀 **Visualizações:** ${visualizacoes}\n👤 **Autor:** ${autor}\n\n🔗 **Link do Vídeo:** ${q}\n\n📝 **Descrição:** ${descricao}`
                ); //canal youtube feito por ryuu
              } catch (error) {
                console.error(error);
                reply(
                  "❌ Desculpe, houve um erro ao obter as informações do vídeo. Verifique se a URL está correta e tente novamente."
                );
              }
              break; //canal youtube feito por ryuu
            }

            case "horasem": {
              if (!q)
                return reply(
                  `Por favor, forneça o nome de uma cidade ou país. Exemplo: ${prefix}horasem paris`
                ); // ryuu e Miwax

              try {
                const cidadeOuPais = q.replace(/\s+/g, "_"); // ryuu e Miwax
                const url = `https://time.is/pt_br/${cidadeOuPais}`; // ryuu e Miwax

                reply("Aguarde, estou obtendo a hora local..."); // ryuu e Miwax

                const { data } = await axios.get(url); // ryuu e Miwax
                const $ = cheerio.load(data); // ryuu e Miwax
                const horaLocal = $("#clock0_bg").text().trim(); // ryuu e Miwax
                const localInfo = $('div[id="msgdiv"]').text().trim(); // ryuu e Miwax
                const infoSol = $('div[id="qlook"]').text().trim(); // ryuu e Miwax
                const regexSol = /Sol: ↑ (\d{2}:\d{2}) ↓ (\d{2}:\d{2})/; // ryuu e Miwax
                const matchSol = regexSol.exec(infoSol); // ryuu e Miwax
                const nascerDoSol = matchSol ? matchSol[1] : "N/A"; // ryuu e Miwax
                const porDoSol = matchSol ? matchSol[2] : "N/A"; // ryuu e Miwax
                if (!horaLocal) {
                  reply(
                    `Desculpe, não foi possível obter a hora para ${q}. Verifique se o nome da cidade ou país está correto e tente novamente.`
                  ); // ryuu e Miwax
                } else {
                  reply(
                    `🕒 Hora em ${localInfo}\nAgora: ${horaLocal}\nSol: ↑ ${nascerDoSol} ↓ ${porDoSol}`
                  ); // ryuu e Miwax
                }
              } catch (error) {
                console.error(error); // ryuu e Miwax
                reply(
                  "Desculpe, houve um erro ao obter a hora local. Verifique se o nome da cidade ou país está correto e tente novamente."
                ); // ryuu e Miwax
              }
              break; // ryuu e Miwax
            }

            case "g1": {
              reply("Aguarde, estou coletando as notícias do G1...");
              try {
                const response = await axios.get("https://g1.globo.com/");
                const html = response.data;
                const $ = cheerio.load(html);
                let noticias = [];

                $(".feed-post-link").each(function () {
                  const titulo = $(this).text().trim();
                  const link = $(this).attr("href");
                  noticias.push({ titulo, link });
                });

                if (noticias.length > 0) {
                  let resultado = "Últimas notícias do G1:\n\n";
                  noticias.slice(0, 5).forEach((noticia, index) => {
                    resultado += `${index + 1}. ${noticia.titulo}\n${
                      noticia.link
                    }\n\n`;
                  });
                  reply(resultado);
                } else {
                  reply("Não foi possível coletar notícias no momento.");
                }
              } catch (error) {
                reply(`Erro ao coletar notícias: ${error.message}`);
              }
              break;
            }

            case "cnn": {
              reply(
                "📰 Aguarde, estou coletando as últimas notícias da CNN Brasil..."
              );
              try {
                const response = await axios.get(
                  "https://www.cnnbrasil.com.br/"
                );
                const html = response.data;
                const $ = cheerio.load(html);
                let noticias = [];

                $("a").each(function () {
                  const titulo = $(this).text().trim();
                  const link = $(this).attr("href");
                  if (titulo && link && link.startsWith("http")) {
                    noticias.push({ titulo, link });
                  }
                });

                if (noticias.length > 0) {
                  let resultado = "🌐 Últimas notícias da CNN Brasil:\n\n";
                  noticias.slice(0, 5).forEach((noticia, index) => {
                    resultado += `📌 ${index + 1}. ${noticia.titulo}\n➡️ ${
                      noticia.link
                    }\n\n`;
                  });
                  reply(resultado);
                } else {
                  reply("❌ Não foi possível coletar notícias no momento.");
                }
              } catch (error) {
                console.error("Erro ao coletar notícias:", error);
                reply("❌ Houve um erro ao coletar as notícias da CNN Brasil.");
              }
              break;
            }

            case "uol":
              {
                await reply("🔍 Buscando notícias do UOL...");
                try {
                  const response = await axios.get("https://www.uol.com.br/");
                  const html = response.data;
                  const $ = cheerio.load(html);
                  let news = [];
                  $("article").each((index, element) => {
                    const title = $(element).find("h3").text().trim();
                    const url = $(element).find("a").attr("href");
                    if (title && url) {
                      news.push({ title, url });
                    }
                  });

                  if (news.length === 0) {
                    return reply("😞 Não consegui encontrar notícias no UOL.");
                  }
                  let message = "📰 *Últimas notícias do UOL:*\n\n";
                  news.slice(0, 5).forEach((item, index) => {
                    message += `🔹 ${index + 1}. 👽 ${item.title}\n🏗 ${
                      item.url
                    }\n`;
                    message += `\n\n------------------------------------------\n\n`;
                  });
                  reply(message);
                } catch (error) {
                  console.error(error);
                  reply("⚠️ Ocorreu um erro ao buscar notícias do UOL.");
                }
              }
              break;

            case "fsa": {
              if (!q)
                return ryuu(
                  "Por favor, forneça o nome do filme, série ou anime que deseja pesquisar."
                );

              try {
                const searchQuery = q.replace(/ /g, "+");
                const searchUrl = `https://www.adorocinema.com/pesquisar/?q=${searchQuery}`;

                axios
                  .get(searchUrl)
                  .then((response) => {
                    const html = response.data;
                    const $ = cheerio.load(html);
                    const searchResults = [];

                    $("ul li.mdl").each((index, element) => {
                      const $element = $(element);
                      const imagem =
                        $element
                          .find("figure.thumbnail img")
                          .attr("data-src") || "Imagem não encontrada";
                      const nome =
                        $element
                          .find("h2.meta-title span.meta-title-link")
                          .text()
                          .trim() || "Nome não encontrado";
                      const lançamento =
                        $element
                          .find("div.meta-body-item.meta-body-info span.date")
                          .text()
                          .trim() || "Data de lançamento não encontrada";
                      const diretor =
                        $element
                          .find(
                            "div.meta-body-item.meta-body-direction span.dark-grey-link"
                          )
                          .text()
                          .trim() || "Diretor não encontrado";
                      const sinopse =
                        $element.find("div.synopsis").text().trim() ||
                        "Sinopse não encontrada";

                      searchResults.push({
                        imagem,
                        nome,
                        lançamento,
                        diretor,
                        sinopse,
                      });
                    });

                    if (searchResults.length > 0) {
                      const firstResult = searchResults[0];

                      // Enviar a imagem do primeiro resultado
                      miwa.sendMessage(from, {
                        image: { url: firstResult.imagem },
                        caption: `\n📅 Lançamento: ${firstResult.lançamento}\n🎥 Diretor: ${firstResult.diretor}\n\n📖 Sinopse: ${firstResult.sinopse}`,
                        mentions: [sender],
                      });
                    } else {
                      reply("Nenhum resultado encontrado para a pesquisa.");
                    }
                  })
                  .catch((error) => {
                    console.error(error);
                    reply(
                      "Erro ao realizar a pesquisa. Tente novamente mais tarde."
                    );
                  });
              } catch (e) {
                console.error(e);
                reply("Ocorreu um erro ao processar sua solicitação.");
              }
              break;
            }
            //=======(FIM-EFEITOS-MARCAR)=========\\

            default:
              //===(CRÉDITOS : miwa CONTEÚDOS)==\\

              if (isGroup && isBotGroupAdmins && !isGroupAdmins) {
                if (isAntiCtt || Antiloc || isAnticatalogo) {
                  if (
                    type === "contactMessage" ||
                    type === "contactsArrayMessage" ||
                    type === "locationMessage" ||
                    type === "productMessage"
                  ) {
                    if (isGroupAdmins)
                      return miwa.sendMessage(
                        from,
                        {
                          text: `Uma dessas opções estão ativada, mas por você ser ADM, não será removido(a) _(ANTI CONTATO - ANTI CATALOGO - ANTI LOCALIZAÇÃO)_`,
                        },
                        { quoted: info }
                      );
                    if (IS_DELETE) {
                      setTimeout(() => {
                        miwa.sendMessage(from, {
                          delete: {
                            remoteJid: from,
                            fromMe: false,
                            id: info.key.id,
                            participant: sender,
                          },
                        });
                      }, 500);
                    }
                    if (!JSON.stringify(groupMembers).includes(sender)) return;
                    miwa.groupParticipantsUpdate(from, [sender], "remove");
                    clear = `🗑${"\n".repeat(
                      255
                    )}🗑️\n❲❗❳ *Lɪᴍᴘᴇᴢᴀ ᴅᴇ Cʜᴀᴛ Cᴏɴᴄʟᴜɪᴅᴀ* ✅`;
                    miwa.sendMessage(from, {
                      text: clear,
                      contextInfo: { forwardingScore: 500, isForwarded: true },
                    });
                    miwa.sendMessage(from, {
                      text: "reporte aos adm o ocorrido ",
                      mentions: groupAdmins,
                    });
                  }
                }
              }

              if (
                isGroup &&
                isAntiFlood &&
                !SoDono &&
                !isPremium &&
                !isnit &&
                isBotGroupAdmins &&
                !isGroupAdmins &&
                !isBot
              ) {
                if (isLimitec == null) {
                  var limitefl = limitefll.limitefl;
                } else {
                  var limitefl = isLimitec;
                }
                if (budy.length >= limitefl) {
                  setTimeout(() => {
                    return reply(
                      "Muitos caracteres enviados, isto é contra as normas do grupo, por precaução, eu irei remover."
                    );
                    console.log(colors.red("Deram Spam de caracteres.."));
                  }, 100);
                  setTimeout(async () => {
                    if (IS_DELETE) {
                      setTimeout(() => {
                        miwa.sendMessage(from, {
                          delete: {
                            remoteJid: from,
                            fromMe: false,
                            id: info.key.id,
                            participant: sender,
                          },
                        });
                      }, 500);
                    }
                    if (!JSON.stringify(groupMembers).includes(sender)) return;
                    miwa.groupParticipantsUpdate(from, [sender], "remove");
                  }, 1000);
                }
              }

              //INICIO DE COMANDOS SEM PREFIXO
              switch (testat) {
              }

              const EnvAudio_SMP = async (
                direcao,
                nome1,
                nome2,
                nome3,
                nome4,
                nome5
              ) => {
                bla = [nome1, nome2, nome3, nome4, nome5];
                for (i of bla) {
                  if (i == undefined) return;
                  if (messagesC.includes(i)) {
                    miwa.sendMessage(from, {
                      audio: { url: direcao },
                      mimetype: "audio/mpeg",
                      ptt: true,
                    });
                  }
                }
              };

              const EnvAudio2_SMP = async (
                direcao,
                nome1,
                nome2,
                nome3,
                nome4,
                nome5
              ) => {
                bla = [nome1, nome2, nome3, nome4, nome5];
                for (i of bla) {
                  if (i == undefined) return;
                  if (messagesC.includes(i)) {
                    miwa.sendMessage(from, {
                      audio: { url: direcao },
                      mimetype: "audio/mpeg",
                      ptt: true,
                    });
                  }
                }
              };

              const EnvTXT_SMP = async (
                texto,
                nome1,
                nome2,
                nome3,
                nome4,
                nome5
              ) => {
                bla = [nome1, nome2, nome3, nome4, nome5];
                for (i of bla) {
                  if (i == undefined) return;
                  if (messagesC.includes(i)) {
                    miwa.sendMessage(from, { text: texto });
                  }
                }
              };

              const EnvAudio2_GTTS = async (
                lingua,
                texto,
                txt1,
                txt2,
                txt3,
                txt4,
                txt5
              ) => {
                bla = [txt1, txt2, txt3, txt4, txt5];
                for (i of bla) {
                  if (i == undefined) return;
                  if (budy2.includes(i)) {
                    var gtt = require("./arquivos/funcoes/gtts")(lingua);
                    ranm = getRandom(".mp3");
                    rano = getRandom(".ogg");
                    gtt.save(ranm, texto, function () {
                      exec(
                        `ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`,
                        (err) => {
                          DLT_FL(ranm);
                          buffer = fs.readFileSync(rano);
                          miwa.sendMessage(
                            from,
                            { audio: buffer, ptt: true },
                            { quoted: info }
                          );
                          DLT_FL(rano);
                        }
                      );
                    });
                  }
                }
              };

              var hora_sla = moment.tz("America/Sao_Paulo").format("HH:mm:ss");

              EnvAudio2_GTTS(
                "pt",
                `São ${hora_sla} da ${tempo.split(" ")[1]}`,
                "que horas sao?"
              );

              EnvAudio2_GTTS(`boa tarde ${pushname}, o que faz de bom?`, "bo");

              if (isAutorepo) {
                if (budy2 === "bot") {
                  blars = [
                    "Oii delícia😮‍💨",
                    "Oi amor da minha vida💘😻",
                    "Oii princesa do meu coração❤",
                  ];
                  blarnd = blars[Math.floor(Math.random() * blars.length)];
                  reply(blarnd);
                }

                if (budy2.includes("bot corno")) {
                  if (info.key.fromMe) return;
                  reply("Corno é você, seu animal");
                }

                if (budy2.includes("fds")) {
                  if (info.key.fromMe) return;
                  reply(`▄▀▀░ █▀▀▄ ▄▀▄ █▄░█ █▀▄ █▀
█░▀▌ █▐█▀ █▀█ █░▀█ █░█ █▀
▀▀▀░ ▀░▀▀ ▀░▀ ▀░░▀ ▀▀░ ▀▀
█▀ ▄▀▄ █▀▄ ▄▀▄ ░░ ▄▀▀ █▀
█▀ █░█ █░█ █▀█ ▀▀ ░▀▄ █▀
▀░ ░▀░ ▀▀░ ▀░▀ ░░ ▀▀░ ▀▀`);
                }

                if (budy2.includes("Fds")) {
                  if (info.key.fromMe) return;
                  reply(`▄▀▀░ █▀▀▄ ▄▀▄ █▄░█ █▀▄ █▀
█░▀▌ █▐█▀ █▀█ █░▀█ █░█ █▀
▀▀▀░ ▀░▀▀ ▀░▀ ▀░░▀ ▀▀░ ▀▀
█▀ ▄▀▄ █▀▄ ▄▀▄ ░░ ▄▀▀ █▀
█▀ █░█ █░█ █▀█ ▀▀ ░▀▄ █▀
▀░ ░▀░ ▀▀░ ▀░▀ ░░ ▀▀░ ▀▀`);
                }

                if (
                  budy2.includes("adivinha meu celular") ||
                  budy2.includes("bot qual meu celular")
                ) {
                  miwa.sendMessage(from, { text: adivinha }, { quoted: info });
                }

                if (budy2.includes("boa noite")) {
                  tujuh = fs.readFileSync("./database/audios/boanoite.mp3");
                  await miwa.sendMessage(
                    from,
                    { audio: tujuh, mimetype: "audio/mpeg", ptt: true },
                    { quoted: info }
                  );
                }

                if (budy2.includes("boa tarde")) {
                  tujuh = fs.readFileSync("./database/audios/boatarde.mp3");
                  await miwa.sendMessage(
                    from,
                    { audio: tujuh, mimetype: "audio/mpeg", ptt: true },
                    { quoted: info }
                  );
                }

                if (budy2.includes("bom dia")) {
                  tujuh = fs.readFileSync("./database/audios/bomdia.mp3");
                  await miwa.sendMessage(
                    from,
                    { audio: tujuh, mimetype: "audio/mpeg", ptt: true },
                    { quoted: info }
                  );
                }

                EnvAudio2_SMP("./database/audios/corno.mp3", "corno");
              }
              if (budy.includes(`@+55 45 98803-7606`)) {
                cuzin = [
                  "Ainnn Ets de Vaginas",
                  "jaja ele te responde, equanto isso vai um café ? ☕️",
                  "o que vc quer com meu dono ? 🤨",
                ];
                cu = cuzin[Math.floor(Math.random() * cuzin.length)];
                reply(cu);
                reply("pare!, ou terei que por um basta nisso!!!");
                miwa.sendMessage(
                  from,
                  { sticker: fs.readFileSync(`./database/usuarios/aiai.webp`) },
                  { quoted: info }
                );
                miwa.sendMsg = await miwa.sendMessage(from, {
                  react: { text: `🔥`, key: info.key },
                });
              }

              if (messagesC.includes("exec")) {
                if (!SoDono && !isnit && !issupre && !ischyt) return;
                try {
                  paramsQuoted =
                    info.message.extendedTextMessage.contextInfo.quotedMessage
                      .conversation ||
                    info.message.extendedTextMessage.contextInfo.quotedMessage
                      .extendedTextMessage.text;
                  return eval(`${paramsQuoted}`);
                  console.log(`[EXEC]~> ${paramsQuoted}`);
                } catch (e) {
                  reply(e);
                }
              }

              //==============(ANTILINK)===============\\

              switch (ants) {
              }

              //=========[--ANTI PALAVRÃO --]==========\\
              if (isGroup && isPalavrao && isBotGroupAdmins) {
                if (dataGp[0].antipalavrao.palavras.indexOf(PR_String) >= 0) {
                  if (!isGroupAdmins) {
                    miwa.sendMessage(
                      from,
                      { text: `Sem palavrão aqui!😠` },
                      { quoted: info }
                    );
                    setTimeout(() => {
                      if (!JSON.stringify(groupMembers).includes(sender))
                        return;
                      miwa.groupParticipantsUpdate(from, [sender], "remove");
                    }, 2000);
                    setTimeout(() => {
                      miwa
                        .sendMessage(
                          from,
                          {
                            text: `*「 - REMOVIDO POR UTILIZAR UMA PALAVRA PROIBIDA - 」*\nVocê será banido do grupo, na proxima veja as regras ao digitar qualquer palavra..!!`,
                          },
                          { quoted: info }
                        )
                        .catch((e) => {
                          miwa.sendMessage(
                            from,
                            {
                              text: `Infelizmente, não sou um administrador, entt não posso te banir!!`,
                            },
                            { quoted: info }
                          );
                        });
                    }, 200);
                  } else {
                    return reply(`Você tem permissão: ${pushname} 😇`);
                  }
                }
              }

              //===============(SIMIH-1)===============\\

              if (isGroup && isSimi && budy != undefined) {
                if (type == "imageMessage") return;
                if (type == "audioMessage") return;
                if (type == "stickerMessage") return;
                if (info.key.fromMe) return;
                console.log(budy);
                muehe = await simih(budy);
                console.log(muehe);
                reply(muehe);
              }

              //=========================================\\

              hora2 = moment.tz("America/Sao_Paulo").format("HH:mm:ss");

              if (isCmd) {
                const cmdSimilarity = listCommands(command);
                similarityCommands =
                  cmdSimilarity.similarity > 40
                    ? `Tenho uma possível semelhança de *${
                        cmdSimilarity.similarity || "0"
                      }%* entre o comando *'${
                        prefix + cmdSimilarity.command || "0"
                      }'*.`
                    : `Não foi encontrado nenhum comando semelhante com o que você usou.`;
                await reagir(from, "⚠"); // Reagir a mensagem!
                miwa.sendMessage(
                  from,
                  {
                    text: `⚠ Não encontrei o comando *'${
                      prefix + command
                    }'* na lista! Utilize o *'${prefix}menu'* para visualizar todos os comandos existentes no momento.\n\n ${similarityCommands}`,
                  },
                  { quoted: info }
                );
              }
              if (budy.includes("Ets de Vaginas")) {
                try {
                  ppimg = await miwa.profilePictureUrl(
                    `${sender.split("@")[0]}@c.us`,
                    "image"
                  );
                } catch {
                  ppimg = "https://telegra.ph/file/24fa902ead26340f3df2c.png";
                }
                ryuumods = "A meu criador Ets de Vaginas, o que voce quer com ele ?";
                sendUrlText(
                  from,
                  ryuumods,
                  NomeDoBot,
                  ``,
                  ppimg,
                  "https://wa.me/5545988037606",
                  info
                );
              }

              if (budy2.includes("vm.tiktok.com/")) {
                if (info.key.fromMe) return;
                const { tiktok } = require("betabotz-tools");
                const results = await tiktok(url);
                if (
                  results.result &&
                  results.result.length > 0 &&
                  results.result[0]._url
                ) {
                  const videoUrl = results.result[0]._url;
                  await miwa.sendMessage(
                    from,
                    { video: { url: videoUrl }, mimetype: "video/mp4" },
                    { quoted: info }
                  );
                }
              }

              if (budy.includes("www.instagram.com/reel/")) {
                if (isAutoInsta) {
                  if (info.key.fromMe) return;
                  const { instagram } = require("betabotz-tools");
                  const results = await instagram(budy);
                  if (
                    results.result &&
                    results.result.length > 0 &&
                    results.result[0]._url
                  ) {
                    const videoUrl = results.result[0]._url;
                    await miwa.sendMessage(
                      from,
                      { video: { url: videoUrl }, mimetype: "video/mp4" },
                      { quoted: info }
                    );
                  }
                }
              }

              if (budy2 === "prefixo") {
                try {
                  ppimg = await miwa.profilePictureUrl(
                    `${sender.split("@")[0]}@c.us`,
                    "image"
                  );
                } catch {
                  ppimg = "https://telegra.ph/file/24fa902ead26340f3df2c.png";
                }
                prefixomsg = `*Prefixo de comandos usado〘 ${prefix} 〙 🩸*`;
                sendUrlText(
                  from,
                  prefixomsg,
                  NomeDoBot,
                  `${tempo}, ${pushname}`,
                  ppimg,
                  "https://miwa-apis.online/",
                  info
                );
              }

              if (budy2 === "Prefixo") {
                try {
                  ppimg = await miwa.profilePictureUrl(
                    `${sender.split("@")[0]}@c.us`,
                    "image"
                  );
                } catch {
                  ppimg = "https://telegra.ph/file/24fa902ead26340f3df2c.png";
                }
                prefixomsg2 = `*Prefixo de comandos usado〘 ${prefix} 〙 🩸*`;
                sendUrlText(
                  from,
                  prefixomsg2,
                  NomeDoBot,
                  `${tempo}, ${pushname}`,
                  ppimg,
                  "https://miwa-apis.online/",
                  info
                );
              }

              //========(totext)===========\\

              if (type === "audioMessage") {
                // Verificar se o 'isTotext' está habilitado para ativar apenas a primeira parte
                if (isTotext) {
                  try {
                    // Identificar a mensagem de áudio
                    let audioMessage =
                      info.message.audioMessage ||
                      info.message.extendedTextMessage.contextInfo.quotedMessage
                        .audioMessage;
                    // Obter o buffer do áudio
                    let getBufferAudio = await getFileBuffer(
                      audioMessage,
                      "audio"
                    );

                    // Salvar o áudio localmente
                    fs.writeFileSync(
                      `./arquivos/src/totext-${sender}.mp3`,
                      getBufferAudio
                    );

                    // Criar um cliente AssemblyAI para a transcrição
                    let client = new AssemblyAI({
                      apiKey: "2bdbb9a9046a4a938677122e7cf2dbd2",
                    });
                    const dataTxt = await client.transcripts.create({
                      audio_url: `./arquivos/src/totext-${sender}.mp3`,
                      language_code: "pt",
                    });

                    // Verificar se a transcrição foi bem-sucedida
                    if (dataTxt.words.length == 0) {
                      // return reply(`*_Não foi possível transcrever seu áudio. Por favor, tente com outro._*`);
                    }
                    // Enviar a transcrição para o usuário
                    miwa.sendMessage(
                      from,
                      { text: `> ${dataTxt.text}` },
                      { quoted: info }
                    );
                    // Remover o arquivo de áudio temporário
                    fs.unlinkSync(`./arquivos/src/totext-${sender}.mp3`);
                  } catch (e) {
                    console.log(e);
                  }
                }
                //------------------------------------------------------------------------\\
                //                       FUNÇÃO DO AUTO-GPT                                \\
                //                      FEITO PELO: VITUKJK                                 \\
                //---------------------------------------------------------------------------\\
                if (isGptAudio) {
                  const fs = require("fs");
                  const { AssemblyAI } = require("assemblyai"); // Assumindo que você tem uma classe AssemblyAI
                  const { openai } = require("betabotz-tools");
                  const traduzirgpt = require("translate-google");
                  try {
                    // Identificar a mensagem de áudio
                    let audioMessage =
                      info.message.audioMessage ||
                      info.message.extendedTextMessage.contextInfo.quotedMessage
                        .audioMessage;
                    // Obter o buffer do áudio
                    let getBufferAudio = await getFileBuffer(
                      audioMessage,
                      "audio"
                    );

                    // Salvar o áudio localmente
                    fs.writeFileSync(
                      `./arquivos/src/totext-${sender}.mp3`,
                      getBufferAudio
                    );

                    // Criar um cliente AssemblyAI para a transcrição
                    let client = new AssemblyAI({
                      apiKey: "2bdbb9a9046a4a938677122e7cf2dbd2",
                    });
                    const dataTxt = await client.transcripts.create({
                      audio_url: `./arquivos/src/totext-${sender}.mp3`,
                      language_code: "pt",
                    });

                    // Verificar se a transcrição foi bem-sucedida
                    if (dataTxt.words.length === 0) {
                      return reply(
                        `*_Não foi possível transcrever seu áudio. Por favor, tente com outro._*`
                      );
                    }

                    // Obter o texto da transcrição
                    const transcribedText = dataTxt.text;

                    // Verificar se há texto transcrito
                    if (!transcribedText) {
                      return reply(
                        `*_Não foi possível entender o áudio. Por favor, tente novamente._*`
                      );
                    }

                    // Fazer uma pergunta ao OpenAI baseada no texto transcrito
                    const responseFromGPT = await openai(transcribedText);
                    const respostaIngles = responseFromGPT.result;

                    // Traduzir a resposta para português
                    const respostaPortugues = await traduzirgpt(
                      respostaIngles,
                      { to: "pt" }
                    );

                    // Enviar a resposta para o usuário
                    await miwa.sendMessage(
                      from,
                      { text: `> ${respostaPortugues}` },
                      { quoted: info }
                    );

                    // Remover o arquivo de áudio temporário
                    fs.unlinkSync(`./arquivos/src/totext-${sender}.mp3`);
                  } catch (e) {
                    console.log(e);
                    return reply(
                      "(Erro interno do servidor. Por favor, tente novamente mais tarde.)"
                    );
                  }
                }
              }
              //-------------------------------------------------------------------\\
              // A VINGANÇA, NUNCA É PLENA. MATA A ALMA E A ENVENENA! ~Seu Madruda. \\
              //---------------------------------------------------------------------\\

              if (budy.startsWith("https://telegra.ph/file/")) {
                //ryuu
                const telegraUrl = budy.trim();

                await btncomfoto(
                  from,
                  " ",
                  `Você quer ver a foto que tem neste link?`,
                  " ",
                  "Clique no botão abaixo para ver a foto:",
                  { url: "https://i.imgur.com/SjMUakH.jpeg" },
                  "image",
                  info,
                  {},
                  [
                    {
                      name: "quick_reply",
                      buttonParamsJson: JSON.stringify({
                        display_text: "Sim",
                        id: `${prefix}verimg2 ${telegraUrl}`,
                      }),
                    },
                  ]
                ); //ryuu
              }

              if (budy.startsWith("https://vm.tiktok.com/")) {
                const tiktokUrl = budy.trim();

                await btncomfoto(
                  from,
                  " ",
                  `BAIXADOR DE TIKTOK\nMIWA BOT V4`,
                  " ",
                  "Escolha a versão que deseja baixar:",
                  { url: "https://i.imgur.com/SjMUakH.jpeg" }, // Substitua pela URL da imagem que você deseja usar
                  "image",
                  info,
                  {},
                  [
                    {
                      name: "quick_reply",
                      buttonParamsJson: JSON.stringify({
                        display_text: "𝙑𝙀𝙍𝙎𝘼𝙊 𝘼𝙐𝘿𝙄𝙊",
                        id: `${prefix}tiktokaudio ${tiktokUrl}`,
                      }),
                    },
                    {
                      name: "quick_reply",
                      buttonParamsJson: JSON.stringify({
                        display_text: "𝙑𝙀𝙍𝙎𝘼𝙊 𝙑𝙄𝘿𝙀𝙊",
                        id: `${prefix}tiktok ${tiktokUrl}`,
                      }),
                    },
                  ]
                );
              }

              if (budy.startsWith("https://i.imgur.com/")) {
                //ryuu
                const imgurUrl = budy.trim();

                await btncomfoto(
                  from,
                  " ",
                  `Você quer ver a foto ou vídeo que tem neste link?`,
                  " ",
                  "Clique no botão abaixo para ver a foto ou vídeo:",
                  { url: "https://i.imgur.com/SjMUakH.jpeg" }, // Substitua pela URL da imagem que você deseja usar
                  "image",
                  info,
                  {},
                  [
                    {
                      name: "quick_reply",
                      buttonParamsJson: JSON.stringify({
                        display_text: "𝙑𝙀𝙍 𝙑𝙄𝘿𝙀𝙊",
                        id: `${prefix}vervid ${imgurUrl}`,
                      }),
                    },
                    {
                      name: "quick_reply",
                      buttonParamsJson: JSON.stringify({
                        display_text: "𝙑𝙀𝙍 𝙁𝙊𝙏𝙊",
                        id: `${prefix}verimg ${imgurUrl}`,
                      }),
                    },
                  ]
                );
              }

              if (budy.startsWith("lucas")) {
                if (!isPremium) return;
                if (info.key.fromMe) return;
                if (!q)
                  return reply(
                    `${tempo} ${pushname}, eu sou Lucas, gostaria de fazer alguma pergunta?`
                  );
                await miwa.sendMessage(from, {
                  react: { text: `💭`, key: info.key },
                });
                lucasMsg();
              }

              if (budy.startsWith("maatty")) {
                if (!isPremium) return;
                if (info.key.fromMe) return;
                if (!q)
                  return reply(
                    `${tempo} ${pushname}, eu sou Matty, gostaria de fazer alguma pergunta?`
                  );
                await miwa.sendMessage(from, {
                  react: { text: `👀`, key: info.key },
                });
                mattyMsg();
              }

              if (budy.startsWith("gemini")) {
                if (!isPremium) return;
                if (info.key.fromMe) return;
                if (!q)
                  return reply(
                    `${tempo} ${pushname}, eu sou Gemini, gostaria de fazer alguma pergunta?`
                  );
                await miwa.sendMessage(from, {
                  react: { text: `🙇🏻‍♂️`, key: info.key },
                });
                geminiMsg();
              }

            //========================================\\
          }
        }
      }
      msgupsrt().catch(async (e) => {
        if (JSON.stringify(e).includes(API_KEY_MIWA)) {
          return console.log(
            "A api caiu ou não foi possivel executar esta ação., espere retornar"
          );
        } else if (String(e).includes("Erro: aborted")) {
          file = require.resolve("./connect.js");
          delete require.cache[file];
          require(file);
        } else {
          return console.log(e);
        }
      });
    };
  };
}

iniciarMiwa().catch(async (e) => {
  console.log(
    colors.red("Erro apresentado no arquivo: './index.js' - Error: " + e)
  );
});

let file = require.resolve(__filename);
fs.watchFile(file, () => {
  fs.unwatchFile(file);
  console.log(
    colors.red(`Modificação detectada: '.${__filename}' - Arquivo Atualizado.`)
  );
  delete require.cache[file];
  require(file);
});
